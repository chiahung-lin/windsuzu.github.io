<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[LeetCode#501 Find Mode in Binary Search Tree - in Swift]]></title>
      <url>/leetcode-501/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p>
<p>給一二元搜尋樹 (BST) 包含重複節點，找出該樹的眾數 (mode(s)) (可能有多個) (出現最多次的元素) 。</p>
<p>Assume a BST is defined as follows:</p>
<ol>
<li>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ol>
<p>假設該 BST 定義為下:</p>
<ol>
<li>左子樹只包含「小於或等於」的節點</li>
<li>右子樹只包含「大於或等於」的節點</li>
<li>其餘左右子樹必須維持上述的規則</li>
</ol>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> <span class="type">BST</span> [<span class="number">1</span>,null,<span class="number">2</span>,<span class="number">2</span>],</div><div class="line">   <span class="number">1</span></div><div class="line">    \</div><div class="line">     <span class="number">2</span></div><div class="line">    /</div><div class="line">   <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> [<span class="number">2</span>].</div></pre></td></tr></table></figure></p>
<p>Note: If a tree has more than one mode, you can return them in any order.</p>
<p>如果不止一個眾數，請回傳一個沒有限制排序的陣列。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>這個做法不為最佳解，也不限制只能在 BST ，可以使用在任何二元樹。</p>
<p>利用 map 記錄每一個節點值出現的次數，並且不斷更新 maxVal (最多出現次數)的值。</p>
<p>走完一遍樹後，再從 map 中找出所有 v (次數) 等於 maxVal 的節點 k ，加進 result 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMode</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>:<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> maxVal = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">traverse</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        </div><div class="line">        dict[root!.val] = dict[root!.val] != <span class="literal">nil</span> ? dict[root!.val]! + <span class="number">1</span> : <span class="number">1</span></div><div class="line">        maxVal = <span class="built_in">max</span>(dict[root!.val]!, maxVal)</div><div class="line">        </div><div class="line">        traverse(root!.<span class="keyword">left</span>)</div><div class="line">        traverse(root!.<span class="keyword">right</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    traverse(root)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> (k,v) <span class="keyword">in</span> dict &#123;</div><div class="line">        <span class="keyword">if</span> v == maxVal &#123; res.append(k) &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#643 Maximum Average Subarray I - in Swift]]></title>
      <url>/leetcode-643/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.</p>
<p>給一個由 n 個整數組成的陣列，並且給定目標值 k 。找出陣列中連續 k 個值其平均為陣列中最大平均值，並且返回該平均值。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">12</span>,-<span class="number">5</span>,-<span class="number">6</span>,<span class="number">50</span>,<span class="number">3</span>], k = <span class="number">4</span></div><div class="line"><span class="type">Output</span>: <span class="number">12.75</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">Maximum</span> average <span class="keyword">is</span> (<span class="number">12</span>-<span class="number">5</span>-<span class="number">6</span>+<span class="number">50</span>)/<span class="number">4</span> = <span class="number">51</span>/<span class="number">4</span> = <span class="number">12.75</span></div></pre></td></tr></table></figure></p>
<p>在 [1,12,-5,-6,50,3] 陣列中，要找出連續 4 個數的平均為最大平均值。<br>答案為 [12,-5,-6,50] 這段， (12-5-6+50)/4 = 51/4 = 12.75</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先算出陣列起始 k 個元素的加總 (temp) ，新增一個目前最大值 (res)。</p>
<p>由陣列第 k 個以後開始，將 temp 去掉第一個值，並加上新的值，重新比對 res 跟 temp 。</p>
<p>最後得出的 res / k 即是最大平均值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxAverage</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">var</span> temp = nums[<span class="number">0</span>..&lt;k].<span class="built_in">reduce</span>(<span class="number">0</span>, &#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;)</div><div class="line">    <span class="keyword">var</span> res = temp</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        temp += nums[i] - nums[i-k]</div><div class="line">        res = <span class="built_in">max</span>(res, temp)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(res) / <span class="type">Double</span>(k)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#110 Balanced Binary Tree - in Swift]]></title>
      <url>/leetcode-110/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<p>給一二元樹，驗證它是否高度平衡。</p>
<p>高度平衡的定義為，二元樹其兩個子樹的每個節點的深度不超過 1 。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">5</span></div><div class="line">      / \</div><div class="line">     <span class="number">3</span>   <span class="number">4</span></div><div class="line">    / \   \</div><div class="line">   <span class="number">2</span>   <span class="number">6</span>   <span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div></pre></td></tr></table></figure></p>
<p>該二元樹其兩個子樹的每個節點，深度差皆不超過 1 ，為高度平衡。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">5</span></div><div class="line">      / \</div><div class="line">     <span class="number">3</span>   <span class="number">4</span></div><div class="line">    / \   \</div><div class="line">   <span class="number">2</span>   <span class="number">6</span>   <span class="number">1</span></div><div class="line">          /</div><div class="line">         <span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>該二元樹倒節點 4 時，其左子樹為空，深度為 1，右子樹持續走到 7 ，深度為 3 ， 3 - 1 &gt; 1 ，不為高度平衡。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>要確定每一個節點的左右子樹是否高度平衡，利用 findDepth 找出該節點的深度，再比較左右節點的差是否大於 1 。</p>
<p>再來要確定每一個節點的平衡，利用遞迴對整棵樹的每一個節點進行一次上述的比較。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(findDepth(root!.<span class="keyword">left</span>), findDepth(root!.<span class="keyword">right</span>)) + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">left</span> = findDepth(root!.<span class="keyword">left</span>)</div><div class="line">    <span class="keyword">let</span> <span class="keyword">right</span> = findDepth(root!.<span class="keyword">right</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="keyword">left</span> - <span class="keyword">right</span>) &lt;= <span class="number">1</span> &amp;&amp; isBalanced(root!.<span class="keyword">left</span>) &amp;&amp; isBalanced(root!.<span class="keyword">right</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Depth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#459 Repeated Substring Pattern - in Swift]]></title>
      <url>/leetcode-459/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>給定一個不為空的字串，且字元皆為小寫英文字母，字串長度不超過 10000 。<br>驗證該字串，是否為字串中某子字串複製組合而成。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"abab"</span></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">It's</span> the substring <span class="string">"ab"</span> twice.</div></pre></td></tr></table></figure></p>
<p>abab 是被 ab 子字串複製組合而成</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"aba"</span></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>aba 不為任何子字串的重複</p>
<p>Example 3:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"abcabcabcabc"</span></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">It's</span> the substring <span class="string">"abc"</span> four times. (<span class="type">And</span> the substring <span class="string">"abcabc"</span> twice.)</div></pre></td></tr></table></figure></p>
<p>abcabcabcabc 為 abc 重組四次， abcabc 重組兩次而成</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>若字串符合題目條件，<br>那字串第一個字元會是每個重複字串的第一個字元(頭)，<br>而字串最後一個字元會是每個重複字串的最後一個字元(腳)。</p>
<p>將原字串 S 複製為二生出 SS ( abab -&gt; abababab )<br>再將 SS 頭跟腳去掉得到 S2 ( abababab -&gt; _bababa_ )<br>若在去掉頭腳的 S2 中還可以找到 S 的模式那代表這個字串是符合題目條件的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">repeatedSubstringPattern</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> ss = s + s</div><div class="line">    <span class="keyword">let</span> s2 = ss.substring(with: ss.index(after: ss.startIndex)..&lt;ss.index(before: ss.endIndex))</div><div class="line">    <span class="keyword">return</span> s2.<span class="built_in">contains</span>(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#175 Combine Two Tables - in MySQL]]></title>
      <url>/leetcode-175/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Table: Person</div><div class="line"></div><div class="line">+-------------+---------+</div><div class="line">| Column Name | Type    |</div><div class="line">+-------------+---------+</div><div class="line">| PersonId    | int     |</div><div class="line">| FirstName   | varchar |</div><div class="line">| LastName    | varchar |</div><div class="line">+-------------+---------+</div><div class="line">PersonId is the primary key column for this table.</div><div class="line"></div><div class="line">PersonId 是這個表格的主鍵。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Table: Address</div><div class="line"></div><div class="line">+-------------+---------+</div><div class="line">| Column Name | Type    |</div><div class="line">+-------------+---------+</div><div class="line">| AddressId   | int     |</div><div class="line">| PersonId    | int     |</div><div class="line">| City        | varchar |</div><div class="line">| State       | varchar |</div><div class="line">+-------------+---------+</div><div class="line">AddressId is the primary key column for this table.</div><div class="line"></div><div class="line">AddressId 是這個表格的主鍵。</div></pre></td></tr></table></figure>
<p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:<br>FirstName, LastName, City, State</p>
<p>寫一個 SQL 查詢，回傳每一個 Person 的值，以及其對應的 Address 欄位，<br>格式為 FirstName, LastName, City, State ，<br>不管有沒有對應的 Address 都要傳回。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>沒什麼難度的 SQL 查詢。</p>
<p>注意的是不管有沒有對應的 Address 都要回傳 Person ，所以要使用 LEFT JOIN 右邊為空時返回 null 即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> FirstName, LastName, City, State</div><div class="line"><span class="keyword">FROM</span> Person</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address <span class="keyword">ON</span> Person.PersonId = Address.PersonId</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#367 Valid Perfect Square - in Swift]]></title>
      <url>/leetcode-367/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p>
<p>給一正整數，驗證其是否為一個完全平方數。</p>
<p>Note: Do not use any built-in library function such as sqrt.</p>
<p>不使用任何語法中的 sqrt 函式。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">16</span></div><div class="line"><span class="type">Returns</span>: <span class="type">True</span></div></pre></td></tr></table></figure></p>
<p>16 可以是 4 的平方數</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">14</span></div><div class="line"><span class="type">Returns</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>14 不是任何正整數的平方數</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h1 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h1><p>根據 <a href="http://www.cs.wustl.edu/~kjg/CS101_SP97/Notes/SquareRoot/sqrt.html" target="_blank" rel="external">http://www.cs.wustl.edu/~kjg/CS101_SP97/Notes/SquareRoot/sqrt.html</a> 的指引，要達成 sqrt function 的運作，首先先找出一個數符合 <code>y^2 = x, y = x/y</code> ，知道這個條件後:</p>
<ul>
<li>猜一個數 g 來代表 y ，並且測試</li>
<li>檢驗 x / g</li>
<li>如果 x/g 等於 g ，那就代表找到 sqrt 的解，若沒有等於，再猜一個更好的 g</li>
<li>這個更好的 g 等於 x 和 x /g 的平均值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> x = num</div><div class="line">    <span class="keyword">while</span> x * x &gt; num &#123;</div><div class="line">        x = (x + (num/x)) / <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x * x == num</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h1><p>使用二元搜尋法，從對半開始找起，如果等於答案則返回 true 。</p>
<p>大於則將右邊改為中間數 - 1，小於則將左邊改為中間數 + 1 。持續對半搜尋答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPerfectSquareBinary</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> (<span class="keyword">left</span>, <span class="keyword">right</span>) = (<span class="number">1</span>, num)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt;= <span class="keyword">right</span> &#123;</div><div class="line">        <span class="keyword">let</span> mid = (<span class="keyword">left</span> + <span class="keyword">right</span>) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> mid * mid == num &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> mid * mid &gt; num &#123;</div><div class="line">            <span class="keyword">right</span> = mid - <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">left</span> = mid + <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
            <category> Binary Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#345 Reverse Vowels of a String - in Swift]]></title>
      <url>/leetcode-345/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p>反轉字串，但只反轉母音的部分。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Example</span> <span class="number">1</span>:</div><div class="line"><span class="type">Given</span> s = <span class="string">"hello"</span>, <span class="keyword">return</span> <span class="string">"holle"</span>.</div></pre></td></tr></table></figure>
<p>hello 中的 eo 轉換為 oe</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Example</span> <span class="number">2</span>:</div><div class="line"><span class="type">Given</span> s = <span class="string">"leetcode"</span>, <span class="keyword">return</span> <span class="string">"leotcede"</span>.</div></pre></td></tr></table></figure>
<p>leetcode 中的 eeoe 轉換為 eoee</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>定義母音表，接著像 <a href="https://windsuzu.github.io/leetcode-344/">Reverse String</a> 這題一樣進行兩個指針的迴圈。</p>
<p>不同的是，若當下左邊的字母不為母音，就將左指針 +1<br>反之，右邊不為母音，將右指針 -1</p>
<p>確定抓到左右兩個母音時，就將左右調換，左右各進退一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseVowels</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">set</span>: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt; = [<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>, <span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span>, <span class="string">"O"</span>, <span class="string">"U"</span>]</div><div class="line">    <span class="keyword">var</span> s = <span class="type">Array</span>(s.characters)</div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = s.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &#123;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &amp;&amp; !<span class="keyword">set</span>.<span class="built_in">contains</span>(s[<span class="keyword">left</span>]) &#123;</div><div class="line">            <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &amp;&amp; !<span class="keyword">set</span>.<span class="built_in">contains</span>(s[<span class="keyword">right</span>]) &#123;</div><div class="line">            <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> temp = s[<span class="keyword">left</span>]</div><div class="line">        s[<span class="keyword">left</span>] = s[<span class="keyword">right</span>]</div><div class="line">        s[<span class="keyword">right</span>] = temp</div><div class="line">        <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Two Pointers </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#342 Power of Four - in Swift]]></title>
      <url>/leetcode-342/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>
<p>驗證整數是否為 4 的次方數。</p>
<p>Follow up: Could you solve it without loops/recursion?</p>
<p>可不可以不使用迴圈或遞迴。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given num = 16, return true. Given num = 5, return false.</p>
<p>輸入 16 回傳 true<br>輸入 5 則回傳 false</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>要達成 4 的次方數，需要符合三個條件:</p>
<ol>
<li><p>4 的次方數一定大於 0</p>
</li>
<li><p>4 的次方數在 Bit 中，一定只有開頭為 1<br>如 4(100), 16(10000), 64(1000000), 256(100000000)</p>
<p>為了驗證只有開頭為 1 ，只要和未進位的前一個數字做 &amp; 運算，得出 0 即可。<br>如 4(100) &amp; 3(011) = 0,  16(10000) &amp; 15(01111) = 0</p>
</li>
<li><p>除了 4 的次方數只有開頭為 1 以外， 2 的次方數也是如此。<br>但 4 的次方數還有一點不同於 2 的次方數，也就是 1 所在的位置。<br>4 的次方數的 1 一律位在奇數的位置，如 100 在 3 ， 10000 在 5 ， 1000000 在 7 …</p>
<p>要驗證 1 是否在奇數位置，與 0x55555555 做 &amp; 運算，得出不為 0 的答案即可。<br>0x55555555 在 Bit 中為 01010101010101010101010101010101<br>可以對應到奇數位置是否存在。</p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> &amp;&amp; num &amp; (num-<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; num &amp; <span class="number">0x55555555</span> != <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#66 Plus One - in Swift]]></title>
      <url>/leetcode-66/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>
<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>
<p>The digits are stored such that the most significant digit is at the head of the list.</p>
<p>利用陣列來表示一個非負數整數，不可包含前綴的 0 ，現在對這個整數加一。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>7 = [7] , 7 + 1 = 8 = [8]</p>
<p>19 = [1,9] , 19 + 1 = 20 = [2,0]。</p>
<p>999 = [9,9,9] , 999 + 1 = 1000 = [1,0,0,0]</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先對陣列的最後一個值 + 1 。</p>
<p>若是陣列中含有 10 ，代表需要進位。將該值變為零，前一個值 + 1 。</p>
<p>若遇到 [9,9] 這類的，必須要新增一個新陣列放 1 在最前方，使之變為 [1,0,0] 。 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(<span class="number">_</span> digits: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">        <span class="keyword">var</span> digits = digits</div><div class="line">        digits[digits.<span class="built_in">count</span> - <span class="number">1</span>] += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> digits.<span class="built_in">contains</span>(<span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">let</span> i = digits.index(of: <span class="number">10</span>)!</div><div class="line">            digits[i] = <span class="number">0</span></div><div class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> &#123;</div><div class="line">                digits[i - <span class="number">1</span>] += <span class="number">1</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> new = [<span class="number">1</span>]</div><div class="line">                new.append(contentsOf: digits)</div><div class="line">                digits = new</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> digits</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#118 Pascal's Triangle - in Swift]]></title>
      <url>/leetcode-118/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>給定行數 N ，返回 N 行的<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2" target="_blank" rel="external">帕斯卡三角形</a>。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">For</span> example, given numRows = <span class="number">5</span>,</div><div class="line"><span class="type">Return</span></div><div class="line"></div><div class="line">[</div><div class="line">       [<span class="number">1</span>],</div><div class="line">      [<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">     [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">    [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],</div><div class="line">   [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從 wikipedia 發現 Pascal’s Triangle 有一個特性，從第二層之後，</p>
<p>除了首尾皆為 1 以外，其他每一格的值皆由上方兩個值加總所得。</p>
<p><img src="/leetcode-118/PascalTriangleAnimated2.gif" alt=""></p>
<p>所以透過這個特性，來填滿每一層除了首尾以外的中間值即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(<span class="number">_</span> numRows: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">0</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    res.append([<span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">1</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    res.append([<span class="number">1</span>, <span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">2</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..&lt;numRows &#123;</div><div class="line">        <span class="keyword">var</span> temp = [<span class="type">Int</span>]()</div><div class="line">        temp.append(<span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> lastRow = res[i - <span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;lastRow.<span class="built_in">count</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> i == lastRow.<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">                temp.append(<span class="number">1</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp.append(lastRow[i] + lastRow[i + <span class="number">1</span>])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res.append(temp)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#101 Symmetric Tree - in Swift]]></title>
      <url>/leetcode-101/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>給定二元樹，驗證他是否對稱。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">2</span></div><div class="line"> / \ / \</div><div class="line"><span class="number">3</span>  <span class="number">4</span> <span class="number">4</span>  <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>But the following [1,2,2,null,3,null,3] is not:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="number">1</span></div><div class="line"> / \</div><div class="line"><span class="number">2</span>   <span class="number">2</span></div><div class="line"> \   \</div><div class="line">  <span class="number">3</span>   <span class="number">3</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從根節點左右開始驗證，若左右皆為 nil 則為對稱，若只有某一邊 nil 則不為對稱。</p>
<p>若兩邊都存在，比對值是否相同，相同則繼續往下比對，</p>
<p>比對左子樹的左節點，和右子樹的右節點是否相同，</p>
<p>再比對左子樹的右節點，和右子樹的左節點是否相同，</p>
<p>直到結束，返回答案值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="literal">true</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">checking</span><span class="params">(<span class="number">_</span> <span class="keyword">left</span>: TreeNode?, <span class="number">_</span> <span class="keyword">right</span>: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span> &#123; res = <span class="literal">false</span>; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span> &#123; res = <span class="literal">false</span>; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">left</span>!.val != <span class="keyword">right</span>!.val &#123;</div><div class="line">                res = <span class="literal">false</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                checking(<span class="keyword">left</span>?.<span class="keyword">left</span>, <span class="keyword">right</span>?.<span class="keyword">right</span>)</div><div class="line">                checking(<span class="keyword">left</span>?.<span class="keyword">right</span>, <span class="keyword">right</span>?.<span class="keyword">left</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    checking(root?.<span class="keyword">left</span>, root?.<span class="keyword">right</span>)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Depth-first Search </category>
            
            <category> Breadth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
            <tag> Breadth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#257 Binary Tree Paths - in Swift]]></title>
      <url>/leetcode-257/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, return all root-to-leaf paths.</p>
<p>給一個二元樹，返回所有根節點到葉節點的路徑。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>given the following binary tree:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">1</span></div><div class="line">   /   \</div><div class="line">  <span class="number">2</span>     <span class="number">3</span></div><div class="line"> /  \</div><div class="line"><span class="number">4</span>    <span class="number">5</span></div></pre></td></tr></table></figure>
<p>All root-to-leaf paths are:</p>
<p>[“1-&gt;2-&gt;4”, “1-&gt;2-&gt;5”, “1-&gt;3”]</p>
<p>根據上圖，總共有兩個根節點到葉節點的路徑，分別為 “1-&gt;2-&gt;4” 以及 “1-&gt;2-&gt;5” 和 “1-&gt;3”。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>以範例來說，利用 dps 一開始會跑根節點 1 到 2 ，給新路徑 “1-&gt;”<br>當前節點為 2 時， 當前路徑為 “1-&gt;”<br>下一個到 4 時， 當前路徑為 “1-&gt;2-&gt;”<br>且 4 沒有任何子節點了，所以更新路徑為 “1-&gt;2-&gt;4” 並且加入陣列中</p>
<p>回到 2 的分岔，當前路徑為 “1-&gt;”<br>下一個到 5 時， 當前路徑為 “1-&gt;2-&gt;”<br>且 5 沒有任何子節點了，所以更新路徑為 “1-&gt;2-&gt;5” 並且加入陣列中</p>
<p>回到 1 的分岔，<br>下一個到 3 時，當前路徑為 “1-&gt;”<br>且 3 沒有任何子節點了，所以更新路徑為 “1-&gt;3” 並且加入陣列中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">String</span>]()</div><div class="line">    search(root, <span class="string">""</span>, &amp;res)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> currentPath: String, <span class="number">_</span> res: <span class="keyword">inout</span> [String])</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root?.<span class="keyword">right</span> == <span class="literal">nil</span> &#123; res.append(<span class="string">"\(currentPath)\(root!.val)"</span>) &#125;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> != <span class="literal">nil</span> &#123; search(root?.<span class="keyword">left</span>, <span class="string">"\(currentPath)\(root!.val)-&gt;"</span>, &amp;res) &#125;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">right</span> != <span class="literal">nil</span> &#123; search(root?.<span class="keyword">right</span>, <span class="string">"\(currentPath)\(root!.val)-&gt;"</span>, &amp;res) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Depth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#198 House Robber - in Swift]]></title>
      <url>/leetcode-198/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>
<p>你是一個專業的小偷，打算沿著整條街偷每一戶的東西。 你可以偷每一戶的東西，但只要在同一天晚上，你偷完一間房子，又偷他左右鄰居，這時就會有警鈴響起，自動呼叫警察過來。</p>
<p>現在給你一個包含正整數的陣列，每個數字代表每間住戶所擁有的財產，你需要找到能夠在一個晚上，偷到最多錢的方法，且不會驚動到警鈴。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">9</span>]</div><div class="line"><span class="type">Output</span> : <span class="number">16</span></div></pre></td></tr></table></figure></p>
<p>偷 3, 13 能偷到最多錢，也不會驚動警鈴。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>]</div><div class="line"><span class="type">Output</span> : <span class="number">95</span></div></pre></td></tr></table></figure></p>
<p>偷 50, 45 能偷到最多錢，也不會驚動警鈴。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>一開始照範例一來說，只要算出奇數戶的加總，和偶數戶的加總，再來比對大小即可。</p>
<p>但是若遇到範例二，可能會出現隔兩間的奇偶數相加，反而還比最多間不會觸動警鈴的加法，還要多的解。</p>
<p>所以必須在每次加上新住戶的錢時，同時比對奇偶數目前已經累積的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> b = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span>&#123;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123; a = <span class="built_in">max</span>(a + nums[i], b) &#125;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span> &#123; b = <span class="built_in">max</span>(b + nums[i], a) &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#21 Merge Two Sorted Lists - in Swift]]></title>
      <url>/leetcode-21/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p>合併兩個已經被排序過的鏈結串列返回一個全新的鏈結串列。新的串列必須保持排序。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">list2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>比對兩組串列值，若 l1 &lt; l2 則當前答案串列擺入 l1 ，並且將 l1.next 與沒有擺入的 l2 帶入下一個 next 比較。<br>若相反，將 l2 放進答案串列，並且將 l2.next 與沒有擺入的 l1 帶入下一個 next 比較。</p>
<p>直至某一方先到底，就將另一方剩下的串列都放進答案串列中。</p>
<p><img src="/leetcode-21/recursive.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l2 &#125;</div><div class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l1 &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> l1!.val &lt; l2!.val &#123;</div><div class="line">        l1!.next = mergeTwoLists(l1!.next, l2)</div><div class="line">        <span class="keyword">return</span> l1</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        l2!.next = mergeTwoLists(l2!.next, l1)</div><div class="line">        <span class="keyword">return</span> l2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Linked List </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#263 Ugly Number - in Swift]]></title>
      <url>/leetcode-263/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a program to check whether a given number is an ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>
<p>Note that 1 is typically treated as an ugly number.</p>
<p>驗證給的數字是否為醜數 。</p>
<p>醜數為一正整數，其質因數只包含 2, 3, 5 。</p>
<p>例如 6 和 8 就是醜數， 14 不是因為他的質因數包含 7 。</p>
<p>1 是特例的醜數。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>因為質因數包含 2, 3, 5 ，那只要確認給的數字能否被這三個數字整除到 1 即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isUgly</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> num == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> num = num</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...<span class="number">5</span> <span class="keyword">where</span> i != <span class="number">4</span> &#123;</div><div class="line">        <span class="keyword">while</span> num % i == <span class="number">0</span> &#123;</div><div class="line">            num /= i</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#27 Remove Element - in Swift]]></title>
      <url>/leetcode-27/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>給定陣列和目標值，刪除陣列中所有的目標值，返回新的陣列長度。</p>
<p>可以隨意變動陣列元素，但只可以在同一個陣列操作，不可使用其他多餘的陣列。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.</p>
<p>題目規定從 [3,2,2,3] 移除所有的 3 ，會得到 [2,2] 長度為 2 。 </p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>遍尋陣列，只要當下值不等於目標值，就從全新的 index 開始累積一次陣列。</p>
<p>最後返回 index 累積的次數，即為答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int], <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums[i] != val &#123;</div><div class="line">            nums[index] = nums[i]</div><div class="line">            index += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> index</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Two Pointers </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#53 Maximum Subarray - in Swift]]></title>
      <url>/leetcode-53/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>找出陣列中，擁有最大值的子陣列，子陣列的值必須是連續且至少有一個值的。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>given the array [-2,1,-3,4,-1,2,1,-5,4],</p>
<p>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p>
<p>在陣列 [-2,1,-3,4,-1,2,1,-5,4] 中， [4,-1,2,1] 可以得到最大加總值 6 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>題目要求出該陣列最大的子陣列。利用動態規劃，把題目拆成每一小段，如果每下一段加總大於前一小段，就將值累積起來。否則應該起始新的段落重新開始。</p>
<p><img src="/leetcode-53/dp.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> nums.isEmpty &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> temp = nums[<span class="number">0</span>], end = nums[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        temp = <span class="built_in">max</span>(temp + nums[i], nums[i])</div><div class="line">        end = <span class="built_in">max</span>(temp, end)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> end</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Divide and Conquer </category>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#35 Search Insert Position - in Swift]]></title>
      <url>/leetcode-35/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p>給定排序過陣列和一個目標值，找出該目標值位於陣列的索引值。所以沒有該數，回傳該數應該被插入在什麼位置。</p>
<p>陣列中沒有重複的數字。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>[1,3,5,6], 5 → 2<br>陣列中 5 的索引為 2</p>
<p>[1,3,5,6], 2 → 1<br>陣列中沒有 2 ，應該在位置 1 插入</p>
<p>[1,3,5,6], 7 → 4<br>陣列中沒有 7 ，應該在位置 4 插入</p>
<p>[1,3,5,6], 0 → 0<br>陣列中沒有 0 ，應該在位置 0 插入</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>首先定義陣列範圍 low 跟 high 。<br>從中間 ( (low + high) / 2) 開始找起，如果中間值等於目標值，回傳中間索引。</p>
<p>如果中間值大於目標值，將 high 向左倒退一位。<br>如果中間值小於目標值，將 low 向右推進一位。</p>
<p>如果目標值存在於陣列中，會在第一段 if 得出結果，<br>如果目標值不在陣列中，會隨著 low 的變動最後得到應插入的索引。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> low = <span class="number">0</span>, high = nums.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> low &lt;= high &#123;</div><div class="line">        <span class="keyword">let</span> mid = (low + high) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> nums[mid] == target &#123; <span class="keyword">return</span> mid &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123; high = mid - <span class="number">1</span> &#125;</div><div class="line">        <span class="keyword">else</span> &#123; low = mid + <span class="number">1</span> &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Binary Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#437 Path Sum III - in Swift]]></title>
      <url>/leetcode-437/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>
<p>有一棵二元樹，每一個節點皆代表一整數。</p>
<p>找出有幾條路徑，加總值等於題目賦予的值。</p>
<p>路徑不用從根節點開始，也不需要再葉節點結束。但一定是從父節點一直往下移動。</p>
<p>整棵樹不會超過 1000 個節點，而且值會在 -1,000,000 到 1,000,000 之間。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root = [<span class="number">10</span>,<span class="number">5</span>,-<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,null,<span class="number">11</span>,<span class="number">3</span>,-<span class="number">2</span>,null,<span class="number">1</span>], sum = <span class="number">8</span></div><div class="line"></div><div class="line">           <span class="number">10</span></div><div class="line">          /  \</div><div class="line">         <span class="number">5</span>   -<span class="number">3</span></div><div class="line">        / \    \</div><div class="line">       <span class="number">3</span>   <span class="number">2</span>   <span class="number">11</span></div><div class="line">      / \   \</div><div class="line">     <span class="number">3</span>  -<span class="number">2</span>   <span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Return</span> <span class="number">3</span>. <span class="type">The</span> paths that sum to <span class="number">8</span> are:</div><div class="line"></div><div class="line"><span class="number">1</span>.  <span class="number">5</span> -&gt; <span class="number">3</span></div><div class="line"><span class="number">2</span>.  <span class="number">5</span> -&gt; <span class="number">2</span> -&gt; <span class="number">1</span></div><div class="line"><span class="number">3</span>. -<span class="number">3</span> -&gt; <span class="number">11</span></div></pre></td></tr></table></figure>
<p>這棵樹共有 3 條路徑加總為 8 。<br>第一條 5 -&gt; 3<br>第二條 5 -&gt; 2 -&gt; 1<br>第三條 -3 -&gt; 11</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先寫出 findPath 函式，從確定好的頂點開始往下走，如果節點值與目標值相同，代表路徑多了一條。</p>
<p>每往下走目標值必須與當前的節點值相減，便於比對整條路的加總。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPath</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> root.val == sum &#123; res += <span class="number">1</span> &#125;</div><div class="line">    res += findPath(root.<span class="keyword">left</span>, sum - root.val)</div><div class="line">    res += findPath(root.<span class="keyword">right</span>, sum - root.val)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由根節點開始，往下給每一個節點進行 findPath ，最終得出所有可能的路徑。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">return</span> findPath(root, sum) + pathSum(root.<span class="keyword">left</span>, sum) + pathSum(root.<span class="keyword">right</span>, sum)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/leetcode-437/nodesum.gif" alt=""></p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#83 Remove Linked List Elements - in Swift]]></title>
      <url>/leetcode-83/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>給一個以排序鏈結串列，刪除所有重複的元素。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>, <span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">2</span>.</div><div class="line"><span class="type">Given</span> <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">3</span>, <span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>.</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用遞迴概念，若是該點 (A) 的 next (B) ，與 B 的 next (C) 重複，</p>
<p>則返回 C 成為 A 的新 next 。</p>
<p><img src="/leetcode-83/remove_nodes.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplicates</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head?.next == <span class="literal">nil</span> &#123; <span class="keyword">return</span> head &#125;</div><div class="line">    head!.next = deleteDuplicates(head!.next)</div><div class="line">    <span class="keyword">return</span> head!.val == head!.next?.val ? head!.next : head</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Linked List </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#70 Climbing Stairs - in Swift]]></title>
      <url>/leetcode-70/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<p>你正在爬樓梯，需要花 n 步可以走到頂端。</p>
<p>每一步你可以踩 1 或 2 格樓梯。</p>
<p>請問你有幾種方法可以走到頂端 ?</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>如果有 1 層，有 1 一種方式 (只有踩 1 格)</p>
<p>如果有 2 層，有 11, 2 兩種方式 (連續踩兩次 1 格或一次踩 2 格)</p>
<p>如果有 3 層，有 111, 12, 21 三種方式</p>
<p>如果有 4 層，有 1111, 112, 121, 211, 22 五種方式</p>
<p>如果有 5 層，有 11111, 1112, 1121, 1211, 2111, 122, 212, 221 八種方式</p>
<hr>
<p>注意看，<br>n = 1, 1<br>n = 2, 2<br>n = 3, 3 = 1 + 2 (前面兩個結果相加)<br>n = 4, 5 = 3 + 2 (前面兩個結果相加)<br>n = 5, 8 = 5 + 3 (前面兩個結果相加)</p>
<p>這題其實要解的是<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="external">費氏數列</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span> &#123; <span class="keyword">return</span> <span class="number">2</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> n1 = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> n2 = <span class="number">2</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">2</span>..&lt;n &#123;</div><div class="line">        res = n1 + n2</div><div class="line">        n1 = n2</div><div class="line">        n2 = res</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#231 Power of Two - in Swift]]></title>
      <url>/leetcode-231/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer, write a function to determine if it is a power of two.</p>
<p>給個整數，寫個函式驗證他是否為 2 的平方數。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>只要可以被 2 整除，就對該數除 2 ，直到無法再除。</p>
<p>查看該數是否為 1 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> n = n</div><div class="line">    <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span> &#123; n /= <span class="number">2</span> &#125;</div><div class="line">    <span class="keyword">return</span> n == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="位元操作"><a href="#位元操作" class="headerlink" title="位元操作"></a>位元操作</h2><p>2 的位元數就代表該數「二進位」只有一個 1 。</p>
<p>所以只要將 n 與 n - 1 做 AND 運算看是否為 0 即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>(<span class="number">1</span>), <span class="number">2</span>(<span class="number">10</span>), <span class="number">4</span>(<span class="number">100</span>), <span class="number">8</span>(<span class="number">1000</span>), <span class="number">16</span>(<span class="number">10000</span>) ....</div><div class="line"></div><div class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></div><div class="line"><span class="number">10</span> &amp; <span class="number">01</span> = <span class="number">0</span></div><div class="line"><span class="number">100</span> &amp; <span class="number">011</span> = <span class="number">0</span></div><div class="line"><span class="number">1000</span> &amp; <span class="number">0111</span> = <span class="number">0</span></div><div class="line">..</div><div class="line">..</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">return</span> n &amp; (n - <span class="number">1</span>) == <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#458 Poor Pigs - in Swift]]></title>
      <url>/leetcode-458/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>There are 1000 buckets, one and only one of them contains poison, the rest are filled with water. They all look the same. If a pig drinks that poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket contains the poison within one hour.</p>
<p>有一千個桶子，只有一個桶子裝滿毒，其他的皆裝滿水。</p>
<p>如果一隻豬喝到毒，他會在 15 分鐘內死掉。</p>
<p>你需要用到最少幾隻豬來試出哪一個桶子有毒 ?</p>
<p>Answer this question, and write an algorithm for the follow-up general case.</p>
<p>回答問題，並且寫出接下來 follow-up 的演算法。</p>
<p>If there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the “poison” bucket within p minutes? There is exact one bucket with poison.</p>
<p>如果有 n 個桶子，豬喝到毒會在 m 分鐘內死掉，請問需要幾隻豬 (x) 來找出毒桶子在 p 分鐘內 ?</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>如果有 60 分鐘可以測 5 個桶子，喝到毒的豬會在 15 分鐘死掉，那只需要一隻豬即可。</p>
<p>喝一個桶子，等 15 分鐘，再喝一個，等 15 分鐘，直到喝完四個。如果沒死，代表第五個桶子有毒。</p>
<hr>
<p>如果有 60 分鐘測 5x5 個桶子，一樣喝到毒會在 15 分鐘死掉，那這時只需兩隻豬。</p>
<p>一隻豬由左往右喝，一隻豬由上往下喝，喝完等待 15 分鐘，一樣做四次測驗，如果兩隻豬都沒有死掉，代表第二十五個桶子有毒。</p>
<hr>
<p>如果有 60 分鐘測 5x5x5 個桶子，一樣喝到毒會在 15 分鐘死掉，那這時只需三隻豬。</p>
<p>一隻豬由左往右喝整層，一隻豬由上往下喝整層，一隻豬由前往後喝整層，喝完等待 15 分鐘，一樣做四次測驗，如果三隻豬都沒有死掉，代表第一百二十五個桶子有毒。</p>
<p><img src="/leetcode-458/poor_pigs.gif" alt=""></p>
<p>到這裡我們已經可以知道，如果有 n 桶水，可以測試 b 次 ( minutesToTest / minutesToDie + 1 )時，<br>只要跟豬的數量 x 平方，可以大於等於 n 就可以找出毒，也就是 <code>b^x &gt;= n</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">1000</span>, minutesToTest = <span class="number">60</span>, minutesToDie = <span class="number">4</span>, b = <span class="number">60</span>/<span class="number">4</span>+<span class="number">1</span> = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="number">5</span>^x &gt;= <span class="number">1000</span></div><div class="line"></div><div class="line">x = log5(<span class="number">1000</span>) = <span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">poorPigs</span><span class="params">(<span class="number">_</span> buckets: Int, <span class="number">_</span> minutesToDie: Int, <span class="number">_</span> minutesToTest: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> pigs = <span class="number">0.0</span></div><div class="line">    <span class="keyword">while</span> pow(<span class="type">Double</span>(minutesToTest / minutesToDie + <span class="number">1</span>), pigs) &lt; <span class="type">Double</span>(buckets) &#123;</div><div class="line">        pigs += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(pigs)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#645 Set Mismatch - in Swift]]></title>
      <url>/leetcode-645/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.</p>
<p>一組 Set 包含整數 1 到 n ，但發生了資料錯誤，有一個整數被重複印出兩次且取代某另一個整數，所以整組 Set 中包含一個已重複的整數和一個消失的整數。</p>
<p>Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.</p>
<p>給一個陣列代表已經發生錯誤的 Set ，你的工作是先找出出現兩次的數，然後再找出消失的數。回傳這兩個數。</p>
<blockquote>
<p>Note:<br>The given array size will in the range [2, 10000].<br>The given array’s numbers won’t have any order.</p>
<p>陣列長度介於 [2, 10000]<br>給予的陣列不會有任何排列。</p>
</blockquote>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>]</div><div class="line"><span class="type">Output</span>: [<span class="number">2</span>,<span class="number">3</span>]</div></pre></td></tr></table></figure></p>
<p>2 被重複印出兩次， 3 是消失的那一個數字，所以回傳 [2, 3] 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>一個字典拿來記錄每一個數字出現的次數，並且計算如果資料沒有發生錯誤，正確的總數會是多少。</p>
<p>尋遍資料，如果出現兩次即可確定重複數字為何，沒有出現過的則與正確總數相減，最後得出缺少的數字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>] -&gt; dict = [<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">1</span>]</div><div class="line">          -&gt; sum = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> = <span class="number">10</span></div><div class="line"></div><div class="line">dict[<span class="number">2</span>] &gt; <span class="number">1</span> =&gt; <span class="number">2</span> duplicated</div><div class="line"><span class="number">10</span> - <span class="number">1</span> - <span class="number">2</span> - <span class="number">4</span> = <span class="number">3</span> =&gt; <span class="number">3</span> loss</div><div class="line"></div><div class="line">result = [<span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findErrorNums</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> sum = <span class="type">Array</span>(<span class="number">1</span>...nums.<span class="built_in">count</span>).<span class="built_in">reduce</span>(<span class="number">0</span>, &#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        dict[num] = dict[num] != <span class="literal">nil</span> ? dict[num]! + <span class="number">1</span> : <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> dict[num]! &gt; <span class="number">1</span>&#123;</div><div class="line">            res.append(num)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            sum -= num</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    res.append(sum)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#326 Power of Three - in Swift]]></title>
      <url>/leetcode-326/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer, write a function to determine if it is a power of three.</p>
<p>給予一個整數，找出他是否為 3 的某次方。</p>
<p>Follow up:<br>Could you do it without using any loop / recursion?</p>
<p>能否不用任何迴圈 / 遞迴 ?</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="Iterative-Solution"><a href="#Iterative-Solution" class="headerlink" title="Iterative Solution"></a>Iterative Solution</h2><p>作為 3 的次方數，不斷除以 3 就會變成 1 ，但必須要注意數字要保持 % 3 == 0 。</p>
<p>27 -&gt; 27/3 -&gt; 9/3 -&gt; 3/3 -&gt; 1 (O)</p>
<p>18 -&gt; 18/3 -&gt; 6/3 -&gt; 2 (X)</p>
<p>15 -&gt; 15/3 -&gt; 5 (%3 != 0) (X)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> x = n</div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">1</span> &#123;</div><div class="line">        <span class="keyword">while</span> x % <span class="number">3</span> == <span class="number">0</span> &#123;</div><div class="line">            x /= <span class="number">3</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Recursive-Solution"><a href="#Recursive-Solution" class="headerlink" title="Recursive Solution"></a>Recursive Solution</h2><p>把迴圈換成遞迴。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n == <span class="number">1</span> || (n % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; isPowerOfThree(n / <span class="number">3</span>)))</div></pre></td></tr></table></figure>
<h2 id="No-Loop-Recursion-Solution"><a href="#No-Loop-Recursion-Solution" class="headerlink" title="No Loop / Recursion Solution"></a>No Loop / Recursion Solution</h2><p>3^19 為 1,162,261,467 , 再過來 3^20 = 3,486,784,401 已經超出 Int 的最大範圍 (2,147,483,647)。</p>
<p>所以只要 n &gt; 0 且能被 3^19 整除就是 3 的次方數。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> ( n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#182 Duplicate Emails - in MySQL]]></title>
      <url>/leetcode-182/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a SQL query to find all duplicate emails in a table named Person.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+<span class="comment">----+---------+</span></div><div class="line">| Id | Email   |</div><div class="line">+<span class="comment">----+---------+</span></div><div class="line">| 1  | a@b.com |</div><div class="line">| 2  | c@d.com |</div><div class="line">| 3  | a@b.com |</div><div class="line">+<span class="comment">----+---------+</span></div></pre></td></tr></table></figure>
<p>寫出 SQL Query 從 Person 找出所有有重複的 email 資料。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example, your query should return the following for the above table:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+<span class="comment">---------+</span></div><div class="line">| Email   |</div><div class="line">+<span class="comment">---------+</span></div><div class="line">| a@b.com |</div><div class="line">+<span class="comment">---------+</span></div></pre></td></tr></table></figure>
<p>根據上面的例子，應該要回傳這樣的表。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>首先用 GROUP BY 將 Email 分組起來。</p>
<p>再來利用 HAVING 找出分組後誰的 Email 數量大於 1 的即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Email</div><div class="line"><span class="keyword">FROM</span> Person</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(Email) &gt; <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#107 Binary Tree Level Order Traversal II - in Swift]]></title>
      <url>/leetcode-107/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
<p>給定二元樹，返回他從底部到根部的節點尋訪。 (由左到右，由層到層，從葉到根)</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> binary tree [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,null,null,<span class="number">15</span>,<span class="number">7</span>],</div><div class="line"></div><div class="line">       <span class="number">3</span></div><div class="line">      / \</div><div class="line">     <span class="number">9</span>  <span class="number">20</span></div><div class="line">       /  \</div><div class="line">      <span class="number">15</span>   <span class="number">7</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> its bottom-up level order traversal <span class="keyword">as</span>:</div><div class="line"></div><div class="line">[</div><div class="line">   [<span class="number">15</span>,<span class="number">7</span>],</div><div class="line">   [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">   [<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>定義一個空的二維陣列，若 level = 第一層陣列的大小，則添加一個新的陣列進去。</p>
<p>若到達底部節點，就將值送入對應的陣列中。</p>
<p><img src="/leetcode-107/bfs2matrix.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrderBottom</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bfs</span><span class="params">(<span class="number">_</span> root: TreeNode?, level: Int)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> level &gt;= res.<span class="built_in">count</span> &#123;</div><div class="line">            res.insert([<span class="type">Int</span>](), at: <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        bfs(root!.<span class="keyword">left</span>, level: level + <span class="number">1</span>)</div><div class="line">        bfs(root!.<span class="keyword">right</span>, level: level + <span class="number">1</span>)</div><div class="line">        res[res.<span class="built_in">count</span> - level - <span class="number">1</span>].append(root!.val)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    bfs(root, level: <span class="number">0</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Breadth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Breadth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#594 Longest Harmonious Subsequence - in Swift]]></title>
      <url>/leetcode-594/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.</p>
<p>Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.</p>
<p>我們定義一個和諧陣列，該陣列的最大值及最小值只相差 1 。</p>
<p>現在給你一個普通陣列，從該陣列的子序列去找出該陣列中最長的和諧陣列。</p>
<blockquote>
<p>Note: The length of the input array will not exceed 20,000.<br>輸入的陣列長度不超過 20000 。</p>
</blockquote>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> longest harmonious subsequence <span class="keyword">is</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>].</div></pre></td></tr></table></figure></p>
<p>從 Input 的陣列中，有一個子序列符合和諧陣列，就是 [3,2,2,2,3]</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先將每個數字的 count 用 dictionary 記錄下來。<br>[1,3,2,2,5,2,3,7] -&gt; [1: 1, 2: 3, 3: 2, 5: 1, 7: 1]</p>
<p>接著再跑一次 dictionary ，只要有 count 可以被 key + 1 撈出，<br>就將 count 跟 secondCount 加在一起。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLHS</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>:<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        dict[num] = (dict[num] != <span class="literal">nil</span>) ? dict[num]! + <span class="number">1</span> : <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> (key, <span class="built_in">count</span>) <span class="keyword">in</span> dict &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> secondCount = dict[key + <span class="number">1</span>] &#123;</div><div class="line">            <span class="keyword">let</span> temp = <span class="built_in">count</span> + secondCount</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> temp &gt; res &#123;</div><div class="line">                res = temp</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#572 Subtree of Another Tree - in Swift]]></title>
      <url>/leetcode-572/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.</p>
<p>給兩個不為空的二元樹 s 和 t 。<br>驗證 t 是否相同於 s 的子樹，必須擁有相同的架構和值。<br>s 子樹由 s 組成，所以 s 也可以視作 s 子樹。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2><p>Given tree s:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">3</span></div><div class="line">   / \</div><div class="line">  <span class="number">4</span>   <span class="number">5</span></div><div class="line"> / \</div><div class="line"><span class="number">1</span>   <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>Given tree t:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">4</span></div><div class="line">    / \</div><div class="line">   <span class="number">1</span>   <span class="number">2</span></div><div class="line"></div><div class="line"><span class="type">Return</span> <span class="literal">true</span>, because t has the same structure and node values with a subtree of s.</div></pre></td></tr></table></figure></p>
<p>回傳 true ，因為 t 可以相同於 s 子樹。</p>
<h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2><p>Given tree s:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      <span class="number">3</span></div><div class="line">     / \</div><div class="line">    <span class="number">4</span>   <span class="number">5</span></div><div class="line">   / \</div><div class="line">  <span class="number">1</span>   <span class="number">2</span></div><div class="line"> /</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>Given tree t:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">4</span></div><div class="line">    / \</div><div class="line">   <span class="number">1</span>   <span class="number">2</span></div><div class="line"></div><div class="line"><span class="type">Return</span> <span class="literal">false</span>.</div></pre></td></tr></table></figure></p>
<p>回傳 false ，因為 t 並沒有相同於任何 s 子樹。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用 isSame 函式去判斷兩棵樹是否完全相等。</p>
<p>如果 s 為空 ， t 也應該為空。</p>
<p>如果皆不為空，兩個節點的值應該要相等，相等繼續往左右節點做 isSame 函式，不相等則回傳 false 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSame</span><span class="params">(<span class="number">_</span> s: TreeNode?, <span class="number">_</span> t: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> t == <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> s = s, <span class="keyword">let</span> t = t, s.val == t.val &#123;</div><div class="line">        <span class="keyword">return</span> isSame(s.<span class="keyword">left</span>,t.<span class="keyword">left</span>) &amp;&amp; isSame(s.<span class="keyword">right</span>,t.<span class="keyword">right</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了 isSame 函式，現在只要確認 s 子樹 是否有節點相等於 t 樹的根節點。<br>如果開頭相同，就可以執行 isSame 函式。</p>
<p>所以看到主函式，若 s 為空 ， t 也應該為空。<br>若 s 根節點相等於 t 根節點，確認 t 是否相等於 s 或 s左子樹 或 s右子樹。</p>
<p>若開頭不同，往下找有沒有其他 s 的節點為 t 的根節點。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubtree</span><span class="params">(<span class="number">_</span> s: TreeNode?, <span class="number">_</span> t: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> t == <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> s = s, <span class="keyword">let</span> t = t, s.val == t.val &#123;</div><div class="line">        <span class="keyword">return</span> isSame(s,t) || isSame(s.<span class="keyword">left</span>,t) || isSame(s.<span class="keyword">right</span>,t)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> isSubtree(s?.<span class="keyword">left</span>,t) || isSubtree(s?.<span class="keyword">right</span>,t)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#202 Happy Number - in Swift]]></title>
      <url>/leetcode-202/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write an algorithm to determine if a number is “happy”.</p>
<p>寫出一個演算法，判斷數字是否「開心」。</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>一個開心的數字需要有以下幾點組成，從一個正整數開始，將他每個數字的平方加總起來，覆蓋過去。</p>
<p>不斷重複操作，直到數字變為 1 ，或是進到無盡迴圈永遠不會變成 1 。</p>
<p>那些數字能變成 1 的，即為「開心的數字」。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example: 19 is a happy number</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>^<span class="number">2</span> + <span class="number">9</span>^<span class="number">2</span> = <span class="number">82</span></div><div class="line"><span class="number">8</span>^<span class="number">2</span> + <span class="number">2</span>^<span class="number">2</span> = <span class="number">68</span></div><div class="line"><span class="number">6</span>^<span class="number">2</span> + <span class="number">8</span>^<span class="number">2</span> = <span class="number">100</span></div><div class="line"><span class="number">1</span>^<span class="number">2</span> + <span class="number">0</span>^<span class="number">2</span> + <span class="number">0</span>^<span class="number">2</span> = <span class="number">1</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>首先先建立一個函式，將整數的每個數字拆開平方相加。<br>這個很簡單。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>, n = n</div><div class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)  &#123;</div><div class="line">        <span class="keyword">let</span> d = n % <span class="number">10</span></div><div class="line">        sum += d * d</div><div class="line">        </div><div class="line">        n /= <span class="number">10</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>將上面的函式帶入 while 迴圈就可以不斷地重複像範例一樣直到整數變為 1 。</p>
<p>但如果答案不為 happy number 怎麼辦。<br>有兩種解法：</p>
<ol>
<li><p>建立一個 hash table 記錄每一次新的整數，如果在迴圈時，又碰到一次剛剛記錄的整數，那就代表迴圈是無盡的，跳出迴圈。</p>
</li>
<li><p>利用 <a href="https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95" target="_blank" rel="external">Floyd Cycle Detection Algorithm</a> ，設計兩個不同速度的指針，只要指針在迴圈內再度相遇，那就代表這個迴圈中，存在著一個環，也是無盡的，在此跳出迴圈。</p>
</li>
</ol>
<p>以下是使用 Floyd 判圈演算法的解法 :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> slow = n, fast = n</div><div class="line">    </div><div class="line">    <span class="keyword">repeat</span> &#123;</div><div class="line">        slow = calculate(slow)</div><div class="line">        fast = calculate(fast)</div><div class="line">        fast = calculate(fast)</div><div class="line">    &#125; <span class="keyword">while</span> slow != fast</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> slow == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#405 Convert a Number to Hexadecimal - in Swift]]></title>
      <url>/leetcode-405/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.</p>
<p>給一整數，設計函式將他轉換為 16 進位。 如果是負數，需使用到二補數。</p>
<blockquote>
<p>Note:<br>All letters in hexadecimal (a-f) must be in lowercase.<br>The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character ‘0’; otherwise, the first character in the hexadecimal string will not be the zero character.<br>The given number is guaranteed to fit within the range of a 32-bit signed integer.<br>You must not use any method provided by the library which converts/formats the number to hex directly.</p>
<p>所有 16 進位的字元 (a-f) 皆須小寫。<br>16 進位的字元不可包含前綴 0 。<br>保證所有輸入的數字皆在 32-bit signed integer 的範圍。<br>你不可以使用語法內建的函式來作答。</p>
</blockquote>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">100</span></div><div class="line"><span class="type">Output</span>: <span class="number">64</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: -<span class="number">1</span></div><div class="line"><span class="type">Output</span>: ffffffff</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>每次迴圈取 Input 的二進位最後四個數字，並且找出他在 16 進位表的位置。</p>
<p>之後向右移位 4 位元，產生新的四個數字。</p>
<p>不斷重複，直到 Input 歸零。</p>
<p><img src="/leetcode-405/int2hex.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">map</span> = [<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">toHex</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">if</span> num == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="string">"0"</span> &#125;</div><div class="line">    <span class="keyword">var</span> num = num</div><div class="line">    <span class="keyword">var</span> res = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> num != <span class="number">0</span> &amp;&amp; i &lt; <span class="number">8</span> &#123;</div><div class="line">        res = <span class="built_in">map</span>[num &amp; <span class="number">15</span>] + res</div><div class="line">        num &gt;&gt;= <span class="number">4</span></div><div class="line">        i += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#121 Best Time to Buy and Sell Stock - in Swift]]></title>
      <url>/leetcode-121/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>有一個陣列，每一個元素代表每一天股票的價格。</p>
<p>如果你只被允許在這麼多天內只能交易一次 (買一賣一) ， 設計一個函式去找出最大的收益。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>]</div><div class="line"><span class="type">Output</span>: <span class="number">5</span></div><div class="line"></div><div class="line"><span class="built_in">max</span>. difference = <span class="number">6</span>-<span class="number">1</span> = <span class="number">5</span> (not <span class="number">7</span>-<span class="number">1</span> = <span class="number">6</span>, <span class="keyword">as</span> selling price needs to be larger than buying price)</div></pre></td></tr></table></figure></p>
<p>最大收益是在第二天買入 1 ，第五天賣出 6 ，收益為 5 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]</div><div class="line"><span class="type">Output</span>: <span class="number">0</span></div><div class="line"></div><div class="line"><span class="type">In</span> this <span class="keyword">case</span>, no transaction <span class="keyword">is</span> done, i.e. <span class="built_in">max</span> profit = <span class="number">0</span>.</div></pre></td></tr></table></figure></p>
<p>在這個案例裡，沒有任何交易可以賺到錢，收益為 0 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>這就像一個<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E5%88%97%E9%97%AE%E9%A2%98" target="_blank" rel="external">最大子數列問題</a>，可以利用Kadane算法解題。</p>
<p>這個算法的精髓，就是利用 <code>temp += prices[i] - prices[i - 1]</code> 來找出最大和。</p>
<p>但是因為我們不會去行使賠錢的交易，所以當算出來的值為 <code>負數</code> ，就帶 0 算下去。</p>
<p><img src="/leetcode-121/kadane.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(<span class="number">_</span> prices: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> prices.isEmpty &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> temp = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;prices.<span class="built_in">count</span> &#123;</div><div class="line">        temp += prices[i] - prices[i - <span class="number">1</span>]</div><div class="line">        temp = <span class="built_in">max</span>(<span class="number">0</span>, temp)</div><div class="line">        res = <span class="built_in">max</span>(res, temp)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Dynamic Programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#415 Add Strings - in Swift]]></title>
      <url>/leetcode-415/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.</p>
<p>給兩個非負數的 Integer num1 和 num2 但以 String 呈現，返回兩數加總。</p>
<blockquote>
<p>Note:<br>The length of both num1 and num2 is &lt; 5100.<br>Both num1 and num2 contains only digits 0-9.<br>Both num1 and num2 does not contain any leading zero.<br>You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>
</blockquote>
<p>num1 和 num2 的長度 &lt; 5100。<br>num1 和 num2 字串中只包含 0-9。<br>num1 和 num2 不會包含前綴的 0。<br>不可以使用內建的 BigInteger 函數，或者將 String 直接轉為 Integer 操作。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將兩數轉為 UnicodeScalar ，並且從尾巴開始算起。</p>
<p>將數字減去 0 的 UnicodeScalar ，就可以得到該數字位於 0-9 的值。</p>
<p>再來就是利用 carry 來算出 10 進位結果即可。</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addStrings</span><span class="params">(<span class="number">_</span> num1: String, <span class="number">_</span> num2: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> arr1:[<span class="type">UnicodeScalar</span>] = num1.unicodeScalars.reversed()</div><div class="line">    <span class="keyword">var</span> arr2:[<span class="type">UnicodeScalar</span>] = num2.unicodeScalars.reversed()</div><div class="line">    <span class="keyword">var</span> res = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> carry = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> index &lt; arr1.<span class="built_in">count</span> || index &lt; arr2.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">var</span> n1 = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> n2 = <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> index &lt; arr1.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">let</span> ch1 = arr1[index];</div><div class="line">            n1 = <span class="type">Int</span>(ch1.value) - <span class="type">Int</span>(<span class="string">"0"</span>.unicodeScalars.first!.value)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> index &lt; arr2.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">let</span> ch2 = arr2[index];</div><div class="line">            n2 = <span class="type">Int</span>(ch2.value) - <span class="type">Int</span>(<span class="string">"0"</span>.unicodeScalars.first!.value)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> sum = n1 + n2 + carry</div><div class="line">        res = <span class="type">String</span>(sum % <span class="number">10</span>) + res</div><div class="line">        carry = sum / <span class="number">10</span></div><div class="line">        index += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</div><div class="line">        res = <span class="type">String</span>(carry) + res</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>將兩數都轉為字串陣列，做迴圈直到最長的數字結束。</p>
<p>迴圈從兩個數的尾端將每圈的兩數加總，超過 9 就進位，沒超過就加在答案的前面。</p>
<p>最後查看有無多餘的 carry ，有一樣加在答案前面。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addStrings</span><span class="params">(<span class="number">_</span> num1: String, <span class="number">_</span> num2: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> arr1 = <span class="type">Array</span>(num1.characters)</div><div class="line">    <span class="keyword">let</span> arr2 = <span class="type">Array</span>(num2.characters)</div><div class="line">    <span class="keyword">var</span> carry = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> res = <span class="string">""</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">max</span>(arr1.<span class="built_in">count</span>, arr2.<span class="built_in">count</span>)&#123;</div><div class="line">        <span class="keyword">if</span> arr1.<span class="built_in">count</span> - i - <span class="number">1</span> &gt;= <span class="number">0</span> &#123;</div><div class="line">            carry += <span class="type">Int</span>(<span class="type">String</span>(arr1[arr1.<span class="built_in">count</span> - i - <span class="number">1</span>]))!</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> arr2.<span class="built_in">count</span> - i - <span class="number">1</span> &gt;= <span class="number">0</span> &#123;</div><div class="line">            carry += <span class="type">Int</span>(<span class="type">String</span>(arr2[arr2.<span class="built_in">count</span> - i - <span class="number">1</span>]))!</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> carry &gt; <span class="number">9</span> &#123;</div><div class="line">            res = <span class="type">String</span>(carry-<span class="number">10</span>) + res</div><div class="line">            carry = <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res = <span class="type">String</span>(carry) + res</div><div class="line">            carry = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</div><div class="line">        res = <span class="type">String</span>(carry) + res</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : <span class="string">"87"</span> , <span class="string">"85"</span></div><div class="line"></div><div class="line">res = <span class="string">""</span></div><div class="line"></div><div class="line">--- <span class="type">Loop</span> <span class="type">Begin</span> --- </div><div class="line">&#123;</div><div class="line">	carry += <span class="number">7</span></div><div class="line">	carry += <span class="number">5</span></div><div class="line"></div><div class="line">	<span class="comment">// carry = 13</span></div><div class="line"></div><div class="line">	carry &gt; <span class="number">9</span> &#123;</div><div class="line">		res = <span class="string">"13 - 10"</span> + <span class="string">""</span> = <span class="string">"3"</span></div><div class="line">		carry = <span class="number">1</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	---</div><div class="line"></div><div class="line">	carry += <span class="number">8</span></div><div class="line">	carry += <span class="number">8</span></div><div class="line"></div><div class="line">	<span class="comment">// carry = 17</span></div><div class="line"></div><div class="line">	carry &gt; <span class="number">9</span> &#123;</div><div class="line">		res = <span class="string">"17 - 10"</span> + <span class="string">"3"</span> = <span class="string">"73"</span></div><div class="line">		carry = <span class="number">1</span></div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line">--- <span class="type">Loop</span> <span class="type">End</span> ---</div><div class="line"></div><div class="line">carry &gt; <span class="number">0</span> &#123;</div><div class="line">	res = <span class="string">"1"</span> + <span class="string">"73"</span> = <span class="string">"173"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">Output</span> : <span class="string">"173"</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#108 Convert Sorted Array to Binary Search Tree - in Swift]]></title>
      <url>/leetcode-108/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>給定一個升序陣列，把它轉換成高度平衡的二元搜尋樹。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span> :</div><div class="line"></div><div class="line">        <span class="number">3</span></div><div class="line">      /   \</div><div class="line">     <span class="number">2</span>	   <span class="number">5</span></div><div class="line">    /	  /</div><div class="line">   <span class="number">1</span>	 <span class="number">4</span></div></pre></td></tr></table></figure>
<p>必須要轉換成高度平衡的二元搜尋樹。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先取得陣列中間值作為根節點。</p>
<p>再將陣列切為小於根節點的一半，與大於根節點的另一半。</p>
<p>再從這兩個陣列重新遞迴一遍剛剛的步驟，就可以得到高度平衡的 BST 。</p>
<p><img src="/leetcode-108/array2bst.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedArrayToBST</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">TreeNode</span>? &#123;</div><div class="line">    <span class="keyword">if</span> nums.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> mid = nums[nums.<span class="built_in">count</span>/<span class="number">2</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> tree = <span class="type">TreeNode</span>(mid)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> leftnums = <span class="type">Array</span>(nums[<span class="number">0</span>..&lt;nums.<span class="built_in">count</span>/<span class="number">2</span>])</div><div class="line">    <span class="keyword">let</span> rightnums = <span class="type">Array</span>(nums[nums.<span class="built_in">count</span>/<span class="number">2</span> + <span class="number">1</span>..&lt;nums.<span class="built_in">count</span>])</div><div class="line">    </div><div class="line">    tree.<span class="keyword">left</span> = sortedArrayToBST(leftnums)</div><div class="line">    tree.<span class="keyword">right</span> = sortedArrayToBST(rightnums)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> tree</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Depth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#671 Second Minimum Node In a Binary Tree - in Swift]]></title>
      <url>/leetcode-671/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes.</p>
<p>給一個特殊不為空的二元樹且不包含任何負數值，每個節點在這個樹中皆擁有「兩個」或「零個」子節點。</p>
<p>如果該節點有兩個子節點，那該節點的值會小於等於他的兩個子節點中間。</p>
<p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes’ value in the whole tree.</p>
<p>這樣的二元樹，你需要從全部的節點找出，並輸出他的第二最小值。</p>
<p>If no such second minimum value exists, output -1 instead.</p>
<p>如果沒有第二最小值，輸出 -1 。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">2</span></div><div class="line">      / \</div><div class="line">     <span class="number">2</span>   <span class="number">5</span></div><div class="line">    / \</div><div class="line">   <span class="number">5</span>   <span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">5</span></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> smallest value <span class="keyword">is</span> <span class="number">2</span>, the second smallest value <span class="keyword">is</span> <span class="number">5</span>.</div></pre></td></tr></table></figure></p>
<p>最小值是 2 ， 第二最小值是 5 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">2</span></div><div class="line">      / \</div><div class="line">     <span class="number">2</span>   <span class="number">2</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: -<span class="number">1</span></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> smallest value <span class="keyword">is</span> <span class="number">2</span>, but there isn't any second smallest value.</div></pre></td></tr></table></figure></p>
<p>最小值是 2 ， 但找不到第二最小值，所以輸出 -1 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>因為每個節點的值會小於等於他的兩個子節點中間的關係，根節點一定會是最小的值，所以第二小的值絕對不會跟根節點相同數字。</p>
<p>知道這個後，用 DFS 找出每個節點不等於根節點的最小值就是答案。</p>
<p><img src="/leetcode-671/special_tree.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSecondMinimumValue</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = -<span class="number">1</span></div><div class="line">    <span class="keyword">var</span> k = root?.val</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(<span class="number">_</span> node: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> node.val != k &#123;</div><div class="line">            <span class="keyword">if</span> res == -<span class="number">1</span> &#123;</div><div class="line">                res = node.val</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                res = <span class="built_in">min</span>(res, node.val)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(node.<span class="keyword">left</span>)</div><div class="line">        dfs(node.<span class="keyword">right</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    dfs(root)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#541 Reverse String II - in Swift]]></title>
      <url>/leetcode-541/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.</p>
<p>給予一個字串和一個整數 k ，你需要在每個 2k 就翻轉 k 個字元。</p>
<p>如果剩下的字元少於 k 個，就翻轉全部。</p>
<p>如果少於 2k 但是大於等於 k ，便翻轉 k 個字元，然後不動到剩下的字元。</p>
<p>Restrictions:<br>The string consists of lower English letters only.<br>Length of the given string and k will in the range [1, 10000]</p>
<blockquote>
<p>注意:<br>字串只會包含英文字。<br>k 的範圍在 [1, 10000] 。</p>
</blockquote>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: s = <span class="string">"abcdefg"</span>, k = <span class="number">2</span></div><div class="line"><span class="type">Output</span>: <span class="string">"bacdfeg"</span></div></pre></td></tr></table></figure>
<p>s 有 7 個字元， k 為 2 。</p>
<p>所以需要翻轉 1, 2 個字元，跳過 2 個，再翻轉 5, 6 字元。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將 String 變為 Array ，利用 stride 跳過 2k 的字元。</p>
<p>當遇到字元時，找出 i 到 j(i + k) 的字元，</p>
<p>j 可能會造成 Array Index Out Of Range ，所以 j 應該取 (i + k) 或 (s.count) 的最小值。</p>
<p>接著就對 i 到 j 實施 reverse 即可。</p>
<p><img src="/leetcode-541/reversek.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseStr</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> s = <span class="type">Array</span>(s.characters)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: s.<span class="built_in">count</span>, by: <span class="number">2</span>*k)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> i = i</div><div class="line">        <span class="keyword">var</span> j = <span class="built_in">min</span>(i + k - <span class="number">1</span>, s.<span class="built_in">count</span> - <span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> i &lt; j &#123;</div><div class="line">            <span class="keyword">let</span> temp = s[i]</div><div class="line">            s[i] = s[j]</div><div class="line">            s[j] = temp</div><div class="line">            </div><div class="line">            i += <span class="number">1</span></div><div class="line">            j -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#551 Student Attendance Record I - in Swift]]></title>
      <url>/leetcode-551/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are given a string representing an attendance record for a student. The record only contains the following three characters:</p>
<p>‘A’ : Absent.<br>‘L’ : Late.<br>‘P’ : Present.</p>
<p>給定一字串代表某位學生的出席紀錄。 字串中只會包含三種字元:<br>‘A’ : 缺席<br>‘L’ : 遲到<br>‘P’ : 出席</p>
<p>A student could be rewarded if his attendance record doesn’t contain more than one ‘A’ (absent) or more than two continuous ‘L’ (late).</p>
<p>只要學生沒有超過一個「 A (缺席) 」，或是沒有「連續」超過兩個「 L (遲到) 」，就可以得到獎勵。</p>
<p>You need to return whether the student could be rewarded according to his attendance record.</p>
<p>請設計函式，回傳學生是否有因為出席紀錄而獲得獎勵。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"PPALLP"</span></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div></pre></td></tr></table></figure></p>
<p>A 沒有超過 1 個， L 也沒有超過 2 個，所以是可以獲得獎勵的。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"PPALLL"</span></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>A 沒有超過 1 個，但 L 超過連續 2 個了，所以不可以獲得獎勵。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>找出字串中，A 出現次數有沒有大於 1 次，以及有沒有連續出現三個 L ，就可以得知是否獲得獎勵。</p>
<p><img src="/leetcode-551/attendance.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkRecord</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="literal">false</span></div><div class="line">    <span class="keyword">let</span> countA = <span class="type">Array</span>(s.characters).<span class="built_in">filter</span> &#123; $<span class="number">0</span> == <span class="string">"A"</span> &#125;.<span class="built_in">count</span></div><div class="line">    <span class="keyword">if</span> !s.<span class="built_in">contains</span>(<span class="string">"LLL"</span>) &amp;&amp; countA &lt;= <span class="number">1</span> &#123;</div><div class="line">        res = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#543 Diameter of Binary Tree - in Swift]]></title>
      <url>/leetcode-543/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>
<p>給定二元樹，計算出樹的直徑為多少。 </p>
<p>二元樹當中任意兩點的路徑若為最長，就代表該樹的直徑。</p>
<p>這條直徑有可能會經過根節點，有可能不會。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given a binary tree<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">       <span class="number">1</span></div><div class="line">      / \</div><div class="line">     <span class="number">2</span>   <span class="number">3</span></div><div class="line">    / \</div><div class="line">   <span class="number">4</span>   <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">Return</span> <span class="number">3</span>, which <span class="keyword">is</span> the length of the path [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>] or [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>].</div></pre></td></tr></table></figure></p>
<p>直徑為 3 ，因為最長路徑為 [4,2,1,3] 或 [5,2,1,3] 。</p>
<p>Path does not pass root<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">            <span class="number">1</span></div><div class="line">           / \</div><div class="line">          <span class="number">2</span>   <span class="number">3</span></div><div class="line">         / \</div><div class="line">        <span class="number">4</span>   <span class="number">5</span></div><div class="line">       /     \</div><div class="line">      <span class="number">6</span>       <span class="number">7</span></div><div class="line">     / \       \</div><div class="line">    <span class="number">8</span>   <span class="number">10</span>      <span class="number">9</span></div><div class="line">         \</div><div class="line">         <span class="number">11</span></div><div class="line"></div><div class="line"><span class="type">Return</span> <span class="number">7</span>, which <span class="keyword">is</span> the length of the path [<span class="number">11</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</div></pre></td></tr></table></figure></p>
<p>直徑為 7 ，因為最長路徑為 [11,10,6,4,2,5,7,9] 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>每個節點的直徑，就等於左子樹的深度 + 右子樹的深度。</p>
<p><img src="/leetcode-543/diameter.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">diameterOfBinaryTree</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> depth = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDepth</span><span class="params">(root : TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> <span class="keyword">left</span> = getDepth(root: root?.<span class="keyword">left</span>)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">right</span> = getDepth(root: root?.<span class="keyword">right</span>)</div><div class="line">        </div><div class="line">        depth = <span class="built_in">max</span>(depth, <span class="keyword">left</span> + <span class="keyword">right</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="keyword">left</span> , <span class="keyword">right</span>) + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    getDepth(root: root)</div><div class="line">    <span class="keyword">return</span> depth</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#268 Missing Number - in Swift]]></title>
      <url>/leetcode-268/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<p>給定 n 個不同的數字，從 0, 1, 2, … , n ， 找出其中消失的數字。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given nums = [0, 1, 3] return 2.</p>
<p>[0, 1, 3] 當中發現 2 消失了。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="SUM-解法"><a href="#SUM-解法" class="headerlink" title="SUM 解法"></a>SUM 解法</h2><p>如果把原來的陣列相加，跟完整的陣列相加。完整減掉題目原來的就應該得到消失的數字。<br>題目 : 0 + 1 + 3 = 4<br>完整 : 0 + 1 + 2 + 3 = 6</p>
<p>迴圈內應該長成這樣 ：<br>0 + 0 - 0 + 1 - 1 + 2 - 3 = -1</p>
<p>因為加不到最後的數字，所以應該在最後加上 (-1) + 3 = 2</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        sum += i</div><div class="line">        sum -= nums[i]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum + nums.<span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="XOR-解法"><a href="#XOR-解法" class="headerlink" title="XOR 解法"></a>XOR 解法</h2><p>我們都知道 a^b^b 會等於 a</p>
<p>所以如果陣列為 0 , 1 , 3<br>跑過迴圈會變成 :</p>
<p><font style="color: red">3</font> ^ <font style="color: blue">0</font> ^ <font style="color: blue">0</font> ^ <font style="color: green">1</font> ^ <font style="color: green">1</font> ^ 2 ^ <font style="color: red">3</font> = 2</p>
<p>就可以輕鬆地知道 2 是消失的數字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = nums.<span class="built_in">count</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        res ^= i</div><div class="line">        res ^= nums[i]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Math </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#504 Base 7 - in Swift]]></title>
      <url>/leetcode-504/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer, return its base 7 string representation.</p>
<p>將數字從 10 進位轉為 7 進位。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">100</span></div><div class="line"><span class="type">Output</span>: <span class="string">"202"</span></div></pre></td></tr></table></figure>
<p>100 在七進位為 202</p>
<p>Example 2:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: -<span class="number">7</span></div><div class="line"><span class="type">Output</span>: <span class="string">"-10"</span></div></pre></td></tr></table></figure>
<p>-7 在七進位為 -10</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用 swift 內建的基數函式。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToBase7</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(num, radix: <span class="number">7</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#350 Intersection of Two Arrays II - in Swift]]></title>
      <url>/leetcode-350/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two arrays, write a function to compute their intersection.</p>
<p>給定兩個陣列，求出他們的交集 (intersection)</p>
<p>跟上一題 <a href="https://windsuzu.github.io/leetcode-349/">Intersection of Two Arrays</a> 相似，但這題需要保留重複的元素。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>
<p>[1, 2, 2, 1] 跟 [2, 2] 的交集為 [2, 2]</p>
<blockquote>
<p>Note:<br>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>出現重複的元素也要返回。<br>答案可以任意排列。</p>
</blockquote>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>不想用 map 做，用 Two Pointer 將兩個陣列都排序由小到大。<br>同時指向第一個陣列跟第二個陣列的第一個元素(以下稱 i 跟 j)，只要相同就往後。</p>
<p>當 i 大於 j ，表示 j 不可能相交 i 陣列的其他元素，所以 j ++<br>當 j 大於 i ，表示 i 不可能相交 j 陣列的其他元素，所以 i ++</p>
<p><img src="/leetcode-350/intersect.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> nums1 = nums1.sorted()</div><div class="line">    <span class="keyword">var</span> nums2 = nums2.sorted()</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> i &lt; nums1.<span class="built_in">count</span> &amp;&amp; j &lt; nums2.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums1[i] == nums2[j] &#123;</div><div class="line">            res.append(nums1[i])</div><div class="line">            i += <span class="number">1</span> ; j += <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums1[i] &lt; nums2[j] &#123;</div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            j += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
            <category> Two Pointers </category>
            
            <category> Binary Search </category>
            
            <category> Sort </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#401 Binary Watch - in Swift]]></title>
      <url>/leetcode-401/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).</p>
<p>Each LED represents a zero or one, with the least significant bit on the right.</p>
<p>一個二元錶有四個 LEDs 在上，代表 24 個小時，還有六個 LEDs 在下，代表 60 分鐘。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg" alt="binary watch"><br>For example, the above binary watch reads “3:25”.</p>
<p>Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>
<p>像上面就是一個二元錶，代表 3:25 。</p>
<p>設計一個函式，放進 n 表示有幾顆 LED 燈亮著，回傳所有有可能的時間。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: n = <span class="number">1</span></div><div class="line"><span class="type">Return</span>: [<span class="string">"1:00"</span>, <span class="string">"2:00"</span>, <span class="string">"4:00"</span>, <span class="string">"8:00"</span>, <span class="string">"0:01"</span>, <span class="string">"0:02"</span>, <span class="string">"0:04"</span>, <span class="string">"0:08"</span>, <span class="string">"0:16"</span>, <span class="string">"0:32"</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>注意<br>小時的格式，不可有前綴的 0 ，舉例 : “1:00” 是對的 , “01:00” 是錯的。<br>分鐘的格式，必須有前綴的 0 ，舉例 : “10:01” 是對的 , “10:1” 是錯的。</p>
</blockquote>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>可不可以找出每一個時間，個別代表有幾個燈號，答案是可以的。<br>如果是 <code>0:00</code> 代表有 0 顆燈亮著。<br><code>1:00</code> 、 <code>0:04</code> 、 <code>0:16</code> ，代表有 1 顆燈亮著。<br><code>11:59</code> 代表有 8 顆燈 (3 + 5) 亮著。 為什麼？</p>
<p>只要看二進位就知道 1 -&gt; 1 ， 2 -&gt; 10 ， 4 -&gt; 100 ， 8 -&gt; 1000 ， 16 -&gt; 10000 ， 32 -&gt; 100000</p>
<p>所以如果把 11 跟 59 都轉成二進位會變成 01011 跟 0111011 。<br>就可以知道，<br>11 亮了 1, 2, 8 的燈。<br>59 亮了 1, 2, 8, 16, 32 的燈。</p>
<p>知道了這個，現在只要找出全部的時間，符合燈號跟設定要找的一致，就可以放進答案中。</p>
<p><img src="/leetcode-401/binary_watch.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readBinaryWatch</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">String</span>]()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findLEDs</span><span class="params">(<span class="number">_</span> h: Int, <span class="number">_</span> m: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">let</span> hc = <span class="type">Array</span>(<span class="type">String</span>(h, radix: <span class="number">2</span>).characters).<span class="built_in">filter</span> &#123; $<span class="number">0</span> == <span class="string">"1"</span> &#125;.<span class="built_in">count</span></div><div class="line">        <span class="keyword">let</span> mc = <span class="type">Array</span>(<span class="type">String</span>(m, radix: <span class="number">2</span>).characters).<span class="built_in">filter</span> &#123; $<span class="number">0</span> == <span class="string">"1"</span> &#125;.<span class="built_in">count</span></div><div class="line">        <span class="keyword">return</span> hc + mc</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="number">0</span>...<span class="number">11</span> &#123;</div><div class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="number">0</span>...<span class="number">59</span> &#123;</div><div class="line">            <span class="keyword">if</span> findLEDs(h, m) == num &#123;</div><div class="line">                res.append(<span class="type">String</span>(format: <span class="string">"%d:%02d"</span>, h, m))</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Backtracking </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Bit Manipulation </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#447 Number of Boomerangs - in Swift]]></title>
      <url>/leetcode-447/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given n points in the plane that are all pairwise distinct, a “boomerang” is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).</p>
<p>Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).</p>
<p>在一個平面上給定 n 個點，每個點皆位於不同位置。 </p>
<p>一個迴力鏢代表一組點 (i, j, k) 他們三個的位置， i 到 j 的距離等於 i 到 k 的距離。</p>
<p>找出平面上的點，總共有多少個迴力鏢。</p>
<p>你可以假設平面上的點最多 500 個，並且座標皆介於範圍 [-10000, 10000] 間。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">0</span>]]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">The</span> two boomerangs are [[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">0</span>]] and [[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>]]</div></pre></td></tr></table></figure>
<p>有點 (0,0), (1,0), (2,0) ，分別可以找到一個迴力鏢是 (1,0) , (0,0) , (2,0) ，<br>另一個是 (1,0) , (2,0) , (0,0) 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>若有點 a, b, c 其中 a 與 b, c 距離相等。那就有兩種迴力鏢 bac , cab 。<br>若有點 a, b, c, d 其中 a 與 b, c, d 距離相等。那就有六種迴力鏢 bac, cab, bad, dab, cad, dac 。<br>也就是 a 有幾個相等距離的鄰點，就會有 <code>鄰點 * (鄰點 - 1)</code> 個迴力鏢。</p>
<p>所以用 dictionary 記錄每次的點有幾個鄰點的距離是相等的，<br>再算出相同距離情況下的鄰點，在公式 <code>鄰點 * (鄰點 - 1)</code> 下會有幾個迴力鏢。</p>
<p><img src="/leetcode-447/boomerages.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfBoomerangs</span><span class="params">(<span class="number">_</span> points: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDistance</span><span class="params">(<span class="number">_</span> a: [Int], <span class="number">_</span> b: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> (a[<span class="number">0</span>] - b[<span class="number">0</span>]) * (a[<span class="number">0</span>] - b[<span class="number">0</span>]) + (a[<span class="number">1</span>] - b[<span class="number">1</span>]) * (a[<span class="number">1</span>] - b[<span class="number">1</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> <span class="built_in">map</span> = [<span class="type">Int</span> : <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;points.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;points.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> i == j &#123; <span class="keyword">continue</span> &#125;</div><div class="line">            <span class="keyword">let</span> <span class="built_in">distance</span> = getDistance(points[i], points[j])</div><div class="line">            <span class="built_in">map</span>[<span class="built_in">distance</span>] = (<span class="built_in">map</span>[<span class="built_in">distance</span>] ?? <span class="number">0</span> ) + <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> <span class="built_in">map</span>.values &#123;</div><div class="line">            res += val * (val - <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">map</span>.removeAll()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#628 Maximum Product of Three Numbers - in Swift]]></title>
      <url>/leetcode-628/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p>
<p>給一個整數陣列，找出三個數字他們相乘會是最大的數字。</p>
<p>Note:</p>
<ol>
<li>The length of the given array will be in range [3,10^4] and all elements are in the range [-1000, 1000].</li>
<li>Multiplication of any three numbers in the input won’t exceed the range of 32-bit signed integer.</li>
</ol>
<p>整數陣列的範圍為 [3, 10^4] ，然後所有元素的值的範圍為 [-1000, 1000] 。<br>算出來的乘積答案不會超過 32 位元正負號整數。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="type">Output</span>: <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>剛好陣列只有三個數字，最大乘積即是 6 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="type">Output</span>: <span class="number">24</span></div></pre></td></tr></table></figure></p>
<p>陣列中最大的乘積是 <code>2 * 3 * 4</code> = 24</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>一開始想到一個直觀又懶的解法，直接把陣列先重新排序，<br>然後抓最大的三個數字就可以得到最大乘積。</p>
<p>但是事情沒有那麼單純，題目規定數字範圍在 -1000 到 1000 當中，<br>也就是如果最小的兩個數字的絕對值比第二、第三大，那在相乘最大數字，就會得到更大的乘積。</p>
<p>所以必須要找出兩種可能，並且比較誰比較大，即是答案。</p>
<p><img src="/leetcode-628/maxproduct.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> nums = nums.sorted(by: &gt;)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[<span class="number">2</span>],</div><div class="line">               nums[<span class="number">0</span>] * nums[nums.<span class="built_in">count</span> - <span class="number">1</span>] * nums[nums.<span class="built_in">count</span> - <span class="number">2</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#409 Longest Palindrome - in Swift]]></title>
      <url>/leetcode-409/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>
<p>給一個字串包含大小寫文字，找出裡面文字能拼成最長的回文有多長。</p>
<p>請注意大小寫的區別， “Aa” 不包含在回文裡面。</p>
<p>Example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line"><span class="string">"abccccdd"</span></div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line"><span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">One</span> longest palindrome that can be built <span class="keyword">is</span> <span class="string">"dccaccd"</span>, whose length <span class="keyword">is</span> <span class="number">7</span>.</div></pre></td></tr></table></figure>
<p>“abccccdd” 最長的回文可以拼成 “dccaccd”，長度為 7 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>可以發現不管文字有多少，只要相同的字出現兩次，回文最長長度就會 + 2 。</p>
<p>如果分完所有的兩次，還有剩下任意一個單字，就可以把它加進回文中，最長長度 + 1 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"aa"</span> -&gt; <span class="number">2</span></div><div class="line"><span class="string">"aab"</span> -&gt; <span class="number">3</span></div><div class="line"></div><div class="line"><span class="string">"aabb"</span> -&gt; <span class="number">4</span></div><div class="line"><span class="string">"aabbc"</span> -&gt; <span class="number">5</span></div><div class="line"><span class="string">"aabbcd"</span> -&gt; <span class="number">5</span></div></pre></td></tr></table></figure>
<p><img src="/leetcode-409/palindromes.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Character</span> : <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s.characters &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">var</span> i = dict[<span class="built_in">c</span>] &#123;</div><div class="line">            i += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i == <span class="number">2</span> &#123;</div><div class="line">                res += <span class="number">2</span></div><div class="line">                i = <span class="number">0</span></div><div class="line">            &#125;</div><div class="line">            dict[<span class="built_in">c</span>] = i</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dict[<span class="built_in">c</span>] = <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> dict.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123;$<span class="number">0.1</span> &gt; <span class="number">0</span> &#125;) &#123;</div><div class="line">        res += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#206 Reverse Linked List - in Swift]]></title>
      <url>/leetcode-206/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Reverse a singly linked list.</p>
<p>反轉連結串列。</p>
<p><img src="/leetcode-206/intro.png" alt="intro" style="width:400px;"></p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>使用遞迴讀取每一組 ListNode ，將 Node 不斷往後推。</p>
<p>也就是把前一次讀取的 ListNode 變為下一次讀取時的 Next 。</p>
<p><img src="/leetcode-206/reverse.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> val = head?.val <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> res = <span class="type">ListNode</span>(val)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = head <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> newNode = <span class="type">ListNode</span>(node.val)</div><div class="line">        newNode.next = res</div><div class="line">        res = newNode</div><div class="line">        </div><div class="line">        <span class="built_in">reverse</span>(node.next)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">reverse</span>(head?.next)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Linked List </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Linked List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#217 Contains Duplicate - in Swift]]></title>
      <url>/leetcode-217/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>
<p>給一組整數陣列，找出陣列是否包含重複的數字。</p>
<p>如果有重複，則回傳 true ，如果每一個整數都只出現一次，回傳 false 。</p>
<p>Example :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="type">Output</span> : <span class="literal">false</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="type">Input</span> : [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line"><span class="type">Output</span> : <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>Swift 的 Set 類別會自動挑選掉重複的整數。</p>
<p>只要將原本的 Array 跟轉為 Set 後比較他們的長度，就可以知道有沒有重複。</p>
<p><img src="/leetcode-217/set.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Set</span>(nums).<span class="built_in">count</span> != nums.<span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#13 Roman to Integer - in Swift]]></title>
      <url>/leetcode-13/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<p>將羅馬文字的數字轉換為一般數字。</p>
<p>範圍是 1 到 3999 。</p>
<blockquote>
<p> 題目敘述就只有這樣，好爛，所以找了一下羅馬數字圖表。<br> <a href="http://literacy.kent.edu/Minigrants/Cinci/romanchart.htm" target="_blank" rel="external">http://literacy.kent.edu/Minigrants/Cinci/romanchart.htm</a></p>
</blockquote>
<p>簡單來說 : </p>
<ul>
<li>I 代表 1</li>
<li>V 代表 5 </li>
<li>X 代表 10 </li>
<li>L 代表 50 </li>
<li>C 代表 100 </li>
<li>D 代表 500 </li>
<li>M 代表 1000</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="type">I</span> -&gt; <span class="number">1</span></div><div class="line"><span class="type">II</span> -&gt; <span class="number">2</span></div><div class="line"><span class="type">III</span> -&gt; <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment">// 但這種會比較特殊</span></div><div class="line"><span class="type">IV</span> -&gt; <span class="number">4</span></div><div class="line"><span class="comment">// 當小數字在大數字的前面時，變成大數字減小數字</span></div><div class="line"></div><div class="line"><span class="comment">// 繼續下去</span></div><div class="line"><span class="type">V</span> -&gt; <span class="number">5</span></div><div class="line"><span class="type">VI</span> -&gt; <span class="number">6</span></div><div class="line"><span class="type">VII</span> -&gt; <span class="number">7</span></div><div class="line"><span class="type">VIII</span> -&gt; <span class="number">8</span></div><div class="line"></div><div class="line"><span class="comment">// 又遇到一個，所以是 10 - 1</span></div><div class="line"><span class="type">IX</span> -&gt; <span class="number">9</span></div><div class="line"></div><div class="line"><span class="comment">// 繼續下去</span></div><div class="line"><span class="type">X</span> -&gt; <span class="number">10</span></div><div class="line"><span class="type">XI</span> -&gt; <span class="number">11</span></div><div class="line"><span class="type">XII</span> -&gt; <span class="number">12</span></div><div class="line"><span class="type">XIII</span> -&gt; <span class="number">13</span></div><div class="line"></div><div class="line"><span class="comment">// 特殊規則串插在中間</span></div><div class="line"><span class="type">XIV</span> -&gt; <span class="number">14</span></div><div class="line"></div><div class="line"><span class="comment">// Move on ...</span></div><div class="line"><span class="type">XV</span> -&gt; <span class="number">15</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先將一般規則記錄在字典中。</p>
<p>接著開始讀每一個羅馬數字，如果是正常的 「I」、「II」、「VIII」、「XII」，<br>就單純的將數字往上加上去。</p>
<p>但若是遇到前一個字母小於，之後的字母，例如 「IV」、「IX」、「XIX」中的「IX」，<br>就必須要有新的規則。<br>這時候再看到 「XL」 是 10 跟 50 ，結果卻變成 40 。<br>我們發現原來這種數字是要，後面的數字 - 前面的數字。</p>
<p>但因為是尋遍每個字母，尋到後面的字母時，需要把剛剛已經加進去的數字算進去，<br>所以要減去兩倍的前一個數字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">答案 = <span class="number">0</span></div><div class="line"></div><div class="line">例如 <span class="type">XLIX</span> -&gt;</div><div class="line"></div><div class="line"><span class="type">X</span> -&gt; 答案 = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">// L 符合規則二 (L &gt; X)</span></div><div class="line"><span class="type">L</span> -&gt; 答案 = <span class="number">10</span> + (<span class="number">50</span> - <span class="number">2</span>*<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="type">I</span> -&gt; 答案 = <span class="number">10</span> + <span class="number">30</span> + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">// X 符合規則二 (X &gt; I)</span></div><div class="line"><span class="type">X</span> -&gt; 答案 = <span class="number">10</span> + <span class="number">30</span> + <span class="number">1</span> + (<span class="number">10</span> - <span class="number">2</span>*<span class="number">1</span>)</div><div class="line">  </div><div class="line">  -&gt; 答案 = <span class="number">10</span> + <span class="number">30</span> + <span class="number">1</span> + <span class="number">8</span> = <span class="number">49</span></div></pre></td></tr></table></figure>
<p><img src="/leetcode-13/roman.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> dict: [<span class="type">Character</span> : <span class="type">Int</span>] =</div><div class="line">        [<span class="string">"I"</span> : <span class="number">1</span>, <span class="string">"V"</span> : <span class="number">5</span>, <span class="string">"X"</span> : <span class="number">10</span>, <span class="string">"L"</span> : <span class="number">50</span>, <span class="string">"C"</span> : <span class="number">100</span>, <span class="string">"D"</span> : <span class="number">500</span>, <span class="string">"M"</span> : <span class="number">1000</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> sArr = <span class="type">Array</span>(s.characters)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;sArr.<span class="built_in">count</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> , dict[sArr[i]]! &gt; dict[sArr[i - <span class="number">1</span>]]! &#123;</div><div class="line">            res += dict[sArr[i]]! - (<span class="number">2</span> * dict[sArr[i - <span class="number">1</span>]]!)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res += dict[sArr[i]]!</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#242 Valid Anagram]]></title>
      <url>/leetcode-242/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<p>有兩個字串 s 跟 t ，寫個函式來驗證 t 是否為 s 重新建構出來的字串。</p>
<p>For example :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"anagram"</span>, t = <span class="string">"nagaram"</span>, <span class="keyword">return</span> <span class="literal">true</span>.</div><div class="line">s = <span class="string">"rat"</span>, t = <span class="string">"car"</span>, <span class="keyword">return</span> <span class="literal">false</span>.</div></pre></td></tr></table></figure></p>
<p>“nagaram” 是從 anagram 重構出來的所以回傳 true 。<br>“rat” 不是從 car 重構的所以回傳 false 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>建立一個字元表，第一次將 s 每個字元放進去字元表中。</p>
<p>第二次尋遍 t ，將相同出現的字元從字元表減去。</p>
<p>最後若字元表有不為 0 的數字，則代表 t 跟 s 沒有相符。</p>
<p><img src="/leetcode-242/anagram.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnagram</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> t: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> alphabet = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">26</span>)</div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s.utf8 &#123; alphabet[<span class="type">Int</span>(<span class="built_in">c</span>) - <span class="number">97</span>] += <span class="number">1</span> &#125;</div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> t.utf8 &#123; alphabet[<span class="type">Int</span>(<span class="built_in">c</span>) - <span class="number">97</span>] -= <span class="number">1</span> &#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alphabet &#123; <span class="keyword">if</span> i != <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125; &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Sort </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#506 Relative Ranks - in Swift]]></title>
      <url>/leetcode-506/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: “Gold Medal”, “Silver Medal” and “Bronze Medal”.</p>
<p>有 N 個運動員，請從他們每個人的分數，排序出他們每個人所得到的排名。</p>
<p>前三名需要頒發給他們獎牌 : “Gold Medal”, “Silver Medal” and “Bronze Medal” 。</p>
<p>Example 1:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>: [<span class="string">"Gold Medal"</span>, <span class="string">"Silver Medal"</span>, <span class="string">"Bronze Medal"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> first three athletes got the top three highest scores, so they got <span class="string">"Gold Medal"</span>, <span class="string">"Silver Medal"</span> and <span class="string">"Bronze Medal"</span>.</div><div class="line"><span class="type">For</span> the <span class="keyword">left</span> two athletes, you just need to output their relative ranks according to their scores.</div></pre></td></tr></table></figure>
<p>5, 4, 3 分別拿到前三高的成績，所以分別獲得金、銀、銅牌。<br>剩下的 2, 1 只需要給予他們對應的名次， 4 和 5 名。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用 Sort 將    分數由高到小排列，可以得到每個人的排名，但是卻失去原本的索引。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>] -&gt; [<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>所以再添加一層陣列，放入這些選手的位置，重新藉由分數 Sort 一次。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="number">9</span>,<span class="number">0</span>], [<span class="number">3</span>,<span class="number">1</span>], [<span class="number">7</span>,<span class="number">2</span>], [<span class="number">8</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">4</span>]] -&gt; [[<span class="number">9</span>,<span class="number">0</span>], [<span class="number">8</span>,<span class="number">3</span>], [<span class="number">7</span>,<span class="number">2</span>], [<span class="number">4</span>,<span class="number">4</span>], [<span class="number">3</span>,<span class="number">1</span>]]</div></pre></td></tr></table></figure>
<p>這時候就可以將排名發放給選手，並且帶到選手所在的位置。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="type">Gold</span> <span class="type">Medal</span> -&gt; [<span class="number">9</span>,<span class="number">0</span>] <span class="comment">// 在第一個位置</span></div><div class="line">[<span class="type">Gold</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>]</div><div class="line"></div><div class="line"><span class="type">Sliver</span> <span class="type">Medal</span> -&gt; [<span class="number">8</span>,<span class="number">3</span>] <span class="comment">// 在第四個位置</span></div><div class="line">[<span class="type">Gold</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">"Sliver"</span>, <span class="string">""</span>]</div><div class="line"></div><div class="line"><span class="type">Bronze</span> <span class="type">Medal</span> -&gt; [<span class="number">7</span>,<span class="number">2</span>] <span class="comment">// 在第三個位置</span></div><div class="line">[<span class="type">Gold</span>, <span class="string">""</span>, <span class="string">"Bronze"</span>, <span class="string">"Sliver"</span>, <span class="string">""</span>]</div><div class="line"></div><div class="line"><span class="type">Fourth</span> -&gt; [<span class="number">4</span>,<span class="number">4</span>] <span class="comment">// 在第五個位置</span></div><div class="line">[<span class="type">Gold</span>, <span class="string">""</span>, <span class="string">"Bronze"</span>, <span class="string">"Sliver"</span>, <span class="string">"4"</span>]</div><div class="line"></div><div class="line"><span class="type">Fifth</span> -&gt; [<span class="number">3</span>,<span class="number">1</span>] <span class="comment">// 在第二個位置</span></div><div class="line">[<span class="type">Gold</span>, <span class="string">"5"</span>, <span class="string">"Bronze"</span>, <span class="string">"Sliver"</span>, <span class="string">"4"</span>]</div></pre></td></tr></table></figure>
<p><img src="/leetcode-506/ranks.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRelativeRanks</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">var</span> pair = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">2</span>)</div><div class="line">    <span class="keyword">var</span> pairs = [[<span class="type">Int</span>]]()</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = nums.<span class="built_in">count</span></div><div class="line">    <span class="keyword">var</span> res = [<span class="type">String</span>](repeating: <span class="string">""</span>, <span class="built_in">count</span>: <span class="built_in">count</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        pair[<span class="number">0</span>] = nums[i]</div><div class="line">        pair[<span class="number">1</span>] = i</div><div class="line">        pairs.append(pair <span class="keyword">as</span>! [<span class="type">Int</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    pairs = pairs.sorted &#123; $<span class="number">1</span>[<span class="number">0</span>] &lt; $<span class="number">0</span>[<span class="number">0</span>] &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</div><div class="line">            res[pairs[i][<span class="number">1</span>]] = <span class="string">"Gold Medal"</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">1</span> &#123;</div><div class="line">            res[pairs[i][<span class="number">1</span>]] = <span class="string">"Silver Medal"</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">2</span> &#123;</div><div class="line">            res[pairs[i][<span class="number">1</span>]] = <span class="string">"Bronze Medal"</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res[pairs[i][<span class="number">1</span>]] = <span class="string">"\(i + 1)"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#100 Same Tree - in Swift]]></title>
      <url>/leetcode-100/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two binary trees, write a function to check if they are equal or not.</p>
<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<p>寫一個函式，確認兩個二元樹是否相等。</p>
<p>節點位置跟每個值皆相等即為完全相等。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>確認兩個節點都空，代表相等。</p>
<p>若兩個節點都存在，比對兩個值相等，才繼續比對這兩個節點的左右兩邊。</p>
<p>若節點不存在或兩個節點不相等，就返回 false 。</p>
<p><img src="/leetcode-100/equation.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(<span class="number">_</span> p: TreeNode?, <span class="number">_</span> q: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> &amp;&amp; q == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> p = p, <span class="keyword">let</span> q = q, p.val == q.val &#123;</div><div class="line">        <span class="keyword">let</span> c1 = isSameTree(p.<span class="keyword">left</span>, q.<span class="keyword">left</span>)</div><div class="line">        <span class="keyword">let</span> c2 = isSameTree(p.<span class="keyword">right</span>, q.<span class="keyword">right</span>)</div><div class="line">        <span class="keyword">return</span> c1 &amp;&amp; c2</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Depth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#387 First Unique Character in a String - in Swift]]></title>
      <url>/leetcode-387/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p>
<p>從字串中找出第一個沒有重複的字元，並返回她的索引。如果沒有，則返回 -1 。</p>
<p>Examples:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"leetcode"</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>.</div><div class="line"></div><div class="line">s = <span class="string">"loveleetcode"</span>,</div><div class="line"><span class="keyword">return</span> <span class="number">2</span>.</div></pre></td></tr></table></figure>
<p>「leetcode」的第一個字元 l 沒有重複出現在字串中，所以回傳 0 。</p>
<p>「loveleetcode」的第三個字元 v 沒有重複，所以回傳 2 。</p>
<p>Note: You may assume the string contain only lowercase letters.</p>
<p>可以假設字串中只有小寫的單字。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>無腦的用 dictionary 做了一次果然被算 timeout 。</p>
<p>AC 解是將各個字元轉為字母 0 ~ 25 ，代表陣列中 26 個位置，<br>只要該單字出現，便 + 1 至該位置中。</p>
<p>第二次迴圈時，只要出現第一個位置為 1 (只出現過一次) 的字母，便回傳該索引。</p>
<p><img src="/leetcode-387/uniquec.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstUniqChar</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> alphabet = [<span class="type">Int</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: <span class="number">26</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s.utf8 &#123;</div><div class="line">        <span class="keyword">let</span> index = <span class="type">Int</span>(<span class="built_in">c</span> - <span class="number">97</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">var</span> val = alphabet[index] &#123;</div><div class="line">            val += <span class="number">1</span></div><div class="line">            alphabet[index] = val</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alphabet[index] = <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s.utf8 &#123;</div><div class="line">        <span class="keyword">if</span> alphabet[<span class="type">Int</span>(<span class="built_in">c</span> - <span class="number">97</span>)] == <span class="number">1</span> &#123;</div><div class="line">            <span class="keyword">return</span> index</div><div class="line">        &#125;</div><div class="line">        index += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#169 Majority Element - in Swift]]></title>
      <url>/leetcode-169/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<p>從陣列中找出出現次數超過一半次數的元素。</p>
<p>可以假設陣列不為空，且一定有一個超過次數元素存在。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>這題其實要求的是就是數學上的「眾數」。</p>
<p>這裡用的是投票算法，鑑於題目規定眾數一定存在。</p>
<p>我們定義一個計數器，歸零時賦予新值成為新的眾數候選。</p>
<p>不為零時，如果新的數字等於候選數，計數器 +1 ，反之 -1 。</p>
<p><img src="/leetcode-169/boyer_moore_algor.gif" alt=""></p>
<p>為什麼這樣做就可以得出解呢，這裡有<a href="http://blog.csdn.net/kimixuchen/article/details/52787307#原理解析" target="_blank" rel="external">投票算法的原理解析</a>。</p>
<p>簡單來說，我們可以無視程式運行到計數器最後歸零的過程，純粹只看歸零後的剩餘數字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> res = nums[<span class="number">0</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">            res = nums[i]</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> res == nums[i] &#123;</div><div class="line">            <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Divide and Conquer </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Bit Manipulation </tag>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#599 Minimum Index Sum of Two Lists - in Swift]]></title>
      <url>/leetcode-599/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.</p>
<p>You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.</p>
<p>假設 Andy 和 Doris 想要找一間餐廳吃晚餐，他們兩個人都有一個喜愛的餐廳名單。</p>
<p>你的任務是幫他們兩個找到，第一個共同出現在名單上的餐廳。你可以假設 Andy 和 Doris 一定會有一間一樣喜歡的餐廳。</p>
<p>補充 : 如果皆是同時找到的餐廳，就把全部同時找到的餐廳列出來。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">[<span class="string">"Shogun"</span>, <span class="string">"Tapioca Express"</span>, <span class="string">"Burger King"</span>, <span class="string">"KFC"</span>]</div><div class="line">[<span class="string">"Piatti"</span>, <span class="string">"The Grill at Torrey Pines"</span>, <span class="string">"Hungry Hunter Steakhouse"</span>, <span class="string">"Shogun"</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>: [<span class="string">"Shogun"</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> only restaurant they both like <span class="keyword">is</span> <span class="string">"Shogun"</span>.</div></pre></td></tr></table></figure></p>
<p>他們兩個人的名單只有一間 Shogun 是共同喜歡的餐廳。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">[<span class="string">"Shogun"</span>, <span class="string">"Tapioca Express"</span>, <span class="string">"Burger King"</span>, <span class="string">"KFC"</span>]</div><div class="line">[<span class="string">"KFC"</span>, <span class="string">"Shogun"</span>, <span class="string">"Burger King"</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>: [<span class="string">"Shogun"</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> restaurant they both like and have the least index sum <span class="keyword">is</span> <span class="string">"Shogun"</span> with index sum <span class="number">1</span> (<span class="number">0</span>+<span class="number">1</span>).</div></pre></td></tr></table></figure></p>
<p>他們兩個人的名單有 Shogun 跟 KFC 是共同喜歡的餐廳。但是 Shogun 在兩個人的名單會先被共同找到。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>第一次錯誤發現如果有同時間的餐廳要一次列出來，結果我只列了一個。</p>
<p>接下來連續三次都 Time Limit Exceeded =0= LOLOLOL</p>
<p>多次失敗後終於 AC</p>
<hr>
<p>首先將 Andy 的名單記錄到 dictionary [餐廳名: 找到的時間]。</p>
<p>接下來看 Doris 的名單，只要餐廳在剛剛紀錄的 ditionary 裡，就把該餐廳被 Andy 找到的時間，跟 Doris 找到現在這間餐廳的時間加在一起，作為最小值。</p>
<p>如果最小值出現新低，就更新最小值，並把答案陣列翻新。</p>
<p>如果最小值相同，就把餐廳加進答案陣列中。</p>
<p><img src="/leetcode-599/andy_doris.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(<span class="number">_</span> list1: [String], <span class="number">_</span> list2: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">var</span> best = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">    <span class="keyword">var</span> dict1 = [<span class="type">String</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> ans = [<span class="type">String</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i,v) <span class="keyword">in</span> list1.enumerated() &#123; dict1[v] = i &#125;</div><div class="line">    <span class="keyword">for</span> (i,v) <span class="keyword">in</span> list2.enumerated() &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> j = dict1[v] &#123;</div><div class="line">            <span class="keyword">if</span> i + j &lt; best &#123;</div><div class="line">                best = i + j</div><div class="line">                ans = [v]</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i + j == best &#123;</div><div class="line">                ans.append(v)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#563 Binary Tree Tilt - in Swift]]></title>
      <url>/leetcode-563/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, return the tilt of the <strong>whole tree</strong>.</p>
<p>The tilt of a <strong>tree node</strong> is defined as the <strong>absolute difference</strong> between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.</p>
<p>The tilt of the <strong>whole tree</strong> is defined as the sum of all nodes’ tilt.</p>
<p>計算一個二元樹的傾斜值，一個節點的傾斜值來自其左右兩邊子樹個別總和起來相減的絕對值。</p>
<p>現在算出所有節點的傾斜值，並且加總起來。</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">   <span class="number">1</span></div><div class="line"> /   \</div><div class="line"><span class="number">2</span>     <span class="number">3</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">Tilt</span> of node <span class="number">2</span> : <span class="number">0</span></div><div class="line"><span class="type">Tilt</span> of node <span class="number">3</span> : <span class="number">0</span></div><div class="line"><span class="type">Tilt</span> of node <span class="number">1</span> : |<span class="number">2</span>-<span class="number">3</span>| = <span class="number">1</span></div><div class="line"><span class="type">Tilt</span> of binary tree : <span class="number">0</span> + <span class="number">0</span> + <span class="number">1</span> = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>2 、 3 沒有任何子節點，所以傾斜值為 0 ， 1 的傾斜值為 |2 - 3| = 1 ，加總起來為 1 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從葉節點開始，算出傾斜值，並且將該值加回去其父節點的左或右，不斷遞迴回到根節點。</p>
<p><img src="/leetcode-563/postorder.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTilt</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postorder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = postorder(root.<span class="keyword">left</span>)</div><div class="line">        <span class="keyword">var</span> <span class="keyword">right</span> = postorder(root.<span class="keyword">right</span>)</div><div class="line">        </div><div class="line">        res += <span class="type">Int</span>(<span class="built_in">abs</span>(<span class="keyword">left</span> - <span class="keyword">right</span>))</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">left</span> + <span class="keyword">right</span> + root.val</div><div class="line">    &#125;</div><div class="line">    postorder(root)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#404 Sum of Left Leaves - in Swift]]></title>
      <url>/leetcode-404/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Find the sum of all left leaves in a given binary tree.</p>
<p>算出所有左葉節點的加總。</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">       <span class="number">3</span></div><div class="line">      / \</div><div class="line">     <span class="number">9</span>  <span class="number">20</span></div><div class="line">       /  \</div><div class="line">      <span class="number">15</span>   <span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">There</span> are two <span class="keyword">left</span> leaves <span class="keyword">in</span> the binary tree, with values <span class="number">9</span> and <span class="number">15</span> respectively. <span class="type">Return</span> <span class="number">24</span>.</div></pre></td></tr></table></figure></p>
<p>這個二元樹有兩個左葉節點，分別為 9 和 15 ，加總為 24 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用遞迴查找每一個左節點，如果該左節點無任何子節點 (左、右)，則判斷該左節點為葉節點。</p>
<p>將他的值加入答案中，如果還不是葉節點，就繼續往下找。</p>
<p><img src="/leetcode-404/left_sum.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfLeftLeaves</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">if</span> root?.<span class="keyword">left</span>?.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root?.<span class="keyword">left</span>?.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</div><div class="line">            res += (root?.<span class="keyword">left</span>?.val)!</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res += sumOfLeftLeaves(root?.<span class="keyword">left</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    res += sumOfLeftLeaves(root?.<span class="keyword">right</span>)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#167 Two Sum II - Input array is sorted - in Swift]]></title>
      <url>/leetcode-167/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers that is already <strong><em>sorted in ascending order</em></strong>, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p>給予已經升序的數字陣列，找出兩個數字相加符合目標值。</p>
<p>最後須返回找到的值的索引，且 index1 小於 index2 。</p>
<p>假設一定會有一個正確解，而且沒有使用相同元素兩次。</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: numbers=&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;, target=<span class="number">9</span></div><div class="line"><span class="type">Output</span>: index1=<span class="number">1</span>, index2=<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>目標值為 9 ，找到 2 + 7 = 9 ， 返回 2 -&gt; index = 1 ， 7 -&gt; index = 2 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>由於陣列是由小到大排序，所以可以直接使用二元搜尋法。<br>從最小跟最大開始找，不斷縮小到中間，直到找到答案。</p>
<p><img src="/leetcode-167/binary_search.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> numbers: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = numbers.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &#123;</div><div class="line">        <span class="keyword">if</span> numbers[<span class="keyword">left</span>] + numbers[<span class="keyword">right</span>] == target &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="keyword">left</span> + <span class="number">1</span>, <span class="keyword">right</span> + <span class="number">1</span>]</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> numbers[<span class="keyword">left</span>] + numbers[<span class="keyword">right</span>] &lt; target &#123;</div><div class="line">            <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Two Pointers </category>
            
            <category> Binary Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#122 Best Time to Buy and Sell Stock II - in Swift]]></title>
      <url>/leetcode-122/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<p>給定陣列，他的第 i 個元素代表某股票在第 i 天的價格，設計一個算法來找到最大的利潤。</p>
<p>可以盡可能完成越多次的交易，但不能同時參與多個交易 (必須在購買下一次股票前出售手上的股票)。</p>
<p>舉例 [2,1,3,4,5,4,2,8,7]</p>
<p>你可以在第二天買 1 第五天賣 5 賺 4 ，<br>在第七天買 2 第五天賣 8 賺 6，總共賺了 10 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>舉例 [2,1,3,4,5,4,2,8,7]<br>在第二天買 1 第五天賣 5 可以賺 4<br>但在第二天買 1 第三天賣 3 ，第三天買 3 第四天賣 4 ， 第四天買 4 第五天賣 5 ，也會賺 4 。<br>所以只要當天減去昨天是賺的，就加進結果中，反之則無視。</p>
<p><img src="/leetcode-122/maximum_profit.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(<span class="number">_</span> prices: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> last = -<span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> price <span class="keyword">in</span> prices &#123;</div><div class="line">        <span class="keyword">if</span> last &gt;= <span class="number">0</span> &amp;&amp; price - last &gt; <span class="number">0</span> &#123;</div><div class="line">            res += (price - last)</div><div class="line">        &#125;</div><div class="line">        last = price</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Greedy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#455 Assign Cookies - in Swift]]></title>
      <url>/leetcode-455/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Assume you are an awesome parent and want to give your children some cookies.</p>
<p>But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with;</p>
<p>and each cookie j has a size sj. If sj &gt;= gi, we can assign the cookie j to the child i, and the child i will be content.</p>
<p>Your goal is to maximize the number of your content children and output the maximum number.</p>
<p>給定兩個陣列，一個代表各個餅乾的尺寸， 一個代表每個小孩想要的餅乾尺寸。</p>
<p>現在將餅乾分配給小孩們，但分配的餅乾尺寸不能夠小於小孩期望的餅乾尺寸。</p>
<p>求這些餅乾最多可以滿足幾個小孩。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">You</span> have <span class="number">3</span> children and <span class="number">2</span> cookies. <span class="type">The</span> greed factors of <span class="number">3</span> children are <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>.</div><div class="line"><span class="type">And</span> even though you have <span class="number">2</span> cookies, since their size <span class="keyword">is</span> both <span class="number">1</span>, you could only make the child whose greed factor <span class="keyword">is</span> <span class="number">1</span> content.</div><div class="line"><span class="type">You</span> need to output <span class="number">1</span>.</div></pre></td></tr></table></figure></p>
<p>現在有三個小孩，兩個尺寸為 1 的餅乾，但只有一個小孩接受尺寸為 1 的餅乾，所以得出答案 1 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">2</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">You</span> have <span class="number">2</span> children and <span class="number">3</span> cookies. <span class="type">The</span> greed factors of <span class="number">2</span> children are <span class="number">1</span>, <span class="number">2</span>.</div><div class="line"><span class="type">You</span> have <span class="number">3</span> cookies and their sizes are big enough to gratify all of the children,</div><div class="line"><span class="type">You</span> need to output <span class="number">2</span>.</div></pre></td></tr></table></figure></p>
<p>現在有兩個小孩，三個尺寸為 1, 2, 3 的餅乾，一個小孩接受尺寸為 1 的餅乾， 另一個接受尺寸為 2 的餅乾，所以得出答案 2 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將小孩按照慾望的順序由低往高排，餅乾也照著尺寸大小由小往大排。</p>
<p>遍尋餅乾的尺寸，只要小孩喜歡這個餅乾，就將已滿足的小孩 + 1 。</p>
<p>由於慾望與餅乾皆有排序，所以餅乾才可以不斷地往前數，因為前一個小孩不想要的，下一個小孩當然也不想要。</p>
<p><img src="/leetcode-455/greedy.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findContentChildren</span><span class="params">(<span class="number">_</span> g: [Int], <span class="number">_</span> s: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> g = g.sorted(by: &lt;)</div><div class="line">    <span class="keyword">let</span> s = s.sorted(by: &lt;)</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> j = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(i&lt;g.<span class="built_in">count</span> &amp;&amp; j&lt;s.<span class="built_in">count</span>) &#123;</div><div class="line">        <span class="keyword">if</span> g[i] &lt;= s[j] &#123;</div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        j += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Greedy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#171 Excel Sheet Column Number - in Swift]]></title>
      <url>/leetcode-171/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>將 EXCEL 英文欄位轉為對應數字欄位。</p>
<p>For example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">A</span> -&gt; <span class="number">1</span></div><div class="line"><span class="type">B</span> -&gt; <span class="number">2</span></div><div class="line"><span class="type">C</span> -&gt; <span class="number">3</span></div><div class="line">...</div><div class="line"><span class="type">Z</span> -&gt; <span class="number">26</span></div><div class="line"><span class="type">AA</span> -&gt; <span class="number">27</span></div><div class="line"><span class="type">AB</span> -&gt; <span class="number">28</span></div></pre></td></tr></table></figure>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將每個字元轉換為 ASCII 碼，並且減掉 64 使 A~Z 變為 1~26 。</p>
<p>在加入下一字元前，須考慮每一次進位就要乘上前一個字元經過幾次 26 次。</p>
<p><img src="/leetcode-171/sheet.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">titleToNumber</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s.utf8 &#123;</div><div class="line">        res = res * <span class="number">26</span> + (<span class="type">Int</span>(i) - <span class="number">64</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#383 Ransom Note - in Swift]]></title>
      <url>/leetcode-383/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>
<p>Each letter in the magazine string can only be used once in your ransom note.</p>
<p>給予 A 字串與 B 字串， 若 A 字串的每一個字皆由 B 字串取得而來，回傳 true 。<br>每個字元從 B 只能取得一次，每個字元皆是獨一無二的。</p>
<p>Note:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">You</span> may assume that both strings contain only lowercase letters.</div><div class="line"></div><div class="line">canConstruct(<span class="string">"a"</span>, <span class="string">"b"</span>) -&gt; <span class="literal">false</span></div><div class="line">canConstruct(<span class="string">"aa"</span>, <span class="string">"ab"</span>) -&gt; <span class="literal">false</span></div><div class="line">canConstruct(<span class="string">"aa"</span>, <span class="string">"aab"</span>) -&gt; <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>可以從 B 字串（aab） 可以拿到 （aa） 組成 A 字串，所以回傳 true 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>重新定義兩個可以變動的字串，尋遍原本的 a ，若 b 包含該字元，就把 a 和 b 該字元刪除。<br>最後若是 a 被刪除到空字串，證明 a 的字元皆由 b 組成。</p>
<p><img src="/leetcode-383/note.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(<span class="number">_</span> ransomNote: String, <span class="number">_</span> magazine: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> a = ransomNote</div><div class="line">    <span class="keyword">var</span> b = magazine</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> ransomNote.characters &#123;</div><div class="line">        <span class="keyword">if</span> b.<span class="built_in">contains</span>(<span class="string">"\(c)"</span>) &#123;</div><div class="line">            b.remove(at: (b.range(of: <span class="string">"\(c)"</span>)?.lowerBound)!)</div><div class="line">            a.remove(at: (a.range(of: <span class="string">"\(c)"</span>)?.lowerBound)!)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> a == <span class="string">""</span> ? <span class="literal">true</span> : <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#530 Minimum Absolute Difference in BST - in Swift]]></title>
      <url>/leetcode-530/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.</p>
<p>找出二元樹任意兩點，差距最小的值。</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line"></div><div class="line">   <span class="number">1</span></div><div class="line">    \</div><div class="line">     <span class="number">3</span></div><div class="line">    /</div><div class="line">   <span class="number">2</span></div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">The</span> minimum absolute difference <span class="keyword">is</span> <span class="number">1</span>, which <span class="keyword">is</span> the difference between <span class="number">2</span> and <span class="number">1</span> (or between <span class="number">2</span> and <span class="number">3</span>).</div></pre></td></tr></table></figure></p>
<p>最小的差是 1 ，來自 2 和 1 (或 3 和 2)</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>BST 特性由小到大取節點，比較每次的差值與目前最小值。</p>
<p><img src="/leetcode-530/minimum.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMinimumDifference</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> numbers = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> res = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        inOrder(root.<span class="keyword">left</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> last = numbers.last &#123;</div><div class="line">            res = <span class="built_in">min</span>((root.val - last), res)</div><div class="line">        &#125;</div><div class="line">        numbers.append(root.val)</div><div class="line">        inOrder(root.<span class="keyword">right</span>)</div><div class="line">    &#125;</div><div class="line">    inOrder(root)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Binary Search Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Binary Search Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#661 Image Smoother - in Swift]]></title>
      <url>/leetcode-661/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.</p>
<p>給一個二維矩陣，數字代表圖片的灰度，現在對圖片進行平滑處理，將每個像素轉換為周圍 9 個值的平均。</p>
<p>Example 1:</p>
<p>Input:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</div><div class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line"></div><div class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"></div><div class="line"><span class="type">For</span> the point (<span class="number">0</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">0</span>), (<span class="number">2</span>,<span class="number">2</span>): floor(<span class="number">3</span>/<span class="number">4</span>) = floor(<span class="number">0.75</span>) = <span class="number">0</span></div><div class="line"><span class="type">For</span> the point (<span class="number">0</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">0</span>), (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">1</span>): floor(<span class="number">5</span>/<span class="number">6</span>) = floor(<span class="number">0.83333333</span>) = <span class="number">0</span></div><div class="line"><span class="type">For</span> the point (<span class="number">1</span>,<span class="number">1</span>): floor(<span class="number">8</span>/<span class="number">9</span>) = floor(<span class="number">0.88888889</span>) = <span class="number">0</span></div></pre></td></tr></table></figure></p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p><img src="/leetcode-661/submission.png" alt=""></p>
<p>先列出每個節點的位置，找出 9 宮格的範圍， min I ~ max I 與 min J ~ max J 。<br>算出該次節點的 9 宮格加總 / 次數，填入新陣列中。</p>
<p><img src="/leetcode-661/smoother.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">imageSmoother</span><span class="params">(<span class="number">_</span> M: [[Int]])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> matrix = <span class="type">M</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;matrix.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;matrix[i].<span class="built_in">count</span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> mini = i == <span class="number">0</span> ? <span class="number">0</span> : i - <span class="number">1</span></div><div class="line">            <span class="keyword">let</span> maxi = i == <span class="type">M</span>.<span class="built_in">count</span> - <span class="number">1</span> ? <span class="type">M</span>.<span class="built_in">count</span> - <span class="number">1</span> : i + <span class="number">1</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> minj = j == <span class="number">0</span> ? <span class="number">0</span> : j - <span class="number">1</span></div><div class="line">            <span class="keyword">let</span> maxj = j == matrix[i].<span class="built_in">count</span> - <span class="number">1</span> ? matrix[i].<span class="built_in">count</span> - <span class="number">1</span> : j + <span class="number">1</span></div><div class="line">            </div><div class="line">            <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">            <span class="keyword">var</span> cnt = <span class="number">0</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> mini...maxi &#123;</div><div class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> minj...maxj&#123;</div><div class="line">                    sum += <span class="type">M</span>[a][b]</div><div class="line">                    cnt += <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            matrix[i][j] = (sum / cnt)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> matrix</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#349 Intersection of Two Arrays - in Swift]]></title>
      <url>/leetcode-349/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two arrays, write a function to compute their intersection.</p>
<p>算出兩個陣列的 INTERSECT 。</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先把第一個陣列放進 Set 中刪去 Duplicate，<br>再來找出第二個陣列已經存在 Set 中的數字，存入結果中。</p>
<p><img src="/leetcode-349/array_intersect.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">let</span> values = <span class="type">Set</span>(nums1)</div><div class="line">    <span class="keyword">var</span> result = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums2 &#123;</div><div class="line">        <span class="keyword">if</span> values.<span class="built_in">contains</span>(num) &#123;</div><div class="line">            result.insert(num)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Binary Search </category>
            
            <category> Hash Table </category>
            
            <category> Two Pointers </category>
            
            <category> Sort </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#453 Minimum Moves to Equal Array Elements - in Swift]]></title>
      <url>/leetcode-453/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.</p>
<p>給數字陣列，找出最少的步數可以把全部的元素變成相等。<br>每一步，可以把 n - 1 個元素同時加 1 。</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">Only</span> three moves are needed (remember each move increments two elements):</div><div class="line"></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  =&gt;  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]  =&gt;  [<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]  =&gt;  [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="number">1</span>+<span class="number">1</span>, <span class="number">2</span>+<span class="number">1</span> =&gt;  <span class="number">2</span>+<span class="number">1</span>, <span class="number">3</span>+<span class="number">1</span> =&gt;  <span class="number">3</span>+<span class="number">1</span>, <span class="number">3</span>+<span class="number">1</span> =&gt; <span class="type">Answer</span></div></pre></td></tr></table></figure></p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>對 n-1 個數字 +1 ，等於對 1 個數字 -1 。<br>所以最佳的方法是找出最小值，然後算出所有數字對最小值的差。</p>
<p><img src="/leetcode-453/moves.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">minMoves</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> nums.isEmpty &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> mini = nums[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums &#123;</div><div class="line">        mini = <span class="built_in">min</span>(mini, n)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums &#123;</div><div class="line">        res += n - mini</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#598 Range Addition II - in Swift]]></title>
      <url>/leetcode-598/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an <code>m * n</code> matrix M initialized with all 0’s and several update operations.</p>
<p>Operations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0 &lt;= i &lt; a and 0 &lt;= j &lt; b.</p>
<p>You need to count and return the number of maximum integers in the matrix after performing all the operations.</p>
<p>給一個 <code>m * n</code> 的矩陣 M ，全部由 0 鋪上。</p>
<p>再給一些更新元素，由 2D 陣列組成。　矩陣內含 a, b 兩個正整數，<br>意為 M 的 <code>[i][j]</code> 需要根據 <code>[a][b]</code> 的範圍，對每個元素 + 1 。</p>
<p>現在需要求出矩陣 M 中最大的數有多少個。</p>
<p>Example :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">m = <span class="number">3</span>, n = <span class="number">3</span></div><div class="line">operations = [[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>]]</div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">4</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">Initially</span>, <span class="type">M</span> =</div><div class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</div><div class="line"></div><div class="line"><span class="type">After</span> performing [<span class="number">2</span>,<span class="number">2</span>], <span class="type">M</span> =</div><div class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</div><div class="line"></div><div class="line"><span class="type">After</span> performing [<span class="number">3</span>,<span class="number">3</span>], <span class="type">M</span> =</div><div class="line">[[<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]</div><div class="line"></div><div class="line"><span class="type">So</span> the maximum integer <span class="keyword">in</span> <span class="type">M</span> <span class="keyword">is</span> <span class="number">2</span>, and there are four of it <span class="keyword">in</span> <span class="type">M</span>. <span class="type">So</span> <span class="keyword">return</span> <span class="number">4</span>.</div></pre></td></tr></table></figure></p>
<p>最後矩陣 M 中最大的數為 2 ，並且有 4 個，所以回傳 4</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>最終要找的最大值區塊永遠都會在左上角，所以只要求出最後左上角剩下的區塊就是答案。<br>這邊透過 min 函式， 來比對最後的 m 跟 n 會是多少。</p>
<p><img src="/leetcode-598/range_addition.gif" alt="range_addition"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxCount</span><span class="params">(<span class="number">_</span> m: Int, <span class="number">_</span> n: Int, <span class="number">_</span> ops: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ops.isEmpty &#123; <span class="keyword">return</span> m * n &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> row = <span class="number">40000</span></div><div class="line">    <span class="keyword">var</span> col = <span class="number">40000</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> op <span class="keyword">in</span> ops &#123;</div><div class="line">        row = <span class="built_in">min</span>(row, op[<span class="number">0</span>])</div><div class="line">        col = <span class="built_in">min</span>(col, op[<span class="number">1</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> row * col</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#492 Construct the Rectangle - in Swift]]></title>
      <url>/leetcode-492/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>For a web developer, it is very important to know how to design a web page’s size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p>
<ol>
<li>The area of the rectangular web page you designed must equal to the given target area.</li>
<li>The width W should not be larger than the length L, which means L &gt;= W.</li>
<li>The difference between length L and width W should be as small as possible.</li>
</ol>
<p>給一個四邊形，必須找到他的「長」跟「寬」。</p>
<ol>
<li>長乘以寬剛好等於給予的面積</li>
<li>長必須要大於等於寬</li>
<li>長與寬盡量趨近於相等（正方形）。</li>
</ol>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">4</span></div><div class="line"><span class="type">Output</span>: [<span class="number">2</span>, <span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>: </div><div class="line"><span class="type">The</span> target area <span class="keyword">is</span> <span class="number">4</span>, and all the possible ways to construct it are [<span class="number">1</span>,<span class="number">4</span>], [<span class="number">2</span>,<span class="number">2</span>], [<span class="number">4</span>,<span class="number">1</span>].</div><div class="line"><span class="type">But</span> according to requirement <span class="number">2</span>, [<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">is</span> illegal; according to requirement <span class="number">3</span>,  [<span class="number">4</span>,<span class="number">1</span>] <span class="keyword">is</span> not optimal compared to [<span class="number">2</span>,<span class="number">2</span>]. <span class="type">So</span> the length <span class="type">L</span> <span class="keyword">is</span> <span class="number">2</span>, and the width <span class="type">W</span> <span class="keyword">is</span> <span class="number">2</span>.</div></pre></td></tr></table></figure></p>
<p>四邊形的面積為 4 ，他的長寬可能為 [1,4], [2,2], [4,1] ，寬不能大於長所以 [1,4] 去掉， [2,2] 比起 [4,1] 更趨近於正方形，所以答案是 [2,2] 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>要求出趨近於正方形的長寬，最先想到的是把面積開根號，看寬是否為整數。<br>是整數代表是正方形，直接回傳 [w, w]<br>如果不是，依序將開根號得來的寬化成整數，減一直到能被面積整除，就可以求得寬。最後回傳 [area/w, w]</p>
<p><img src="/leetcode-492/rectangle.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation <span class="comment">// sqrt function needs to import Foundation</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructRectangle</span><span class="params">(<span class="number">_</span> area: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">if</span> area == <span class="number">0</span> &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> w = <span class="type">Int</span>(sqrt(<span class="type">Double</span>(area)))</div><div class="line">    <span class="keyword">while</span> area % w != <span class="number">0</span> &#123;</div><div class="line">        w -= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [area / w, w]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#283 Move Zeroes - in Swift]]></title>
      <url>/leetcode-283/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>把陣列中的 0 都移到最後面。</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>例如 [0, 1, 0, 3, 12] 把 0 都移到後面後會變成 [1, 3, 12, 0, 0]</p>
<p>Note:</p>
<p>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.</p>
<p>不能使用額外的陣列，單純修改原本的陣列。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>把原本的陣列 0 都除掉，算出原本陣列長度與除去 0 之後的長度。<br>缺少幾個 0 就補到後面去。</p>
<p><img src="/leetcode-283/filter.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = nums.<span class="built_in">count</span></div><div class="line">    nums = nums.<span class="built_in">filter</span> &#123; $<span class="number">0</span> != <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">let</span> newCount = nums.<span class="built_in">count</span></div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> - newCount &#123;</div><div class="line">        nums.append(<span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="其他解答"><a href="#其他解答" class="headerlink" title="其他解答"></a>其他解答</h1><p>類似 Sort 的方法，把不是 0 的數字跟 0 不斷的對換位置。</p>
<p><img src="/leetcode-283/change.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> j = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums[i] != <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">let</span> temp = nums[j]</div><div class="line">            nums[j] = nums[i]</div><div class="line">            nums[i] = temp</div><div class="line">            j += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
            <category> Two Pointers </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#606 Construct String from Binary Tree - in Swift]]></title>
      <url>/leetcode-606/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><blockquote>
<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>
<p>The null node needs to be represented by empty parenthesis pair “()”. And you need to omit all the empty parenthesis pairs that don’t affect the one-to-one mapping relationship between the string and the original binary tree.</p>
<p>將二元樹化為字串，格式為 root(left(left))(right) ，<br>空的節點表示為()，但不會影響到其他節點的空節點得省略。</p>
</blockquote>
<ul>
<li><p>Example 1:<br><code>[1,2,3,4]</code> 可以得出 <code>1(2(4)())(3()())</code> ，消除不必要的空節點可以得到 <code>1(2(4))(3)</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="type">Binary</span> tree: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">       <span class="number">1</span></div><div class="line">     /   \</div><div class="line">    <span class="number">2</span>     <span class="number">3</span></div><div class="line">   /</div><div class="line">  <span class="number">4</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="string">"1(2(4))(3)"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Example 2:<br>跟第一題差不多，多的是不能省略 4 前面的空節點。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="type">Binary</span> tree: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,null,<span class="number">4</span>]</div><div class="line">       <span class="number">1</span></div><div class="line">     /   \</div><div class="line">    <span class="number">2</span>     <span class="number">3</span></div><div class="line">     \</div><div class="line">      <span class="number">4</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="string">"1(2()(4))(3)"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用遞迴求出左方節點與右方節點應該回傳的字串。<br>最後將字串組合起來 root(left)(right)。</p>
<p><img src="/leetcode-606/tree2str.gif" alt="tree2str" style="height: 450px;"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tree2str</span><span class="params">(<span class="number">_</span> t: TreeNode?)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> t = t <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> result = <span class="string">"\(t.val)"</span></div><div class="line">    <span class="keyword">let</span> <span class="keyword">left</span> = tree2str(t.<span class="keyword">left</span>)</div><div class="line">    <span class="keyword">let</span> <span class="keyword">right</span> = tree2str(t.<span class="keyword">right</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.isEmpty &amp;&amp; <span class="keyword">right</span>.isEmpty &#123; <span class="keyword">return</span> result &#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.isEmpty &#123; <span class="keyword">return</span> <span class="string">"\(result)()(\(right))"</span> &#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">right</span>.isEmpty &#123; <span class="keyword">return</span> <span class="string">"\(result)(\(left))"</span>&#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"\(result)(\(left))(\(right))"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#657 Judge Route Circle - in Swift]]></title>
      <url>/leetcode-657/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.</p>
<p>The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.</p>
<p>有個機器人在座標 (0,0)， 給一個字串讓機器人動起來畫一個圓，意思就是他要走回原點。<br>字串中 R (Right), L (Left), U (Up) and D (down)，回傳 bool 判斷機器人是否回到原點。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"UD"</span></div><div class="line"><span class="type">Output</span>: <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"LL"</span></div><div class="line"><span class="type">Output</span>: <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h1 id="第一次解題-428-ms"><a href="#第一次解題-428-ms" class="headerlink" title="第一次解題 : 428 ms"></a>第一次解題 : 428 ms</h1><p>若要讓機器人回到原點，勢必往上走跟往下走的次數會相同，並且往左走跟往右走的次數也會相同。</p>
<p><img src="/leetcode-657/route.gif" alt=""></p>
<p>用一個字典紀錄上下左右的次數，判斷 (上的次數 == 下的次數 &amp;&amp; 左的次數 == 右的次數)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">judgeCircle</span><span class="params">(<span class="number">_</span> moves: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Character</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="type">Array</span>(moves.characters) &#123;</div><div class="line">        dict[s] = (dict[s] ?? <span class="number">0</span>) + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dict[<span class="string">"U"</span>] == dict[<span class="string">"D"</span>] &amp;&amp; dict[<span class="string">"R"</span>] == dict[<span class="string">"L"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#538 Convert BST to Greater Tree - in Swift]]></title>
      <url>/leetcode-538/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>
<p>將二元搜索樹變為 Greater Tree ，將原本的節點值加上（其他節點值）的加總，其他節點的位置必須大於該節點。</p>
<p>Example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="type">The</span> root of a <span class="type">Binary</span> <span class="type">Search</span> <span class="type">Tree</span> like this:</div><div class="line"></div><div class="line">       <span class="number">5</span></div><div class="line">     /   \</div><div class="line">    <span class="number">2</span>     <span class="number">13</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">The</span> root of a <span class="type">Greater</span> <span class="type">Tree</span> like this:</div><div class="line">      </div><div class="line">       <span class="number">18</span></div><div class="line">      /  \</div><div class="line">    <span class="number">20</span>    <span class="number">13</span></div></pre></td></tr></table></figure>
<p> 2 -&gt; 最小節點 -&gt; 2 + 5 + 13 = 20<br> 5 -&gt; 第二小節點 -&gt; 5 + 13 = 18<br> 13 -&gt; 沒有節點大於 13 -&gt; 13</p>
<h1 id="第一次解題-138-ms"><a href="#第一次解題-138-ms" class="headerlink" title="第一次解題 : 138 ms"></a>第一次解題 : 138 ms</h1><p>從最大節點開始，計算加總值，輪到第二大節點時，將總值與該節點加起來成為新總值，不斷下去。</p>
<p>我做了一張 GIF 演示了一下流程 :<br><img src="/leetcode-538/greater_tree.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertBST</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode</span>? &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(<span class="number">_</span> node: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        </div><div class="line">        convert(node.<span class="keyword">right</span>)</div><div class="line">        </div><div class="line">        node.val += sum</div><div class="line">        sum = node.val</div><div class="line">        </div><div class="line">        convert(node.<span class="keyword">left</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    convert(root)</div><div class="line">    <span class="keyword">return</span> root</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#389 Find the Difference - in Swift]]></title>
      <url>/leetcode-389/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two strings s and t which consist of only lowercase letters.<br>String t is generated by random shuffling string s and then add one more letter at a random position.<br>Find the letter that was added in t.</p>
<p>給兩個字串 s 和 t ，兩個都只包含小寫文字。<br>字串 t 是由 s 的文字隨機打亂組成，再加入一個隨機的文字在隨機的位置。<br>找出那個隨機的文字。</p>
<p>Example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">s = <span class="string">"leetcode"</span></div><div class="line">t = <span class="string">"lteweodce"</span></div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">w</div></pre></td></tr></table></figure>
<h1 id="第一次解題-33-ms"><a href="#第一次解題-33-ms" class="headerlink" title="第一次解題 : 33 ms"></a>第一次解題 : 33 ms</h1><p>算出 s 跟 t 的 bit 加總，相減後就可以得出多出來的 bit ，轉回 Character 就是答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTheDifference</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> t: String)</span></span> -&gt; <span class="type">Character</span> &#123;</div><div class="line">	<span class="keyword">var</span> sumS = [<span class="type">UInt8</span>](s.utf8).<span class="built_in">map</span> &#123; <span class="type">Int</span>($<span class="number">0</span>) &#125;.<span class="built_in">reduce</span>(<span class="number">0</span>)&#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;</div><div class="line">	<span class="keyword">var</span> sumT = [<span class="type">UInt8</span>](t.utf8).<span class="built_in">map</span> &#123; <span class="type">Int</span>($<span class="number">0</span>) &#125;.<span class="built_in">reduce</span>(<span class="number">0</span>)&#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;</div><div class="line">	<span class="keyword">return</span> <span class="type">Character</span>(<span class="type">UnicodeScalar</span>(sumT - sumS)!)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Other-Solution"><a href="#Other-Solution" class="headerlink" title="Other Solution"></a>Other Solution</h1><p>利用 XOR 相同會回傳 0 ，將字串組成後依序執行 XOR，最後會只剩下不同的那一個。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTheDifference</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> t: String)</span></span> -&gt; <span class="type">Character</span> &#123;</div><div class="line">    <span class="keyword">let</span> xor = (s + t).utf8.<span class="built_in">reduce</span>(<span class="number">0</span>, &#123; $<span class="number">0</span> ^ $<span class="number">1</span>&#125;)</div><div class="line">    <span class="keyword">return</span> <span class="type">Character</span>(<span class="type">UnicodeScalar</span>(xor))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#258 Add Digits - in Swift]]></title>
      <url>/leetcode-258/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><ul>
<li><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.<br>給一個不為負數的整數，重複的將每個位數的數字加起來，直到結果剩一個整數。</p>
</li>
<li><p>For example:<br>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.<br>例如 38 ， 3 + 8 = 11 ， 1 + 1 = 2 ， 2 不能再拆開了所以回傳 2 。</p>
</li>
</ul>
<ul>
<li>Follow up:<br>Could you do it without any loop/recursion in O(1) runtime?<br>請解出題目但不使用「迴圈」或是「遞迴」函式。</li>
</ul>
<h1 id="第一次解題-45-ms"><a href="#第一次解題-45-ms" class="headerlink" title="第一次解題 : 45 ms"></a>第一次解題 : 45 ms</h1><p><a href="https://en.wikipedia.org/wiki/Digital_root#Congruence_formula" target="_blank" rel="external">這是一題要算出數根 (Digital Root) 的題目。</a></p>
<p>要算出數根有二種方式 :</p>
<p>第一種必須遵循 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">b = <span class="number">10</span></div><div class="line"></div><div class="line">dr(n) = <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span></div><div class="line">dr(n) = (b-<span class="number">1</span>) <span class="keyword">if</span> n != <span class="number">0</span> and n % (b-<span class="number">1</span>) == <span class="number">0</span></div><div class="line">dr(n) = n mod (b-<span class="number">1</span>) <span class="keyword">if</span> n % (b-<span class="number">1</span>) != <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>第二種 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dr(n) = <span class="number">1</span> + (n-<span class="number">1</span>) % <span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>可以發現除了 0 的數根為 0 以外，之後的數根皆由 1 ~ 9 不斷的循環。</p>
<p>0 -&gt; 0, 1 -&gt; 1, 2 -&gt; 2, … 9 -&gt; 9, 10 -&gt; 1, 11 -&gt; 2</p>
<p>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15<br>0 1 2 3 4 5 6 7 8 9  1  2  3  4  5  6</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addDigits</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Math </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#371 Sum of Two Integers - in Swift]]></title>
      <url>/leetcode-371/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p>
<p>實現加法但不使用 + 或 - 。</p>
<p>Example:<br>Given a = 1 and b = 2, return 3.</p>
<h1 id="第一次解題"><a href="#第一次解題" class="headerlink" title="第一次解題"></a>第一次解題</h1><p>加法可以用 XOR (^) 來取得， 而進位可以透過 AND (&amp;) 取得。</p>
<p>如果 a 和 b 的二進制沒有 bits 在相同位置那就可以透過 ^ 直接取得相加值。<br>例如 1(0001) ^ 4(0100) =  5(0101)<br>例如 8(1000) ^ 7(0111) =  15(1111)</p>
<p>那如果要對有相同位置的兩個 a 和 b 操作加法，就必須要用到 &amp; 。<br>&amp; 能夠給我們 a 和 b 所有的進位 bits 。</p>
<p>例如 5(0101) &amp; 9(1001) = 1(0001)<br>例如 1(0001) &amp; 5(0101) = 1(0001)</p>
<p>所以我們先算出 (a &amp; b) &lt;&lt; 1 並且將它加進 a ^ b 中。</p>
<p>以 12 + 14 為例 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">12</span> (<span class="number">01100</span>) &amp; <span class="number">14</span> (<span class="number">01110</span>) &lt;&lt; <span class="number">1</span> = <span class="number">12</span> (<span class="number">01100</span>) &lt;&lt; <span class="number">1</span> = <span class="number">24</span> (<span class="number">11000</span>)</div><div class="line"><span class="number">12</span> (<span class="number">01100</span>) ^ <span class="number">14</span> (<span class="number">01110</span>) = <span class="number">2</span> (<span class="number">00010</span>)</div><div class="line"><span class="number">2</span> (<span class="number">00010</span>) ^ <span class="number">24</span> (<span class="number">11000</span>) = <span class="number">26</span> (<span class="number">11010</span>)</div></pre></td></tr></table></figure></p>
<p>以 60 + 40 為例 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="number">60</span> &amp; <span class="number">40</span>) &lt;&lt; <span class="number">1</span> = <span class="number">80</span>  <span class="comment">// (0111100 &amp; 0101000) &lt;&lt; 1 = 0101000 &lt;&lt; 1 = 1010000</span></div><div class="line"><span class="number">60</span> ^ <span class="number">40</span> = <span class="number">20</span> <span class="comment">// 0111100 ^ 0101000 = 0010100</span></div><div class="line"></div><div class="line"></div><div class="line">(<span class="number">20</span> &amp; <span class="number">80</span>) &lt;&lt; <span class="number">1</span> = <span class="number">32</span> <span class="comment">// (0010100 &amp; 1010000) &lt;&lt; 1 = 0010000 &lt;&lt; 1 = 0100000</span></div><div class="line"><span class="number">20</span> ^ <span class="number">80</span> = <span class="number">68</span> <span class="comment">// 0010100 ^ 1010000 = 1000100</span></div><div class="line"></div><div class="line"></div><div class="line">(<span class="number">68</span> &amp; <span class="number">32</span>) &lt;&lt; <span class="number">1</span> = <span class="number">0</span> <span class="comment">// (1000100 &amp; 0100000) &lt;&lt; 1 = 0000000 &lt;&lt; 1 = 0000000</span></div><div class="line"><span class="number">68</span> ^ <span class="number">32</span> = <span class="number">100</span> <span class="comment">// 1000100 ^ 0100000 = 1100100</span></div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> a = a</div><div class="line">    <span class="keyword">var</span> b = b</div><div class="line">    <span class="keyword">while</span> b != <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">let</span> carry = a &amp; b</div><div class="line">        a ^= b</div><div class="line">        b = carry &lt;&lt; <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Recursive-Solution"><a href="#Recursive-Solution" class="headerlink" title="Recursive Solution"></a>Recursive Solution</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> result = a ^ b</div><div class="line">    <span class="keyword">let</span> carry = (a &amp; b) &lt;&lt; <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> carry != <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> getSum(result, carry)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="One-Line-Solution"><a href="#One-Line-Solution" class="headerlink" title="One Line Solution"></a>One Line Solution</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> b==<span class="number">0</span> ? a : getSum(a ^ b, (a &amp; b) &lt;&lt; <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我到底.. 在寫啥小..</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#653 Two Sum IV - Input is a BST - in Swift]]></title>
      <url>/leetcode-653/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>
<p>給一個二元樹和目標值，找出二元搜尋樹任意存在的兩個節點，若相加可以等於目標值返回 true 。</p>
<p>Example 1:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">5</span></div><div class="line">      / \</div><div class="line">     <span class="number">3</span>   <span class="number">6</span></div><div class="line">    / \   \</div><div class="line">   <span class="number">2</span>   <span class="number">4</span>   <span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">Target</span> = <span class="number">9</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">5</span></div><div class="line">      / \</div><div class="line">     <span class="number">3</span>   <span class="number">6</span></div><div class="line">    / \   \</div><div class="line">   <span class="number">2</span>   <span class="number">4</span>   <span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">Target</span> = <span class="number">28</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure>
<h1 id="第一次解題-456-ms"><a href="#第一次解題-456-ms" class="headerlink" title="第一次解題 : 456 ms"></a>第一次解題 : 456 ms</h1><p>將節點依序加入陣列中，並且在每次加入的同時，查看是否有跟目標值相減可求得的答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTarget</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> list = [<span class="type">Int</span>]()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">judge</span><span class="params">(<span class="number">_</span> node: TreeNode?, <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> list.<span class="built_in">contains</span>(k - node.val) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        list.append(node.val)</div><div class="line">        <span class="keyword">return</span> judge(node.<span class="keyword">left</span>, k) || judge(node.<span class="keyword">right</span>, k)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> judge(root, k)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Best-Solution"><a href="#Best-Solution" class="headerlink" title="Best Solution"></a>Best Solution</h1><p>依照 BST 的特性將節點由小到大加入到陣列中。<br>接著再用迴圈來搜尋是否有 target 的解。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTarget</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> numbers = [<span class="type">Int</span>]()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        inOrder(root.<span class="keyword">left</span>)</div><div class="line">        numbers.append(root.val)</div><div class="line">        inOrder(root.<span class="keyword">right</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    inOrder(root)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> j = numbers.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> i &lt; j &#123;</div><div class="line">        <span class="keyword">if</span> numbers[i] + numbers[j] == k &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> numbers[i] + numbers[j] &lt; k &#123;</div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            j -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#448 Find All Numbers Disappeared in an Array - in Swift]]></title>
      <url>/leetcode-448/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.<br>Find all the elements of [1, n] inclusive that do not appear in this array.<br>Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.</p>
<p>給一個整數陣列，範圍介在 1 ≤ a[i] ≤ n ( n 代表陣列長度)，注意有的元素可能出現兩次有一只有一次。<br>尋找陣列中有哪幾個數字不見了。 請在 O(n) 時間內算出。</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">[<span class="number">5</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure></p>
<p>[4,3,2,7,8,2,3,1] 有 8 個元素，應該要包含 [1,2,3,4,5,6,7,8] 。<br>可是缺少了 [5,6] 。</p>
<h1 id="第一次解題-Wrong-Answer"><a href="#第一次解題-Wrong-Answer" class="headerlink" title="第一次解題 : Wrong Answer"></a>第一次解題 : Wrong Answer</h1><p>第一次理解錯題目了，以為是 n 是指陣列中最大的那個數字，<br>雖然 [4,3,2,7,8,2,3,1] 可行， 但 [1,1] 就錯了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="built_in">max</span> = nums.<span class="built_in">max</span>() <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> result = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="built_in">max</span> &#123;</div><div class="line">        <span class="keyword">if</span> !nums.<span class="built_in">contains</span>(i) &#123;</div><div class="line">            result.append(i)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第二次解題-Time-Limit-Exceeded"><a href="#第二次解題-Time-Limit-Exceeded" class="headerlink" title="第二次解題 : Time Limit Exceeded"></a>第二次解題 : Time Limit Exceeded</h1><p>用 contains 函數可能太耗時間了，所以沒過。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">if</span> nums.isEmpty &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    <span class="keyword">var</span> result = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> !nums.<span class="built_in">contains</span>(i) &#123;</div><div class="line">            result.append(i)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第三次解題-169-ms"><a href="#第三次解題-169-ms" class="headerlink" title="第三次解題 : 169 ms"></a>第三次解題 : 169 ms</h1><p>對每一個數字應該在的位子標記成 <code>負數</code> ， 以 [4,3,2,7,8,2,3,1] 為例 :</p>
<ul>
<li>第一個迴圈的意思 :<br>4 應該在陣列中第三個位子， 所以 nums[abs(nums[0]) -1] = nums[3]<br>把 nums[3] 標註成負數 nums[val] = -nums[val]<br>如果該數字已經標註成負數，就跳過。</li>
</ul>
<ul>
<li>第二個迴圈的意思 :<br>現在你已經有了新的陣列 -&gt; [-4,-3,-2,-7,8,2,-3,-1]<br>就可以知道 [8,2] 的位子沒有變成負數，也就是陣列中第五個跟第六個是缺少的。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findDisappearedNumbers</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> nums = nums</div><div class="line">    <span class="keyword">var</span> result = [<span class="type">Int</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">let</span> val = <span class="built_in">abs</span>(nums[i]) - <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> nums[val] &gt; <span class="number">0</span> &#123;</div><div class="line">            nums[val] = -nums[val]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123;</div><div class="line">            result.append(i + <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#226 Invert Binary Tree - in Swift]]></title>
      <url>/leetcode-226/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Invert a binary tree.</p>
<p>翻轉二元樹。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     4</div><div class="line">   /   \</div><div class="line">  2     7</div><div class="line"> / \   / \</div><div class="line">1   3 6   9</div></pre></td></tr></table></figure>
<p>to</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     4</div><div class="line">   /   \</div><div class="line">  7     2</div><div class="line"> / \   / \</div><div class="line">9   6 3   1</div></pre></td></tr></table></figure>
<h1 id="Trivia"><a href="#Trivia" class="headerlink" title="Trivia"></a>Trivia</h1><p>This problem was inspired by this original tweet by Max Howell:</p>
<p>Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>
<p>Homebrew 的開發者 Max Howell 在<a href="https://twitter.com/mxcl/status/608682016205344768" target="_blank" rel="external">推特發文</a> :<br>Google: 雖然我們 90% 工程師都在用你寫的軟體（Homebrew），但你不能在白板上反轉二元樹，所以滾蛋。</p>
<h1 id="第一次解題-19-ms"><a href="#第一次解題-19-ms" class="headerlink" title="第一次解題 : 19 ms"></a>第一次解題 : 19 ms</h1><p>把每層的左右換邊就好<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">4</span></div><div class="line">   /   \</div><div class="line">  <span class="number">2</span>     <span class="number">7</span></div><div class="line"> / \   / \</div><div class="line"><span class="number">1</span>   <span class="number">3</span> <span class="number">6</span>   <span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>第一次轉節點 2 跟 7</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">4</span></div><div class="line">   /   \</div><div class="line">  <span class="number">7</span>     <span class="number">2</span></div><div class="line"> / \   / \</div><div class="line"><span class="number">6</span>   <span class="number">9</span> <span class="number">1</span>   <span class="number">3</span></div></pre></td></tr></table></figure>
<p>第二次轉 6 9</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">4</span></div><div class="line">   /   \</div><div class="line">  <span class="number">7</span>     <span class="number">2</span></div><div class="line"> / \   / \</div><div class="line"><span class="number">9</span>   <span class="number">6</span> <span class="number">1</span>   <span class="number">3</span></div></pre></td></tr></table></figure>
<p>第三次轉 1 3</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">4</span></div><div class="line">   /   \</div><div class="line">  <span class="number">7</span>     <span class="number">2</span></div><div class="line"> / \   / \</div><div class="line"><span class="number">9</span>   <span class="number">6</span> <span class="number">3</span>   <span class="number">1</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">TreeNode</span>? &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> temp = root.<span class="keyword">left</span></div><div class="line">    root.<span class="keyword">left</span> = root.<span class="keyword">right</span></div><div class="line">    root.<span class="keyword">right</span> = temp</div><div class="line">    </div><div class="line">    invertTree(root.<span class="keyword">left</span>)</div><div class="line">    invertTree(root.<span class="keyword">right</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> root</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#520 Detect Capital - in Swift]]></title>
      <url>/leetcode-520/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a word, you need to judge whether the usage of capitals in it is right or not.</p>
<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>
<p>1.All letters in this word are capitals, like “USA”.<br>2.All letters in this word are not capitals, like “leetcode”.<br>3.Only the first letter in this word is capital if it has more than one letter, like “Google”.</p>
<p>Otherwise, we define that this word doesn’t use capitals in a right way.</p>
<p>給一個單字，確認寫法是否正確。</p>
<p>驗證規則:</p>
<ol>
<li>所有單字都是大寫，像 “USA”</li>
<li>所有單字都非大寫，像 “leetcode”</li>
<li>除了第一個字大寫，其他皆為小寫，像 “Google”</li>
</ol>
<p>符合規則便輸出 true ，不符合便輸出 false。</p>
<p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: &quot;USA&quot;</div><div class="line">Output: True</div></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: &quot;FlaG&quot;</div><div class="line">Output: False</div></pre></td></tr></table></figure></p>
<h1 id="第一次解題-32-ms"><a href="#第一次解題-32-ms" class="headerlink" title="第一次解題 : 32 ms"></a>第一次解題 : 32 ms</h1><p>算出字串中大寫數量，跑過三種判斷回傳是否正確。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> word == <span class="string">""</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> used = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> cCount = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> firstCharacter = <span class="type">String</span>(word.characters.first!)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> word.characters &#123;</div><div class="line">        cCount = <span class="type">String</span>(<span class="built_in">c</span>) == <span class="type">String</span>(<span class="built_in">c</span>).uppercased() ? cCount+<span class="number">1</span> : cCount+<span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> cCount == word.characters.<span class="built_in">count</span></div><div class="line">        || cCount == <span class="number">0</span></div><div class="line">        || (cCount == <span class="number">1</span> &amp;&amp; firstCharacter == firstCharacter.uppercased()) &#123;</div><div class="line">        used = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> used</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Other-Solution-1"><a href="#Other-Solution-1" class="headerlink" title="Other Solution 1"></a>Other Solution 1</h1><p>用 Swift 內建函式確認三種規則</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">   <span class="keyword">return</span> word == word.capitalized || word == word.uppercased() || word == word.lowercased()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Other-Solution-2"><a href="#Other-Solution-2" class="headerlink" title="Other Solution 2"></a>Other Solution 2</h1><p>算出數量再來比較的簡化版。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> cnt = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> word.characters &#123;</div><div class="line">        <span class="keyword">if</span> <span class="string">"Z"</span> &gt;= <span class="type">String</span>(<span class="built_in">c</span>) &#123;</div><div class="line">            cnt += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cnt == <span class="number">0</span> || cnt == word.characters.<span class="built_in">count</span> ||</div><div class="line">        (cnt == <span class="number">1</span> &amp;&amp; <span class="string">"Z"</span> &gt;= word.characters.first!)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#104 Maximum Depth of Binary Tree - in Swift]]></title>
      <url>/leetcode-104/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p>找出二元樹的最大深度。</p>
<p>Example :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">3</span></div><div class="line">      / \</div><div class="line">     <span class="number">9</span>  <span class="number">20</span></div><div class="line">    / \</div><div class="line">   <span class="number">15</span>  <span class="number">7</span></div><div class="line">        \</div><div class="line">        <span class="number">10</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>從根節點 3 走到 10 的距離最長，有 4 個節點。</p>
<h1 id="第一次解題-52-ms"><a href="#第一次解題-52-ms" class="headerlink" title="第一次解題 : 52 ms"></a>第一次解題 : 52 ms</h1><p>建立一個 array 用來擺放下一步該走的節點，跟著存在的節點不斷的往下走，直到沒有節點。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> depth = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> temp = [root]</div><div class="line">    <span class="keyword">while</span> !temp.isEmpty &#123;</div><div class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> temp &#123;</div><div class="line">            temp.removeFirst()</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> node = node?.<span class="keyword">left</span> &#123;</div><div class="line">                temp.append(node)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> node = node?.<span class="keyword">right</span> &#123;</div><div class="line">                temp.append(node)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        depth += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> depth</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="number">3</span>]</div><div class="line">--- next level ---</div><div class="line">[<span class="number">9</span>, <span class="number">20</span>]</div><div class="line">[<span class="number">20</span>, <span class="number">15</span>, <span class="number">7</span>]</div><div class="line">--- next level ---</div><div class="line">[<span class="number">15</span>, <span class="number">7</span>]</div><div class="line">[<span class="number">7</span>]</div><div class="line">--- next level ---</div><div class="line">[<span class="number">10</span>]</div><div class="line">--- next level ---</div></pre></td></tr></table></figure>
<h1 id="Best-Solution-with-Recursive-Function-32-ms"><a href="#Best-Solution-with-Recursive-Function-32-ms" class="headerlink" title="Best Solution with Recursive Function : 32 ms"></a>Best Solution with Recursive Function : 32 ms</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(maxDepth(root!.<span class="keyword">left</span>), maxDepth(root!.<span class="keyword">right</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> represent the root level = <span class="number">1</span></div><div class="line"></div><div class="line">level <span class="number">2</span> -&gt; <span class="number">1</span> + <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 9, 20 ✔</span></div><div class="line"></div><div class="line">level <span class="number">3</span> -&gt; <span class="number">2</span> + <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 15, 7 ✔</span></div><div class="line">level <span class="number">3</span> -&gt; <span class="number">2</span> + <span class="built_in">max</span>(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// nothing under 20</span></div><div class="line"></div><div class="line">level <span class="number">4</span> -&gt; <span class="number">3</span> + <span class="built_in">max</span>(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// nothing under 15</span></div><div class="line">level <span class="number">4</span> -&gt; <span class="number">3</span> + <span class="built_in">max</span>(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// nil, 10 ✔ -&gt; answer = 4</span></div><div class="line"></div><div class="line">level <span class="number">5</span> -&gt; <span class="number">4</span> + <span class="built_in">max</span>(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// nothing under 10</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
            <category> Depth-first Search </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-first Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#485 Max Consecutive Ones - in Swift]]></title>
      <url>/leetcode-485/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>
<p>給一個二進位陣列，找出連續出現最多次 1 的次數。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</div><div class="line"><span class="type">Output</span>: <span class="number">3</span></div><div class="line"> </div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> first two digits or the last three digits are consecutive 1s.</div><div class="line"><span class="type">The</span> maximum number of consecutive 1s <span class="keyword">is</span> <span class="number">3</span>.</div></pre></td></tr></table></figure></p>
<p>前面兩個數字跟最後三個數字都是連續的 1 。 最長的是後面的 3 次。</p>
<p>Note:<br> The input array will only contain 0 and 1.<br> The length of input array is a positive integer and will not exceed 10,000</p>
<p>array 裡面只有 0 or 1 。 array 的長度不會超過 10,000 。</p>
<h1 id="第一次解題-69-ms"><a href="#第一次解題-69-ms" class="headerlink" title="第一次解題 : 69 ms"></a>第一次解題 : 69 ms</h1><p>定義一個 counter 計算累積了幾次重複的 1<br>遇到 0 時就把 counter 歸零，放到 result 中<br>如果 counter &gt; result 就將 result 更新</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> counter = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        counter += num == <span class="number">1</span> ? num : <span class="number">0</span></div><div class="line">        counter = num == <span class="number">0</span> ? <span class="number">0</span>: counter</div><div class="line">        result = counter &lt; result ? result : counter</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="One-Line-Solution"><a href="#One-Line-Solution" class="headerlink" title="One Line Solution"></a>One Line Solution</h1><p>我還以為我的算法很簡潔了，還有更厲害的。<br>將陣列透過 0 切成不同的 1s 陣列，用 reduce 的方式不斷比較出最高次數的陣列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> nums.<span class="built_in">split</span>(separator: <span class="number">0</span>).<span class="built_in">reduce</span>(<span class="number">0</span>)&#123; <span class="built_in">max</span>($<span class="number">0</span>, $<span class="number">1</span>.<span class="built_in">count</span>)&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">findMaxConsecutiveOnes([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="built_in">split</span> -&gt; <span class="built_in">count</span> (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="built_in">reduce</span> -&gt; (<span class="number">0</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">reduce</span> -&gt; (<span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="built_in">reduce</span> -&gt; (<span class="number">5</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#136 Single Number - in Swift]]></title>
      <url>/leetcode-136/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>給一串整數陣列，每個元素皆會出現兩次，只有一個元素不會。找出那一個元素。</p>
<p>Example:<br> Input: [1,1,2,3,3,6,6]<br> Output: 2</p>
<p>1, 3, 6 皆有重複出現，唯有 2 只出現一次。</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p>你的演算法必須設定在 O(n) 時間內完成</p>
<h1 id="第一次解題-Time-Limit-Exceeded"><a href="#第一次解題-Time-Limit-Exceeded" class="headerlink" title="第一次解題 : Time Limit Exceeded"></a>第一次解題 : Time Limit Exceeded</h1><p>手癢用 for + filter 的組合去找出 count 小於 2 次的數字。<br>但想想給了 Time Limit Exceeded 也是摸雞籠的事。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        <span class="keyword">if</span> (nums.<span class="built_in">filter</span> &#123; $<span class="number">0</span> == num &#125;).<span class="built_in">count</span> &lt; <span class="number">2</span> &#123;</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第二次解題-25-ms"><a href="#第二次解題-25-ms" class="headerlink" title="第二次解題 : 25 ms"></a>第二次解題 : 25 ms</h1><p>偷看到可以用 XOR 解題<br>因為已經知道相同數字經過 XOR 運算後會等於 0 ，<br>並且 XOR 運算是符合<code>交換律</code>的。</p>
<p>XOR 交換律 :<br> 101 ^ 101 ^ 010 =<br> 000 ^ 010 =<br> 010</p>
<p> 101 ^ 010 ^ 101 =<br> 111 ^ 101 =<br> 010</p>
<p>也就是 1 ^ 1 = 0  -&gt;<br>1 ^ 1 ^ 2 = 2<br>就算順序不同也會出現相同答案 : 1 ^ 2 ^ 1 = 2</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        result ^= num</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#521 Longest Uncommon Subsequence I - in Swift]]></title>
      <url>/leetcode-521/</url>
      <content type="html"><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>這應該是個愚人節題目。</p>
<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.</p>
<p>A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>
<p>The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>
<p>給兩個字串，你必須在兩個字串中找出 longest uncommon subsequence (最長的不同字元序列 ? 考我英文 ?)， 這個序列代表的是一個「全新、不同於另一個字串所擁有的字元序列」。</p>
<p>一個字元序列可以從其他的字串衍生而來，舉一般例子，任何字串都可以是自己的字元序列，而空白也可以是任何字串的字元序列。</p>
<p>輸入兩個字串，輸出一個最長的不同字元序列，如果不存在最長的不同字元序列，那就輸出 -1 。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"aba"</span>, <span class="string">"cdc"</span></div><div class="line"><span class="type">Output</span>: <span class="number">3</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">The</span> longest uncommon subsequence <span class="keyword">is</span> <span class="string">"aba"</span> (or <span class="string">"cdc"</span>),</div><div class="line">because <span class="string">"aba"</span> <span class="keyword">is</span> a subsequence of <span class="string">"aba"</span>,</div><div class="line">but not a subsequence of any other strings <span class="keyword">in</span> the group of two strings.</div></pre></td></tr></table></figure></p>
<p>在這個範例中，最長的不同字元序列可以是 “aba” 或是 “cdc”<br>因為 “aba” 是 “aba” 的字元序列<br>但不是任何其他字串的字元序列</p>
<h1 id="第一次解題-15-ms"><a href="#第一次解題-15-ms" class="headerlink" title="第一次解題 : 15 ms"></a>第一次解題 : 15 ms</h1><p>這純粹是一題考我英文的題目<br><img src="/leetcode-521/question.jpg" width="200"><br>因為只有兩個字串相同時，會發生不存在不同字元序列。<br>其他時間只要列出最長的那個字串的長度就行了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLUSlength</span><span class="params">(<span class="number">_</span> a: String, <span class="number">_</span> b: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a == b ? -<span class="number">1</span> : <span class="built_in">max</span>(a.characters.<span class="built_in">count</span>, b.characters.<span class="built_in">count</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#292 Nim Game - in Swift]]></title>
      <url>/leetcode-292/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>
<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>
<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p>
<p>你正在跟朋友玩一個遊戲叫 Nim Game ，桌上有好多個石頭，每個人輪流拿掉 1-3 個石頭，最後拿掉全部石頭的人即可獲勝。現在這個遊戲皆是由你先開始。</p>
<p>假設你跟你的朋友都很屌很有策略，不會錯失任何贏的機會。寫一個函式去判斷當石頭是 x 個的時候，你是否會贏得這次的比賽。</p>
<p>舉例來說，如果桌上有 4 個石頭，你先攻。那你永遠都不會贏。因為不管你第一步移走 1, 2, 3個石頭，最後一個一定是你朋友拿走。</p>
<h1 id="第一次解題-16-ms"><a href="#第一次解題-16-ms" class="headerlink" title="第一次解題 : 16 ms"></a>第一次解題 : 16 ms</h1><ol>
<li><p>可以發現，當最後石頭剩下 4 個的時候，不管你拿幾個石頭，最後一個一定是你的朋友拿走。</p>
</li>
<li><p>所以剩 4 個的時候拿的人都會輸。</p>
</li>
<li><p>把石頭數量翻倍， 4 &lt; n &lt; 8 ，也就是當 n = 5, 6, 7 時，可以發現都能夠把 死亡數字 4 留給對方。</p>
</li>
<li><p>但是到 8 的時候，就變成對方能把死亡數字 4 給你了。</p>
</li>
<li><p>所以 8 也是死亡數字。</p>
</li>
<li><p>把石頭 * 3倍， 8 &lt; n &lt; 12 ，當 n = 9, 10, 11 ，都可以把 8 做球給對方，所以都會贏</p>
</li>
<li><p>以此類推，當 n % 4 == 0 時， 你都會輸。</p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">canWinNim</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> n % <span class="number">4</span> != <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這根本不是程式題目，是數學。<br>(／‵Д′)／~ ╧╧</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Brainteaser </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Brainteaser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#637 Average of Levels in Binary Tree - in Swift]]></title>
      <url>/leetcode-637/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.</p>
<p>給一個不為空的二元樹，請求出這個二元樹每一層的平均值。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">     <span class="number">3</span></div><div class="line">    / \</div><div class="line">   <span class="number">9</span>  <span class="number">20</span></div><div class="line">      / \</div><div class="line">     <span class="number">15</span>  <span class="number">7</span></div><div class="line"> </div><div class="line"><span class="type">Output</span>: [<span class="number">3</span>, <span class="number">14.5</span>, <span class="number">11</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"> <span class="type">The</span> average value of nodes on level <span class="number">0</span> <span class="keyword">is</span> <span class="number">3</span>,  on level <span class="number">1</span> <span class="keyword">is</span> <span class="number">14.5</span>, and on level <span class="number">2</span> <span class="keyword">is</span> <span class="number">11</span>. <span class="type">Hence</span> <span class="keyword">return</span> [<span class="number">3</span>, <span class="number">14.5</span>, <span class="number">11</span>].</div></pre></td></tr></table></figure></p>
<p>第 0 層平均值是 3 ， 第 1 層平均值是 (9+20)/2 = 14.5 ， 第 2 層是 11 。<br> 所以返回 [3, 14.5, 11] 。</p>
<h1 id="第一次解題"><a href="#第一次解題" class="headerlink" title="第一次解題"></a>第一次解題</h1><p>假設二元樹長成這樣 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">3</span></div><div class="line">   / \</div><div class="line">  <span class="number">9</span>  <span class="number">20</span></div><div class="line"> / \</div><div class="line"><span class="number">15</span>  <span class="number">7</span></div></pre></td></tr></table></figure></p>
<p>這一題要用<a href="https://goo.gl/WuKxn1" target="_blank" rel="external">廣度優先搜索算法 (Breadth-First-Search，BFS)</a> 下去演算。<br>跟<a href="https://goo.gl/ZPk1Ek" target="_blank" rel="external">深度優先搜索算法 (Depth-First-Search，DFS)</a> 不同， BFS 會去找出每層的節點，層層找下去。</p>
<p>所以建立一個 TreeNode 的陣列。<br>當陣列不為空時，迴圈該層的節點，刪除每個節點後，計算加總以及是否要加入該節點底下的節點進到陣列。</p>
<ul>
<li><p>第一層</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">queue = [<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="number">0</span>..&lt;<span class="number">1</span> &#123;</div><div class="line">	node = <span class="number">3</span></div><div class="line">	queue = [] <span class="comment">// 刪掉 3</span></div><div class="line">	sum = <span class="number">3</span></div><div class="line">	queue = [<span class="number">9</span>, <span class="number">20</span>] <span class="comment">// 3 的底下</span></div><div class="line">&#125;</div><div class="line">average = <span class="number">3</span> / <span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>第二層</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">queue = [<span class="number">9</span>, <span class="number">20</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="number">0</span>..&lt;<span class="number">2</span> &#123;</div><div class="line">	node = <span class="number">9</span></div><div class="line">	queue = [<span class="number">20</span>] <span class="comment">// 刪掉 9</span></div><div class="line">	sum = <span class="number">9</span></div><div class="line">	queue = [<span class="number">20</span>, <span class="number">15</span>, <span class="number">7</span>] <span class="comment">// 9 的底下</span></div><div class="line"></div><div class="line">	---</div><div class="line"></div><div class="line">	node = <span class="number">20</span></div><div class="line">	queue = [<span class="number">15</span>, <span class="number">7</span>] <span class="comment">// 刪掉 20</span></div><div class="line">	sum = <span class="number">9</span> + <span class="number">20</span></div><div class="line">	queue = [<span class="number">15</span>, <span class="number">7</span>] <span class="comment">// 15 的底下沒有東西</span></div><div class="line">&#125;</div><div class="line">average = <span class="number">29</span> / <span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>第三層</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">queue = [<span class="number">15</span>, <span class="number">7</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="number">0</span>..&lt;<span class="number">2</span> &#123;</div><div class="line">	node = <span class="number">15</span></div><div class="line">	queue = [<span class="number">7</span>] <span class="comment">// 刪掉 15</span></div><div class="line">	sum = <span class="number">15</span></div><div class="line">	queue = [<span class="number">7</span>] <span class="comment">// 15 底下沒東西</span></div><div class="line"></div><div class="line">	---</div><div class="line"></div><div class="line">	node = <span class="number">7</span></div><div class="line">	queue = [] <span class="comment">// 刪掉 7</span></div><div class="line">	sum = <span class="number">15</span> + <span class="number">7</span></div><div class="line">	queue = [] <span class="comment">// 7 底下沒東西</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>跳出 while 迴圈</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">averageOfLevels</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Double</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result = [<span class="type">Double</span>]()</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> queue = [root]</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> !queue.isEmpty &#123;</div><div class="line">        <span class="keyword">let</span> n = queue.<span class="built_in">count</span></div><div class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</div><div class="line">            <span class="keyword">let</span> node = queue.removeFirst()</div><div class="line">            sum += node.val</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> &#123;</div><div class="line">                queue.append(<span class="keyword">left</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> &#123;</div><div class="line">                queue.append(<span class="keyword">right</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> average = <span class="type">Double</span>(sum) / <span class="type">Double</span>(n)</div><div class="line">        result.append(average)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#496 Next Greater Element I - in Swift]]></title>
      <url>/leetcode-496/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1’s elements in the corresponding places of nums2.</p>
<p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.</p>
<p>給兩個沒有重複元素的陣列 <code>nums1</code> &amp; <code>nums2</code> ，其中 <code>nums1</code> 是 <code>nums2</code>的子集。</p>
<p>找出 <code>nums1</code> 對應於 <code>nums2</code> 的 next greater number ?_?</p>
<p>如果找到了，就把 <code>nums2</code> 對應的 next greater number 覆蓋回 <code>nums1</code> 原來的位子，如果找不到就覆蓋 <code>-1</code> 回去。</p>
<p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="type">Input</span>: nums1 = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>], nums2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>].</div><div class="line"> <span class="type">Output</span>: [-<span class="number">1</span>,<span class="number">3</span>,-<span class="number">1</span>]</div><div class="line"> </div><div class="line"><span class="type">Explanation</span>:</div><div class="line"> <span class="type">For</span> number <span class="number">4</span> <span class="keyword">in</span> the first array, you cannot <span class="built_in">find</span> the next greater number <span class="keyword">for</span> it <span class="keyword">in</span> the second array, so output -<span class="number">1</span>.</div><div class="line"> <span class="type">For</span> number <span class="number">1</span> <span class="keyword">in</span> the first array, the next greater number <span class="keyword">for</span> it <span class="keyword">in</span> the second array <span class="keyword">is</span> <span class="number">3</span>.</div><div class="line"> <span class="type">For</span> number <span class="number">2</span> <span class="keyword">in</span> the first array, there <span class="keyword">is</span> no next greater number <span class="keyword">for</span> it <span class="keyword">in</span> the second array, so output -<span class="number">1</span>.</div></pre></td></tr></table></figure></p>
<p>nums1 的 4 在 nums2 找不到比 4 更大的數。所以回傳 -1 回去 nums1 的第一個位子。<br>nums1 的 1 在 nums2 往右找找到 3 比他大。所以回傳 3 回去 nums1 的第二個位子。<br>nums1 的 2 在 nums2 的第四個位子，他的右邊沒人，沒辦法再往右找了。所以回傳 -1 回去 nums1 的第三個位子。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="type">Input</span>: nums1 = [<span class="number">2</span>,<span class="number">4</span>], nums2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].</div><div class="line"> <span class="type">Output</span>: [<span class="number">3</span>,-<span class="number">1</span>]</div><div class="line"> </div><div class="line"><span class="type">Explanation</span>:</div><div class="line"> <span class="type">For</span> number <span class="number">2</span> <span class="keyword">in</span> the first array, the next greater number <span class="keyword">for</span> it <span class="keyword">in</span> the second array <span class="keyword">is</span> <span class="number">3</span>.</div><div class="line"> <span class="type">For</span> number <span class="number">4</span> <span class="keyword">in</span> the first array, there <span class="keyword">is</span> no next greater number <span class="keyword">for</span> it <span class="keyword">in</span> the second array, so output -<span class="number">1</span>.</div></pre></td></tr></table></figure></p>
<p>nums1 的 2 在 nums2 往右找找到 3 比他大。所以回傳 3 回去 nums1 的第一個位子。<br>nums1 的 4 在 nums2 的第四個位子，他的右邊沒人，沒辦法再往右找了。所以回傳 -1 回去 nums1 的第二個位子。</p>
<h1 id="第一次解題-Wrong-Answer"><a href="#第一次解題-Wrong-Answer" class="headerlink" title="第一次解題 : Wrong Answer"></a>第一次解題 : Wrong Answer</h1><p>第一次完全理解錯題目。以為是要比較該數字在陣列2的右邊數字。<br>結果不是比較右邊的，是往右一直尋遍找出有無比原數字大的數字。<br>第一個找出來的數字即是回傳值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="number">_</span> findNums: [Int], <span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> findNums &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> next = nums.index(of: num), next + <span class="number">1</span> &lt; nums.<span class="built_in">count</span> &#123;</div><div class="line">            result.append(num &lt; nums[next + <span class="number">1</span>] ? nums[next + <span class="number">1</span>] : -<span class="number">1</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result.append(-<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第二次解題-299-ms"><a href="#第二次解題-299-ms" class="headerlink" title="第二次解題 : 299 ms"></a>第二次解題 : 299 ms</h1><p>先給最右邊的數字，返回 -1<br>不為最右邊的數字，開始從下一個位子找到最後，找出where num &lt; nums[i]的值<br>跳出迴圈並且賦值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="number">_</span> findNums: [Int], <span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">        <span class="keyword">var</span> result = [<span class="type">Int</span>]()</div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> findNums &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> next = nums.index(of: num), next + <span class="number">1</span> &lt; nums.<span class="built_in">count</span> &#123;</div><div class="line">                <span class="keyword">var</span> value = -<span class="number">1</span></div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> next + <span class="number">1</span>..&lt;nums.<span class="built_in">count</span> <span class="keyword">where</span> num &lt; nums[i] &#123;</div><div class="line">                    value = nums[i]</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;</div><div class="line">                result.append(value)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                result.append(-<span class="number">1</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Best-Solution-From-Java"><a href="#Best-Solution-From-Java" class="headerlink" title="Best Solution From Java"></a>Best Solution From Java</h1><p>看到了 Java <a href="https://discuss.leetcode.com/topic/77916/java-10-lines-linear-time-complexity-o-n-with-explanation" target="_blank" rel="external">高度評論的解答</a>雖然他使用的是 Java 中才有的 Stack Class，但我還是試著理解並且轉成了 swift 。</p>
<p>假設 nums 為 [6,5,4,3,2,1,7]， 那就可以知道全部數字的 greater number 是 6<br>先將 num 裝進 stack 中，不斷的裝進去，只要有數字 a 大於最上層的數字 b。<br>就將他加到 dict 裡 (a : b)，並且 pop 掉該數字 a 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">到 [6,5,4,3,2,1] 的時候都還沒觸發 while 內的事件。</div><div class="line">7 出現後比對 1 -&gt; dict[1:7] , stack -&gt; [6,5,4,3,2]</div><div class="line">比對 2 -&gt; dict[1:7, 2:7] , stack -&gt; [6,5,4,3]</div><div class="line">比對 3 -&gt; dict[1:7, 2:7, 3:7] , stack -&gt; [6,5,4]</div><div class="line">最後 dict[1:7, 2:7, 3:7, 4:7, 5:7, 6:7] , stack -&gt; [7]</div></pre></td></tr></table></figure>
<p>最後將 findNums [1,3,5,2,4] 遍尋一遍， 只要數字在 dict 裡面有存在 greater number 的就替換掉，不存在就換成 -1 。<br>發現在 dict 中都可以找到，所以回傳 [7,7,7,7,7]</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextGreaterElement</span><span class="params">(<span class="number">_</span> findNums: [Int], <span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result = findNums</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> stack = [<span class="type">Int</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        <span class="keyword">while</span> !stack.isEmpty &amp;&amp; stack.last! &lt; num &#123;</div><div class="line">            dict[stack.popLast()!] = num</div><div class="line">        &#125;</div><div class="line">        stack.append(num)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;findNums.<span class="built_in">count</span> &#123;</div><div class="line">        result[i] = dict[result[i]] ?? -<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡ </p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Stack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#463 Island Perimeter - in Swift]]></title>
      <url>/leetcode-463/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.<br>Grid cells are connected horizontally/vertically (not diagonally).<br>The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).<br>The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island).<br>One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p>
<p>有一張小島的二維地圖， 1 代表土地， 0 代表海水。<br>方塊只有縱橫連接，沒有對角連接。<br>土地是被海水包圍成一座小島的，在這張地圖上只有一個小島，且小島是沒有湖的。<br>每個方塊的邊長皆為 1 ，地圖是方形長寬不會超過 100 ，請求出小島的周長。</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[0,1,0,0],</div><div class="line">[1,1,1,0],</div><div class="line">[0,1,0,0],</div><div class="line">[1,1,0,0]]</div></pre></td></tr></table></figure></p>
<p>Answer: 16<br> Explanation: The perimeter is the 16 yellow stripes in the image below:</p>
<p>16條黃色圍起來的就是小島的周長。</p>
<p> <img src="/leetcode-463/island.png" alt="island"></p>
<h1 id="第一次解題-Wrong-Answer"><a href="#第一次解題-Wrong-Answer" class="headerlink" title="第一次解題 : Wrong Answer"></a>第一次解題 : Wrong Answer</h1><p><img src="/leetcode-463/island_commentary.png" alt="island-Commentary"></p>
<p>可以發現 :<br>1.如果土地在第一行或最後一行的時候，該行的土地都要邊長 + 1<br>2.如果土地在第一列或最後一列的時候，該列的土地都要邊長 + 1<br>3.接下來找如果不在第一行時，上面的鄰居是土地時，邊長 + 1<br>4.如果不在最後一行時，下面的鄰居是土地時，邊長 + 1<br>5.接下來找如果不在第一列時，左邊的鄰居是土地時，邊長 + 1<br>6.如果不在最後一列時，右邊的鄰居是土地時，邊長 + 1</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">islandPerimeter</span><span class="params">(<span class="number">_</span> grid: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;grid.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;grid[i].<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">var</span> cellR = <span class="number">0</span></div><div class="line">            <span class="keyword">let</span> cell = grid[i][j]</div><div class="line">            <span class="keyword">if</span> cell == <span class="number">1</span> &#123;</div><div class="line">				cellR = (i == <span class="number">0</span> || i == grid.<span class="built_in">count</span> - <span class="number">1</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">				cellR = (j == <span class="number">0</span> || j == grid[i].<span class="built_in">count</span> - <span class="number">1</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">     </div><div class="line">                <span class="keyword">if</span> i != <span class="number">0</span> &#123;</div><div class="line">                    cellR = (grid[i-<span class="number">1</span>][j] == <span class="number">0</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> i != grid.<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">                    cellR = (grid[i+<span class="number">1</span>][j] == <span class="number">0</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> j != <span class="number">0</span> &#123;</div><div class="line">                    cellR = (grid[i][j-<span class="number">1</span>] == <span class="number">0</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> j != grid[i].<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">                    cellR = (grid[i][j+<span class="number">1</span>] == <span class="number">0</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">                &#125;</div><div class="line">                result += cellR</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第二次解題-328-ms"><a href="#第二次解題-328-ms" class="headerlink" title="第二次解題 : 328 ms"></a>第二次解題 : 328 ms</h1><p>第一次交答案的時候錯了，原來 [[1]] 也算一個地圖的一座島</p>
<p>所以下面兩個敘述是錯的 :<br>1.如果土地在第一行或最後一行的時候，該行的土地都要邊長 + 1<br>2.如果土地在第一列或最後一列的時候，該列的土地都要邊長 + 1</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cellR = (i == <span class="number">0</span> || i == grid.<span class="built_in">count</span> - <span class="number">1</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">cellR = (j == <span class="number">0</span> || j == grid[i].<span class="built_in">count</span> - <span class="number">1</span>) ? cellR + <span class="number">1</span> : cellR</div></pre></td></tr></table></figure>
<p>應該是 :<br>1.如果土地在第一行，該行的土地都要邊長 + 1<br>2.如果土地在最後一行，該行的土地都要邊長 + 1<br>3.如果土地在第一列，該列的土地都要邊長 + 1<br>4.如果土地在最後一列，該列的土地都要邊長 + 1</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cellR = (i == <span class="number">0</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">cellR = (i == grid.<span class="built_in">count</span> - <span class="number">1</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line"></div><div class="line">cellR = (j == <span class="number">0</span>) ? cellR + <span class="number">1</span> : cellR</div><div class="line">cellR = (j == grid[i].<span class="built_in">count</span> - <span class="number">1</span>) ? cellR + <span class="number">1</span> : cellR</div></pre></td></tr></table></figure>
<h1 id="Cool-Soultion"><a href="#Cool-Soultion" class="headerlink" title="Cool Soultion"></a>Cool Soultion</h1><p>找出他的規律發現，只要有兩個方塊合在一起，邊長就會少 2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+--+     +--+                   +--+--+</div><div class="line">|  |  +  |  |          -&gt;       |     |</div><div class="line">+--+     +--+                   +--+--+</div><div class="line"> </div><div class="line">4 + 4 - ? = 6  -&gt; ? = 2</div></pre></td></tr></table></figure>
<p>所以找出<code>所有方塊 * 4</code> - <code>鄰居方塊 * 2</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">islandPerimeter</span><span class="params">(<span class="number">_</span> grid: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> islands = <span class="number">0</span>, neighbors = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;grid.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;grid[i].<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</div><div class="line">                islands += <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> i &lt; grid.<span class="built_in">count</span> - <span class="number">1</span> &amp;&amp; grid[i+<span class="number">1</span>][j] == <span class="number">1</span> &#123;</div><div class="line">                    neighbors += <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> j &lt; grid[i].<span class="built_in">count</span> - <span class="number">1</span> &amp;&amp; grid[i][j+<span class="number">1</span>] == <span class="number">1</span> &#123;</div><div class="line">                    neighbors += <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> islands * <span class="number">4</span> - neighbors * <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#620 Not Boring Movies - in MySQL]]></title>
      <url>/leetcode-620/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.</p>
<p>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.</p>
<p>X City 開了一間電影院， 這間電影院給客人提供了一張海報，上面寫著每部電影的評價與評論。<br>現在請用 SQL 查出奇數的電影 ID，還有評論不為’boring’的電影，最後依評價最高到最低列出來。</p>
<p>For example, table cinema:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+---------+-----------+--------------+-----------+</div><div class="line">|   id    | movie     |  description |  rating   |</div><div class="line">+---------+-----------+--------------+-----------+</div><div class="line">|   1     | War       |   great 3D   |   8.9     |</div><div class="line">|   2     | Science   |   fiction    |   8.5     |</div><div class="line">|   3     | irish     |   boring     |   6.2     |</div><div class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</div><div class="line">|   5     | House card|   Interesting|   9.1     |</div><div class="line">+---------+-----------+--------------+-----------+</div></pre></td></tr></table></figure></p>
<p>For the example above, the output should be:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+---------+-----------+--------------+-----------+</div><div class="line">|   id    | movie     |  description |  rating   |</div><div class="line">+---------+-----------+--------------+-----------+</div><div class="line">|   5     | House card|   Interesting|   9.1     |</div><div class="line">|   1     | War       |   great 3D   |   8.9     |</div><div class="line">+---------+-----------+--------------+-----------+</div></pre></td></tr></table></figure></p>
<h1 id="第一次解題-Wrong-Answer"><a href="#第一次解題-Wrong-Answer" class="headerlink" title="第一次解題 : Wrong Answer"></a>第一次解題 : Wrong Answer</h1><p>沒看好題目就作答<br>看成最後依照 id 高到低排下來 … </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> cinema</div><div class="line"><span class="keyword">WHERE</span> description != <span class="string">'boring'</span> <span class="keyword">AND</span> (<span class="keyword">id</span>%<span class="number">2</span>) = <span class="number">1</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
<h1 id="第二次解題-256-ms"><a href="#第二次解題-256-ms" class="headerlink" title="第二次解題 : 256 ms"></a>第二次解題 : 256 ms</h1><p>嗚嗚嗚</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> cinema</div><div class="line"><span class="keyword">WHERE</span> description != <span class="string">'boring'</span> <span class="keyword">AND</span> (<span class="keyword">id</span>%<span class="number">2</span>) = <span class="number">1</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> rating <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#412 Fizz Buzz - in Swift]]></title>
      <url>/leetcode-412/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a program that outputs the string representation of numbers from 1 to n.</p>
<p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.</p>
<p>寫一個函式， 從 1 數到指定的數字， 遇到 3 就喊 Fizz ， 遇到 5 就喊 Buzz ， 那遇到 15 ..<br> 1! , 2! , Fizz! , 4! , Buzz! … 13! , 14 , FizzBuzz!</p>
<p>Example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">15</span>,</div><div class="line"></div><div class="line"><span class="type">Return</span>:</div><div class="line">[</div><div class="line">    <span class="string">"1"</span>,</div><div class="line">    <span class="string">"2"</span>,</div><div class="line">    <span class="string">"Fizz"</span>,</div><div class="line">    <span class="string">"4"</span>,</div><div class="line">    <span class="string">"Buzz"</span>,</div><div class="line">    <span class="string">"Fizz"</span>,</div><div class="line">    <span class="string">"7"</span>,</div><div class="line">    <span class="string">"8"</span>,</div><div class="line">    <span class="string">"Fizz"</span>,</div><div class="line">    <span class="string">"Buzz"</span>,</div><div class="line">    <span class="string">"11"</span>,</div><div class="line">    <span class="string">"Fizz"</span>,</div><div class="line">    <span class="string">"13"</span>,</div><div class="line">    <span class="string">"14"</span>,</div><div class="line">    <span class="string">"FizzBuzz"</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<h1 id="第一次解題-32-ms"><a href="#第一次解題-32-ms" class="headerlink" title="第一次解題 : 32 ms"></a>第一次解題 : 32 ms</h1><p>因為 3 跟 5 相乘的數遇到時因為以 15 作為最優先判斷，所以 i % 15 == 0 擺在第一個</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fizzBuzz</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">var</span> array = [<span class="type">String</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...n &#123;</div><div class="line">        <span class="keyword">if</span> i%<span class="number">15</span> == <span class="number">0</span> &#123;</div><div class="line">            array.append(<span class="string">"FizzBuzz"</span>)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span> &#123;</div><div class="line">            array.append(<span class="string">"Buzz"</span>)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span> &#123;</div><div class="line">            array.append(<span class="string">"Fizz"</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            array.append(<span class="string">"\(i)"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> array</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="更快速解法-4-ms"><a href="#更快速解法-4-ms" class="headerlink" title="更快速解法 : 4 ms"></a>更快速解法 : 4 ms</h1><p>雖然看起來更不容易讀，但因為沒有使用到 % 的運算，所以執行速度快了一些<br>每次迴圈各對 fizz 跟 buzz + 1<br>遇到判斷就轉成字串放到 array 中，把 fizz 或 buzz 歸零</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fizzBuzz</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">var</span> array = [<span class="type">String</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> fizz = <span class="number">0</span>, buzz = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...n &#123;</div><div class="line">        fizz+=<span class="number">1</span></div><div class="line">        buzz+=<span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> fizz == <span class="number">3</span> &amp;&amp; buzz == <span class="number">5</span> &#123;</div><div class="line">            array.append(<span class="string">"FizzBuzz"</span>)</div><div class="line">            fizz = <span class="number">0</span></div><div class="line">            buzz = <span class="number">0</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> fizz == <span class="number">3</span> &#123;</div><div class="line">            array.append(<span class="string">"Fizz"</span>)</div><div class="line">            fizz = <span class="number">0</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> buzz == <span class="number">5</span> &#123;</div><div class="line">            array.append(<span class="string">"Buzz"</span>)</div><div class="line">            buzz = <span class="number">0</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            array.append(<span class="string">"\(i)"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> array</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#344 Reverse String - in Swift]]></title>
      <url>/leetcode-344/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a function that takes a string as input and returns the string reversed.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">Given s = &quot;hello&quot;, return &quot;olleh&quot;.</div></pre></td></tr></table></figure>
<p>寫個函式將字串反轉過來。<br> 輸入: “hello”<br> 輸出: “olleh”</p>
<h1 id="第一次解題-229-ms"><a href="#第一次解題-229-ms" class="headerlink" title="第一次解題 : 229 ms"></a>第一次解題 : 229 ms</h1><p>純粹使用 swift 內建的 reversed 函式。 不用動腦 … ㄎㄎ</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(s.characters.reversed())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Other-Solution-1"><a href="#Other-Solution-1" class="headerlink" title="Other Solution 1"></a>Other Solution 1</h1><p>使用迴圈不斷首尾對調對調。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> stringArray = <span class="type">Array</span>(s.characters)</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> j = s.characters.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> i &lt; j &#123;</div><div class="line">        <span class="keyword">let</span> temp = stringArray[i]</div><div class="line">        stringArray[i] = stringArray[j]</div><div class="line">        stringArray[j] = temp</div><div class="line">        i+=<span class="number">1</span></div><div class="line">        j-=<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(stringArray)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Other-Solution-2"><a href="#Other-Solution-2" class="headerlink" title="Other Solution 2"></a>Other Solution 2</h1><p>從字串的最後一個字元，一直往前加入到新的字串中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> index = s.endIndex</div><div class="line">    <span class="keyword">var</span> result = <span class="string">""</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> index != s.startIndex &#123;</div><div class="line">        index = s.index(before: index)</div><div class="line">        result.append(s[index])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Two Pointers </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#575 Distribute Candies - in Swift]]></title>
      <url>/leetcode-575/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer array with <code>even</code> length, where different numbers in this array represent different <code>kinds</code> of candies.<br>Each number means one candy of the corresponding kind. You need to distribute these candies <code>equally</code> in number to brother and sister.<br>Return the maximum number of kinds of candies the sister could gain.</p>
<p>你有<code>偶數</code>顆糖果，在陣列中<code>不同數字</code>代表不同糖果。<br>現在需要把這些糖果<code>平分</code>給哥哥和妹妹，請問妹妹最多可以拿到多少不一樣的糖果 ?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Example 1:</div><div class="line"> Input: candies = [1,1,2,2,3,3]</div><div class="line"> Output: 3</div><div class="line"> Explanation:</div><div class="line"> There are three different kinds of candies (1, 2 and 3), and two candies for each kind.</div><div class="line"> Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too.</div><div class="line"> The sister has three different kinds of candies.</div></pre></td></tr></table></figure>
<p>現在有三種不同糖果 (1,2,3) ，每種各兩顆。<br>如果分成哥哥 (1,2,3) ，妹妹也 (1,2,3) ，妹妹最多可以拿到 3 種不同糖果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Example 2:</div><div class="line"> Input: candies = [1,1,2,3]</div><div class="line"> Output: 2</div><div class="line"> Explanation: For example, the sister has candies [2,3] and the brother has candies [1,1].</div><div class="line"> The sister has two different kinds of candies, the brother has only one kind of candies.</div></pre></td></tr></table></figure>
<p>如果分成哥哥 (1,1) ，妹妹 (2,3) ，妹妹最多可以拿到 2 種不同糖果。</p>
<h1 id="第一次解題-618-ms"><a href="#第一次解題-618-ms" class="headerlink" title="第一次解題 : 618 ms"></a>第一次解題 : 618 ms</h1><p>找出最多能夠分配的糖果數量 -&gt; <code>candies/2</code><br>找出所有種類的糖果 -&gt; <code>use Set remove duplicate</code></p>
<p><code>[1,2,3,4,5,6] -&gt; (6 &gt; 3) -&gt; 3</code><br>如果糖果種類比最多能夠分配的糖果數量多 -&gt; <code>return candies.count</code></p>
<p><code>[1,2,2,2,2,2] -&gt; (2 &lt; 3) -&gt; 2</code><br>如果能夠分配的糖果數量比種類多 -&gt; <code>return unique.count</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">distributeCandies</span><span class="params">(<span class="number">_</span> candies: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> maxDivided = candies.<span class="built_in">count</span> / <span class="number">2</span></div><div class="line">    <span class="keyword">let</span> unique = <span class="type">Array</span>(<span class="type">Set</span>(candies))</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> unique.<span class="built_in">count</span> &gt; maxDivided &#123;</div><div class="line">        <span class="keyword">return</span> maxDivided</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> unique.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Better-Solution-422-ms"><a href="#Better-Solution-422-ms" class="headerlink" title="Better Solution : 422 ms"></a>Better Solution : 422 ms</h1><p>建立一個 Set 將 candy 依序放入，會自動剔除重複的。<br>回傳 min(種類數量, 最多分配數量)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">distributeCandies</span><span class="params">(<span class="number">_</span> candies: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> uniqueCandies: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = []</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> candy <span class="keyword">in</span> candies &#123; uniqueCandies.insert(candy) &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(uniqueCandies.<span class="built_in">count</span>, candies.<span class="built_in">count</span> / <span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#566 Reshape the Matrix - in Swift]]></title>
      <url>/leetcode-566/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>In MATLAB, there is a very useful function called ‘reshape’, which can reshape a matrix into a new one with different size but keep its original data.</p>
<p>You’re given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.</p>
<p>The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.</p>
<p>If the ‘reshape’ operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p>
<p>將矩陣進行 ‘reshape’ 的動作，將它變成新的 Size 但卻保留原來的 data 。</p>
<p>給一個用二維陣列表示的矩陣，再輸入兩個整數，一個 r 代表新的列數 (row) ， 一個 c 代表新的行數 (column) 。</p>
<p>如果給的參數皆為正確，就輸出 ‘reshape’ 後的矩陣。相反，輸出原來矩陣。</p>
<p>Example 1:</p>
<blockquote>
<p>Input:</p>
<blockquote>
<p>nums =<br> [[1,2],<br> [3,4]]<br> r = 1, c = 4</p>
</blockquote>
<p>Output:</p>
<blockquote>
<p>[[1,2,3,4]]</p>
</blockquote>
</blockquote>
<p>Explanation:<br> The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a <code>1 * 4</code> matrix, fill it row by row by using the previous list.</p>
<p> <code>2 * 2</code> 矩陣轉為 <code>1 * 4</code> 之後， 變為 1 row 分別填入 [1,2,3,4]</p>
<p>Example 2:</p>
<blockquote>
<p>Input:</p>
<blockquote>
<p>nums =<br> [[1,2],<br> [3,4]]<br> r = 2, c = 4</p>
</blockquote>
<p>Output:</p>
<blockquote>
<p>[[1,2],<br> [3,4]]</p>
</blockquote>
</blockquote>
<p>Explanation:<br> There is no way to reshape a <code>2 * 2</code> matrix to a <code>2 * 4</code> matrix. So output the original matrix.</p>
<p><code>2 * 2</code> 矩陣不可能變成 <code>2 * 4</code> ， 所以輸出原本的矩陣 [[1,2], [3,4]]。</p>
<h1 id="第一次解題-142-ms"><a href="#第一次解題-142-ms" class="headerlink" title="第一次解題 : 142 ms"></a>第一次解題 : 142 ms</h1><p>先將原矩陣鋪成 (flat) 單個 Array， 確保 flatArray 的元素數量 = <code>R * C</code> ，否則就直接返回原矩陣。</p>
<p>使用巢狀迴圈建立每個 Row， 再對每個 Row 依序塞進位在 flatArray 的元素，最後輸出。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">matrixReshape</span><span class="params">(<span class="number">_</span> nums: [[Int]], <span class="number">_</span> r: Int, <span class="number">_</span> <span class="built_in">c</span>: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> flatarray = nums.flatMap(&#123; $<span class="number">0</span> &#125;)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> flatarray.<span class="built_in">count</span> != r*<span class="built_in">c</span> &#123;</div><div class="line">        <span class="keyword">return</span> nums</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> reshaped = [[<span class="type">Int</span>]]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;r &#123;</div><div class="line">        reshaped.append([<span class="type">Int</span>]())</div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">c</span> &#123;</div><div class="line">            reshaped[i].append(flatarray[<span class="number">0</span>])</div><div class="line">            flatarray.removeFirst()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> reshaped</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Best-Solution-56-ms"><a href="#Best-Solution-56-ms" class="headerlink" title="Best Solution : 56 ms"></a>Best Solution : 56 ms</h1><p>利用 elementArray 盛載 reshape 後每個 row 的 element 。</p>
<p>只要超過 column 數就把他裝進 resultArray 中，</p>
<p>如此下去直到填滿 resultArray 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">matrixReshape</span><span class="params">(<span class="number">_</span> nums: [[Int]], <span class="number">_</span> r: Int, <span class="number">_</span> <span class="built_in">c</span>: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> resultArray:[[<span class="type">Int</span>]] = <span class="type">Array</span>.<span class="keyword">init</span>()</div><div class="line">    <span class="keyword">var</span> elementArray:[<span class="type">Int</span>] = <span class="type">Array</span>.<span class="keyword">init</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> elementCount:<span class="type">Int</span> = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> firstArray <span class="keyword">in</span> nums</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> firstArray</div><div class="line">        &#123;</div><div class="line">            elementArray.append(val)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(elementArray.<span class="built_in">count</span>&gt;=<span class="built_in">c</span>)</div><div class="line">            &#123;</div><div class="line">                resultArray.append(elementArray)</div><div class="line">                elementArray.removeAll()</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            elementCount = elementCount+<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(elementCount != r * <span class="built_in">c</span>)</div><div class="line">    &#123;</div><div class="line">        resultArray = nums</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> resultArray</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#557 Reverse Words in a String III - in Swift]]></title>
      <url>/leetcode-557/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>
<p>給一個字串，將字串中每個單詞反轉過來，組合成一個新的字串。<br>但單詞順序還是跟原本一樣，空白位置也一樣。</p>
<p>Example 1:<br> <code>Input: &quot;Let&#39;s take LeetCode contest&quot;</code><br> <code>Output: &quot;s&#39;teL ekat edoCteeL tsetnoc&quot;</code></p>
<p>Note: In the string, each word is separated by single space and there will not be any extra space in the string.</p>
<p>在字串中，每個單詞都被單個空白給區隔開來，也不會有多的空白在字串中。</p>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><p>先將字串依 space 拆成 Array<br>對每個字做 Swift 內建的 String.characters.reversed()</p>
<p>取得反轉過的字串後， append 到答案的字串中，並且加上一個空白。<br>最後返回時，把最後一個空白清掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> <span class="built_in">split</span> = s.components(separatedBy: <span class="string">" "</span>)</div><div class="line">    <span class="keyword">var</span> reversedWords = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">split</span> &#123;</div><div class="line">        reversedWords.append(<span class="type">String</span>(s.characters.reversed()))</div><div class="line">        reversedWords.append(<span class="string">" "</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> reversedWords.substring(to: reversedWords.index(before: reversedWords.endIndex))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Best-Solution-332-ms-lt-632-ms"><a href="#Best-Solution-332-ms-lt-632-ms" class="headerlink" title="Best Solution : 332 ms &lt; 632 ms"></a>Best Solution : 332 ms &lt; 632 ms</h1><p>一樣 String 拆成 Array ，對每個拆好的 String 進行自訂的 reverseWord 函式。<br>reverse 過的字串 append 到 result 中，並且判斷迴圈還沒到最後一個的都要加一個空白。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> stringArray =  s.components(separatedBy: <span class="string">" "</span>)</div><div class="line">    <span class="keyword">var</span> result = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;stringArray.<span class="built_in">count</span> &#123;</div><div class="line">        result += reverseWord(stringArray[i])</div><div class="line">        <span class="keyword">if</span> i != stringArray.<span class="built_in">count</span> - <span class="number">1</span>  &#123;</div><div class="line">            result += <span class="string">" "</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>裡面自訂的 reverseWord 函式長得這樣 :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWord</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> arrayOfString = <span class="type">Array</span>(s.characters)</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> j = arrayOfString.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">        <span class="keyword">let</span> temp = arrayOfString[i]</div><div class="line">        arrayOfString[i] = arrayOfString[j]</div><div class="line">        arrayOfString[j] = temp</div><div class="line">        i += <span class="number">1</span></div><div class="line">        j -= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(arrayOfString)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想法是這樣的 : </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 將字串換成 array : Let's -&gt; Array(Let's)</span></div><div class="line"> </div><div class="line">  0 &lt; 4 &#123;</div><div class="line">    temp = Array[0] -&gt; "L"</div><div class="line">    </div><div class="line">    Array[0] = Array[4] -&gt; Array(set's)</div><div class="line">    Array[4] = temp -&gt; Array(set'L)</div><div class="line">    </div><div class="line">    i = 1</div><div class="line">    j = 3</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> 1 &lt; 3 &#123;</div><div class="line">    temp = Array[1] -&gt; "e"</div><div class="line"> </div><div class="line">    Array[1] = Array[3] -&gt; Array(s't's)</div><div class="line">    Array[3] = temp -&gt; Array(s'teL)</div><div class="line"> </div><div class="line">    i = 2</div><div class="line">    j = 2</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> String </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#500 Keyboard Row - in Swift]]></title>
      <url>/leetcode-500/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a List of words, return the words that can be typed using letters of alphabet on only one row’s of American keyboard like the image below.</p>
<p>給一串單詞陣列，從每一個單詞篩選出單詞全部的字母都位在鍵盤上同一行。<br>要以下方鍵盤圖片為標準 :<br><img src="/leetcode-500/keyboard.png" alt="Keyboard"></p>
<p>Example 1:<br> Input: [“Hello”, “Alaska”, “Dad”, “Peace”]<br> Output: [“Alaska”, “Dad”]</p>
<p>例如 Alaska 與 Dad 都位在 ASDFGHJKL 這行，所以就挑出來。</p>
<p>Note:<br> You may use one character in the keyboard more than once.<br> You may assume the input string will only contain letters of alphabet.</p>
<p> 假定每個字元都會用到一次以上。<br> 假定每個輸入的東西都是 a-z 字母。</p>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findWords</span><span class="params">(<span class="number">_</span> words: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> rules =  [<span class="string">"QWERTYUIOP"</span>, <span class="string">"ASDFGHJKL"</span>, <span class="string">"ZXCVBNM"</span>]</div><div class="line">    <span class="keyword">var</span> result = words</div><div class="line">    </div><div class="line">    words.forEach &#123; word <span class="keyword">in</span></div><div class="line">        <span class="comment">// 如果單詞不在規則內就把它 filter 掉</span></div><div class="line">        <span class="keyword">if</span> (checkWords(word: word.uppercased())) &#123;</div><div class="line">            result = result.<span class="built_in">filter</span> &#123; $<span class="number">0</span> != word &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// 定義 checkWords 函式確認是否該單字都在鍵盤同一行</span></div><div class="line">    <span class="comment">// true 表示該刪除， false 相反</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">checkWords</span><span class="params">(word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 使用第一個單字來判斷這個單詞應該要對應哪一個單字</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> rule = rules.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.range(of: <span class="type">String</span>(word.characters.first!)) != <span class="literal">nil</span> &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 如果單字不在該規則中，就直接返回 true</span></div><div class="line">        <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> word.characters &#123;</div><div class="line">            <span class="keyword">if</span> (rule.first!.range(of: <span class="type">String</span>(<span class="built_in">c</span>))) == <span class="literal">nil</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Best-Solution-For-Java"><a href="#Best-Solution-For-Java" class="headerlink" title="Best Solution ? For Java"></a>Best Solution ? For Java</h1><p>因為有神人使用正規式解答，但是我沒有精通，所以不知道在 Swift 要怎麼寫。。。<br>先放上 Java 的代碼，等哪天我會了再來解釋。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String[] findWords(String[] words) &#123;</div><div class="line">    <span class="keyword">return</span> Stream.of(words).filter(s -&gt; s.toLowerCase().matches(<span class="string">"[qwertyuiop]*|[asdfghjkl]*|[zxcvbnm]*"</span>)).toArray(String[]::<span class="keyword">new</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Hash Table </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#476 Number Complement - in Swift]]></title>
      <url>/leetcode-476/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>
<p>給一個正整數，算出他的二補數 (2’s complement)。 二補數就是將該數字的二進制碼全部翻轉過來。</p>
<p>Note:<br> The given integer is guaranteed to fit within the range of a 32-bit signed integer.<br> You could assume no leading zero bit in the integer’s binary representation.</p>
<p>Example 1:<br> Input: 5<br> Output: 2<br>Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</p>
<p>由於 5 的二進制是 101 ， 所以他的補數便是 010 ， 整數是 2</p>
<p>Example 2:<br> Input: 1<br> Output: 0<br> Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</p>
<p>由於 1 的二進制是 1 ， 所以他的補數便是 0 ， 整數是 0</p>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><p>將數字轉為二進制，尋遍二進制碼將數字轉換。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findComplement</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> binary = <span class="type">String</span>(num, radix: <span class="number">2</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> complement: <span class="type">String</span> = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> binary.characters &#123;</div><div class="line">        complement += <span class="built_in">c</span> == <span class="string">"0"</span> ? <span class="string">"1"</span> : <span class="string">"0"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(complement, radix: <span class="number">2</span>)!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Best-Solution"><a href="#Best-Solution" class="headerlink" title="Best Solution"></a>Best Solution</h1><p>遍尋一遍是很耗資源的做法。所以要使用二元運算的方法來解。</p>
<ol>
<li><p>先取得與二進制 num 相同長度的 mask<br> <code>5(101) -&gt; 111</code><br> <code>9(1001) -&gt; 1111</code></p>
</li>
<li><p>以 <code>5(101)</code> 舉例，取得 Most Significant Bit 就是影響這個數串最大的數字，也就是最左邊的數 -&gt; <code>(1)01</code>。<br>Java 有內建 <code>Integer.highestOneBit(num)</code> 的方法，但 Swift 只能自己手動建立，取得除了最大數為1其他數為0的值 -&gt; <code>(1)00</code><br>接著對該數字利用下溢位 -1 ，取得 mask -&gt; <code>111</code></p>
</li>
<li><p>取得 mask 後，解題方法有二:</p>
<p>3-1: 使用 ^ 運算子，相同數 XOR 交換<br><code>num(101) ^ mask(111) = 010</code></p>
<p>3-2: 使用 ~ 跟 &amp; 運算子，對 num 作 NOT 運算取補數，並且跟 mask 作 AND 運算<br><code>~num(101) &amp; 111 = 010</code><br><code>-&gt; 11111111111111111111111111111010 &amp; 0000...111 = 010</code></p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findComplement</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> mask = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span>(mask &lt;= num) &#123;</div><div class="line">        mask &lt;&lt;= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    mask-=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> num ^ mask</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#627 Swap Salary - in MySQL]]></title>
      <url>/leetcode-627/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.</p>
<p>將 table <code>salary</code> 當中性別欄位的男性(m)與女性(f)全部對調過來，</p>
<p>必須使用單次的 SQL Query 並且不使用任何暫時的 table 記錄。</p>
<p>For example:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">| id | name | sex | salary |</div><div class="line">|<span class="comment">----|------|-----|--------|</span></div><div class="line">| 1  | A    | m   | 2500   |</div><div class="line">| 2  | B    | f   | 1500   |</div><div class="line">| 3  | C    | m   | 5500   |</div><div class="line">| 4  | D    | f   | 500    |</div></pre></td></tr></table></figure></p>
<p> After running your query, the above salary table should have the following rows:</p>
<p> 經過一次 SQL Query 後，可以看到性別都對調過來了:</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">| id | name | sex | salary |</div><div class="line">|<span class="comment">----|------|-----|--------|</span></div><div class="line">| 1  | A    | f   | 2500   |</div><div class="line">| 2  | B    | m   | 1500   |</div><div class="line">| 3  | C    | f   | 5500   |</div><div class="line">| 4  | D    | m   | 500    |</div></pre></td></tr></table></figure>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><p>使用 SQL 中的 CASE … WHEN 語法，就可以簡單做到</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span> sex = (</div><div class="line"> <span class="keyword">CASE</span> sex</div><div class="line"> <span class="keyword">WHEN</span> <span class="string">'m'</span> <span class="keyword">THEN</span> <span class="string">'f'</span></div><div class="line"> <span class="keyword">WHEN</span> <span class="string">'f'</span> <span class="keyword">THEN</span> <span class="string">'m'</span></div><div class="line"> <span class="keyword">ELSE</span> sex <span class="keyword">END</span></div><div class="line"> )</div></pre></td></tr></table></figure>
<p>更簡潔一點 :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> salary</div><div class="line"> <span class="keyword">SET</span> sex  = (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex = <span class="string">'m'</span></div><div class="line"> <span class="keyword">THEN</span> <span class="string">'f'</span></div><div class="line"> <span class="keyword">ELSE</span> <span class="string">'m'</span></div><div class="line"> <span class="keyword">END</span>)</div></pre></td></tr></table></figure>
<h1 id="Best-Solution"><a href="#Best-Solution" class="headerlink" title="Best Solution"></a>Best Solution</h1><p>使用 SQL + XOR 算法 : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ASCII(&apos;f&apos;) -&gt; 109</div><div class="line">ASCII(&apos;m&apos;) -&gt; 102</div><div class="line"></div><div class="line">109 ^ 102 = 11</div><div class="line">1. 11 ^ 109 = 102</div><div class="line">2. 11 ^ 102 = 109</div></pre></td></tr></table></figure>
<p>所以在 SQL 中表示 :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> salary </div><div class="line"><span class="keyword">SET</span> sex = <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex))</div></pre></td></tr></table></figure>
<p>或是 :</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> salary</div><div class="line"><span class="keyword">SET</span> sex = <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(sex) ^ <span class="number">11</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#561 Array Partition I - in Swift]]></title>
      <url>/leetcode-561/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p>
<p>給一個「2n數量」的整數陣列，目標是把這些整數分成「n組」配對的整數，並且找出每組的最小值的最大值。</p>
<p>Example 1:<br><code>Input: [1,4,3,2]</code></p>
<p>Output: 4<br><code>Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</code></p>
<p>範例中 n 為 2 ，所有配對的最大加總就是 4</p>
<p>Note:<br> n is a positive integer, which is in the range of [1, 10000].<br> All the integers in the array will be in the range of [-10000, 10000].</p>
<p> n 必須為正整數，範圍是 1 至 10000<br> 陣列中所有數字必須介於 -10000 至 10000</p>
<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>其實他題目講解得有點爛，花了一些時間終於知道他想要幹嘛，難怪大家給題目評分 GOOD 75 , BAD 209 。</p>
<p>意思是說 : 如果給的陣列是 <code>[1,4,3,2]</code> 好了<br>我必須去找出 2個2個 配對， 並且從每一個配對的最小值，全部加總起來找到最大值。</p>
<p>如果分成 [1,4], [3,2] -&gt; 1 + 2 = 3<br>分成 [1,3], [4,2] -&gt; 1 + 2 = 3<br>分成 [1,2], [4,3] -&gt; 1 + 3 = 4</p>
<p>所以最大值就是 4</p>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><p>可以發現任何的2n陣列如 <code>[1,5,3,7,9,8,33,20]</code><br>想要找到「每組最小值」總和最大值的話<br>剛好就是「每兩個最小」的值取最小的值</p>
<p>以<code>[1,5,3,7,9,8,33,20]</code>來說 就是 (1,3), (5,7), (8,9), (20,33) -&gt; 1 + 5 + 8 + 20 = 34<br>所以只需要將陣列由小到大排序<br>並且跳過偶數位置的數字，相加起來就是答案</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrayPairSum</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> sortNums = nums.sorted(by: &lt;)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;sortNums.<span class="built_in">count</span> <span class="keyword">where</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">        sum += sortNums[i]</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Array </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#617 Merge Two Binary Trees - in Swift]]></title>
      <url>/leetcode-617/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>
<p>給你兩個二元樹，想像當其中一棵樹覆蓋對方時，某些節點可能會重疊，某些可能不會。</p>
<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>
<p>你必須要合併兩棵樹變成一棵新的二元樹。合併規則是這樣：如果兩個節點重疊，那就相加兩個值變成新的節點，如果有一個值不存在，就由不為空的值成為新的節點。</p>
<p>Example 1:<br> Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Tree 1                     Tree 2</div><div class="line">     1                         2</div><div class="line">    / \                       / \</div><div class="line">   3   2                     1   3</div><div class="line">  /                           \   \</div><div class="line"> 5                             4   7</div></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Merged tree:</div><div class="line">    3</div><div class="line">   / \</div><div class="line">  4   5</div><div class="line"> / \   \</div><div class="line">5   4   7</div></pre></td></tr></table></figure></p>
<p>Note: The merging process must start from the root nodes of both trees.</p>
<p>合併的過程必須從兩棵樹的最頂端開始。</p>
<p>Definition for a binary tree node.</p>
<p>TreeNode 類別長得像這樣</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">TreeNode</span>?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">TreeNode</span>?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.val = val</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">left</span> = <span class="literal">nil</span></div><div class="line">        <span class="keyword">self</span>.<span class="keyword">right</span> = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><p>首先針對每個 TreeNode 進行判斷與運算</p>
<ol>
<li>如果點1或點2都是空值就返回空值</li>
<li>如果點1或點2都不是空值就要將兩個值相加</li>
<li>如果點1是空值 ? 就返回點2 : 返回點1</li>
</ol>
<p>接著利用遞迴函式 ( Recursive Function ) 的方式<br>對接下來的左邊節點與右邊節點進行運算得到結果</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTrees</span><span class="params">(<span class="number">_</span> t1: TreeNode?, <span class="number">_</span> t2: TreeNode?)</span></span> -&gt; <span class="type">TreeNode</span>? &#123;</div><div class="line">    <span class="keyword">var</span> newNode: <span class="type">TreeNode</span>? = <span class="literal">nil</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> t1 == <span class="literal">nil</span> &amp;&amp; t2 == <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> newNode</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> t1 != <span class="literal">nil</span> &amp;&amp; t2 != <span class="literal">nil</span> &#123;</div><div class="line">        newNode = <span class="type">TreeNode</span>(t1!.val + t2!.val)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newNode = t1 == <span class="literal">nil</span> ? t2 : t1</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    newNode?.<span class="keyword">left</span> = mergeTrees(t1?.<span class="keyword">left</span>, t2?.<span class="keyword">left</span>)</div><div class="line">    newNode?.<span class="keyword">right</span> = mergeTrees(t1?.<span class="keyword">right</span>, t2?.<span class="keyword">right</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> newNode</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Tree </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#595 Big Countries - in MySQL]]></title>
      <url>/leetcode-595/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>這裡有一個 Table 叫作 “World”<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+-----------------+------------+------------+--------------+---------------+</div><div class="line">| name            | continent  | area       | population   | gdp           |</div><div class="line">+-----------------+------------+------------+--------------+---------------+</div><div class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</div><div class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</div><div class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</div><div class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</div><div class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</div><div class="line">+-----------------+------------+------------+--------------+---------------+</div></pre></td></tr></table></figure></p>
<p> 一個大的國家，必須要達成 「 area 超過 3000000 」 或是 「 population 超過 25000000 」</p>
<p> 現在請你撰寫一個 SQL QUERY 找出大的國家，並且列出他的 ‘name, population, area’</p>
<p> 依照上面的表格所示，查詢後的結果應該跟下表一樣:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+--------------+-------------+--------------+</div><div class="line">| name         | population  | area         |</div><div class="line">+--------------+-------------+--------------+</div><div class="line">| Afghanistan  | 25500100    | 652230       |</div><div class="line">| Algeria      | 37100000    | 2381741      |</div><div class="line">+--------------+-------------+--------------+</div></pre></td></tr></table></figure>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, population, area </div><div class="line"><span class="keyword">FROM</span> World </div><div class="line"><span class="keyword">WHERE</span> area &gt; <span class="number">3000000</span> <span class="keyword">OR</span> population &gt; <span class="number">25000000</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#461 Hamming distance - in Swift]]></title>
      <url>/leetcode-461/</url>
      <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>
<p>Given two integers x and y, calculate the Hamming distance.</p>
<p>兩個等長字符串之間的漢明距離是兩個字符串對應位置的不同字符的個數。</p>
<p>現在給兩個整數 x, y ，計算出它們的漢明距離。</p>
<p>Note:<br> 0 ≤ x, y &lt; 231.</p>
<p>Example:</p>
<p> Input: x = 1, y = 4</p>
<p> Output: 2</p>
<p> Explanation:<br> 1   (0 0 0 1)<br> 4   (0 1 0 0)<br>        ?   ?</p>
<p> The above arrows point to positions where the corresponding bits are different.</p>
<p> 上面的 ？ 符號表示該 bits 不相同</p>
<h1 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h1><p>什麼是<a href="https://goo.gl/n4Cc69" target="_blank" rel="external">漢明距離 (Hamming distance)</a></p>
<p>漢明距離是以理察·衛斯里·漢明的名字命名的，漢明在誤差檢測與校正碼的基礎性論文中首次引入這個概念。在通信中累計定長二進位字中發生翻轉的錯誤數據位，所以它也被稱為信號距離。漢明重量分析在包括<code>資訊理論</code>、<code>編碼理論</code>、<code>密碼學</code>等領域都有應用。但是，如果要比較兩個不同長度的字符串，不僅要進行替換，而且要進行插入與刪除的運算，在這種場合下，通常使用更加複雜的編輯距離等算法。</p>
<h1 id="第一次解題-Accepted"><a href="#第一次解題-Accepted" class="headerlink" title="第一次解題 : Accepted"></a>第一次解題 : Accepted</h1><p>第一次解，想說把數字轉換成二位元字串<br>也就是使用 pad 這個方法取得兩個 binaryX 跟 binaryY<br>接下來就比對兩個字串每一個值是否有差異，就過了。。。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">hammingDistance</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// How to convert Int to Binary in Swift : https://goo.gl/6m9TEY</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pad</span><span class="params">(string : String, toSize: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">var</span> padded = string</div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;(toSize - string.characters.<span class="built_in">count</span>) &#123;</div><div class="line">            padded = <span class="string">"0"</span> + padded</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> padded</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> binaryX = pad(string: <span class="type">String</span>(x, radix: <span class="number">2</span>), toSize: <span class="number">32</span>)</div><div class="line">    <span class="keyword">let</span> binaryY = pad(string: <span class="type">String</span>(y, radix: <span class="number">2</span>), toSize: <span class="number">32</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> diff = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> binaryX.characters.<span class="built_in">indices</span> &#123;</div><div class="line">        <span class="keyword">let</span> c1 = binaryX.characters[i]</div><div class="line">        <span class="keyword">let</span> c2 = binaryY.characters[i]</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> c1 != c2 &#123;</div><div class="line">            diff += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> diff</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Other-Best-Practices"><a href="#Other-Best-Practices" class="headerlink" title="Other Best Practices"></a>Other Best Practices</h1><p>想想其實漢明距離就是要求兩個字符串的<a href="https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E5%BC%82%E6%88%96" target="_blank" rel="external">互斥或閘 (exclusive or)</a> </p>
<p>也就是 x ^ y 的答案</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">hammingDistance</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">c</span> = x ^ y</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(<span class="built_in">c</span>, radix: <span class="number">2</span>).characters.<span class="built_in">filter</span> &#123; $<span class="number">0</span> == <span class="string">"1"</span>&#125;.<span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
            <category> Bit Manipulation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
            <tag> Bit Manipulation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode#1 Two Sum - in Swift]]></title>
      <url>/leetcode-1/</url>
      <content type="html"><![CDATA[<p>為了增進自己的基礎，從今天開始每天使用Swift解一題LeetCode。加油！</p>
<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>丟進一個整數陣列和一個目標值， 並且回傳一個整數陣列， 其中包含兩個數， 這兩個數的總和應該等於目標值</p>
<p>必須保證每一次輸入的數字都能夠有一個正確的答案， 並且不會重複使用同一個(元素 (第一次看成數字 X_X))</p>
<p>Example:<br> Given nums = [2, 7, 11, 15], target = 9,</p>
<p> Because nums[0] + nums[1] = 2 + 7 = 9,<br> return [0, 1]</p>
<h1 id="第一次提交-Time-Limit-Exceeded"><a href="#第一次提交-Time-Limit-Exceeded" class="headerlink" title="第一次提交 : Time Limit Exceeded"></a>第一次提交 : Time Limit Exceeded</h1><p>透過建立一個 Dictionary ，將陣列中每一個數配對一個 key ，<br>對 Dictionary 採用 key 由小到大迴圈 ， 並且再迴圈一次配對不同的 element (key != key2)，<br>只要兩者的值相同即為答案。</p>
<p>可惜第一次玩 Leetcode 發現居然有效率限制，這樣子的做法雖然可以解答，但是效率太差⋯⋯</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> (index, element) <span class="keyword">in</span> nums.enumerated() &#123;</div><div class="line">        dict[index] = element</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> dict.sorted(by: &lt;) &#123;</div><div class="line">        <span class="keyword">for</span> (key2, value2) <span class="keyword">in</span> dict <span class="keyword">where</span> key != key2 &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> value + value2 == target &#123;</div><div class="line">                <span class="keyword">return</span> [key, key2]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="number">0</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第二次提交-Time-Limit-Exceeded"><a href="#第二次提交-Time-Limit-Exceeded" class="headerlink" title="第二次提交 : Time Limit Exceeded"></a>第二次提交 : Time Limit Exceeded</h1><p>第二次直接用暴力破解法，一樣雖然可以成功，<br>但是看來不是少個字典就可以呢… 花了 O(n^2) 的時間<br>又因為效率太差被拒絕了⋯⋯</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: nums.<span class="built_in">count</span>, by: <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: i+<span class="number">1</span>, to: nums.<span class="built_in">count</span>, by: <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> nums[j] == target - nums[i] &#123;</div><div class="line">                <span class="keyword">return</span> [i,j]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="number">0</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第三次提交-Time-Limit-Exceeded"><a href="#第三次提交-Time-Limit-Exceeded" class="headerlink" title="第三次提交 : Time Limit Exceeded"></a>第三次提交 : Time Limit Exceeded</h1><p>一樣將數值跟第一次實作一樣存入 dictionary 中，<br>迴圈時，<br>算出目標值與目前數值的差 (complement)<br>直接去查看 dictionary 中有沒有符合 complement 的數字<br>有就是答案！ 回傳[答案的index, 跟現在數字的index]</p>
<p>其實第三次已經使用了 O(n) 的時間，但不知道為何還是效率太差 ?_?</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> (index, element) <span class="keyword">in</span> nums.enumerated()  &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> complement = target - element</div><div class="line"></div><div class="line">        <span class="keyword">if</span> dict.values.<span class="built_in">contains</span>(complement) &#123;</div><div class="line">            <span class="keyword">return</span> [nums.index(of: complement)!, index]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dict[index] = element</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="number">0</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第四次提交-Accepted"><a href="#第四次提交-Accepted" class="headerlink" title="第四次提交 : Accepted"></a>第四次提交 : Accepted</h1><p>第四次手癢參考了一下<a href="https://github.com/raywenderlich/swift-algorithm-club/tree/master/Two-Sum%20Problem" target="_blank" rel="external">別人的做法</a></p>
<p><code>for i in 0..&lt;nums.count</code> 就可以用最快的速度得到迴圈跟 index<br>先看 else 的部分:<br>dict[算出目標值與目前數值的差] = 值的 index</p>
<p>之後的迴圈:<br>只要目前數值在 dict 當中出現，馬上知道是答案想要的差值<br>直接回傳 [差值, 現在的index]</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> target = dict[nums[i]] &#123;</div><div class="line">            <span class="keyword">return</span> [target, i]</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dict[target - nums[i]] = i</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="number">0</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習 RxJava 結合 Retrofit]]></title>
      <url>/learn-android-rxjava-with-retrofit/</url>
      <content type="html"><![CDATA[<p>個別學習完 RxJava 與 Retrofit 之後，是令人期待的合體了呢 ! </p>
<blockquote>
<p>前面的文章<br><a href="https://windsuzu.github.io/2017/05/02/learn-android-retrofit2/">學習 Android Retrofit 2</a><br><a href="https://windsuzu.github.io/2017/05/05/learn-android-rxjava/">學習 Android RxJava</a></p>
</blockquote>
<p>這篇文章僅僅是記錄如何將兩個框架結合在一起，不對兩者進行深入探討。</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>設置 Gradle 除了 RxJava 與 Retrofit 的 Library 以外，還要再多設置讓兩者能夠結合的 adapter 套件。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">"io.reactivex.rxjava2:rxjava:2.x.y"</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.2.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.2.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:adapter-rxjava2:2.2.0'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>要記得 retrofit 與他的快樂夥伴的版本要一致 (2.2.0)</p>
</blockquote>
<p>在設置這邊發生了好多錯誤，原來之前學習時用的是 RxJava1，所以跟 Retrofit2 的 Adapter 配不起來 (汗)，1和2有一些差別，可以到 <a href="https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0" target="_blank" rel="external">RxJava Github - What’s different in 2.0</a> 查看。</p>
<h2 id="實作-Retrofit-Service-Interface"><a href="#實作-Retrofit-Service-Interface" class="headerlink" title="實作 Retrofit Service Interface"></a>實作 Retrofit Service Interface</h2><p>一樣拿 GitHub Api 測試看看 :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String BASEURL = <span class="string">"http://api.github.com/"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"users/&#123;userId&#125;"</span>)</div><div class="line">    <span class="function">Observable&lt;GitHubUser&gt; <span class="title">getUser</span><span class="params">(@Path(<span class="string">"userId"</span>)</span> String userId)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這邊要注意的是原本的 Call<githubuser> 變為 Observable<githubuser> ，因為是用 RxJava 觀察者模式訂閱，所以必須要返回一個 Observable 對象，才能夠進行接續的 <code>subscribeOn()</code> 、 <code>subScribe()</code> 等 RxJava 操作。其餘的都跟只有 Retrofit 時一樣。</githubuser></githubuser></p>
<h2 id="創建-Retrofit-元件"><a href="#創建-Retrofit-元件" class="headerlink" title="創建 Retrofit 元件"></a>創建 Retrofit 元件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Retrofit <span class="title">provideRetrofit</span><span class="params">(String baseUrl)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">            .baseUrl(baseUrl)</div><div class="line">            .build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這邊除了原本添加的 Gson 轉換器，還要新增 Retrofit 與 RxJava 相依的 RxJava2CallAdapterFactory 。</p>
<h2 id="實作-Retrofit-RxJava-異步網路請求"><a href="#實作-Retrofit-RxJava-異步網路請求" class="headerlink" title="實作 Retrofit + RxJava 異步網路請求"></a>實作 Retrofit + RxJava 異步網路請求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GitHubService service = provideRetrofit(GitHubService.BASEURL).create(GitHubService.class);</div><div class="line"></div><div class="line">service.getUser(USERID)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(user -&gt; Log.d(TAG, user.getName()));</div></pre></td></tr></table></figure>
<p>先利用 <code>getUser()</code> 獲得 Observable ，再開始使用 RxJava 的方法，能夠歷經 map 、 fliter 、 flatMap ，最後傳給 Observer 進行主執行緒的操作。</p>
<h2 id="結"><a href="#結" class="headerlink" title="結"></a>結</h2><p>除此之外，若是像設計登入流程，伺服器可能會先回傳一個 token ，需要再以 token 去取得用戶資料。這時可能就要使用 flatMap 再一次發送 token 取得資料。</p>
<p>或是登入時需要實作 <code>onError()</code> 的響應，一方面又想要維持 lambda 語法的簡潔，那就必須要另外新增兩個 <code>Action (Consumer)</code> ，來實作 <code>onNext()</code> 、 <code>onError()</code> 的方法，再放入 <code>subScribe</code> 中。</p>
<blockquote>
<p>上面說的登入設計可以參考這篇文章<br><a href="http://www.jianshu.com/p/1fb294ec7e3b" target="_blank" rel="external">【Android】RxJava + Retrofit完成网络请求</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
            <tag> RxJava </tag>
            
            <tag> RxAndroid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習 Android RxJava]]></title>
      <url>/learn-android-rxjava/</url>
      <content type="html"><![CDATA[<p>終於寫到了 RxJava ，前陣子在 <a href="https://juejin.im" target="_blank" rel="external">掘金</a> 不斷看到這個名字，一直想把他學起來應用在開發上。 看了好多文章，也實際操作，延伸學習了不少新的東西。像是更了解 Android 的執行緒、觀察者模式、 Java 8 的 lambda 語法。雖然我這個新手還沒有做過很大的 Project ，但相信 RxJava 會成為未來一個很棒的工具。</p>
<blockquote>
<p>好文參考<br><a href="http://www.jianshu.com/p/19cac3c5b106" target="_blank" rel="external">【Android】RxJava的使用（一）基本用法</a><br><a href="http://www.jianshu.com/p/6d1ef9f43cdc" target="_blank" rel="external">详细解析RxAndroid的使用方式</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_15" target="_blank" rel="external">给 Android 开发者的 RxJava 详解 - 扔物线</a></p>
</blockquote>
<h2 id="為什麼要學習-RxJava"><a href="#為什麼要學習-RxJava" class="headerlink" title="為什麼要學習 RxJava"></a>為什麼要學習 RxJava</h2><p>記得什麼基礎都沒有時，為了要把網站的圖下載下來顯示到 imageView 中，使用了同步請求，把主執行緒塞爆 UI 當的要死。接著學習了 okhttp、Volley 這些 HTTP 請求的框架，知道了怎麼樣異步處理網路的請求。 但越寫越多，發現自己的程式碼亂七八糟，我也是懵了ㄎ &gt;_&gt;</p>
<p>RxJava 就是要讓 “異步操作” 更乾淨、簡潔的實作出來，而且比起 Android 內建的 AsyncTask 或 Handler 更能夠應付越寫越複雜的程式碼。搭配上 lambda 語法，就算是我這個懵逼寫的，看起來也變得很漂亮(哈哈)。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>RxJava 的概念即是觀察者模式 (Observer Pattern) ，由觀察者 (Observer) 與被觀察者 (Subject) 組成。<br><img src="http://www.plantuml.com/plantuml/svg/Ux6yuUdw-IyQMdNjNYnQ_GB6Kx1IUB6YwUMqZGeQBrRiVjhMfSc5B0rKZAJoMST4iEIEvpFtFDdL1W00"></p>
<p><strong>觀察者</strong> 透過訂閱 (Subscribe) 或稱註冊 (Register) 的方式，監控著 <strong>被觀察者</strong> 。只要 <strong>被觀察者</strong> 一發生什麼變動，就馬上通知 <strong>觀察者</strong></p>
<p>就像 Button 註冊 OnClickListener 一樣 :<br><img src="http://www.plantuml.com/plantuml/svg/yyzppibCplR9B2v9pKijqhLpAYqfoSzJi58eJYtnHvNKqEI2oEhQeSa0bUT3H3Gq0G00"></p>
<p>RxJava 中的觀察者為 Observer ， 被觀察者為 Observable ， 訂閱的方法為 subscribe()，流程也是類似方式<br><img src="http://www.plantuml.com/plantuml/svg/yqygJYqgIotIjVC7inAJSb8Lh1IAIvEAauioar8rDBaG4Z15gKL09VbvhcMfUIKQcW00"></p>
<p>這邊要注意的是，這些方法在 java 中寫起來是長這樣的 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myButton.setOnClickListener(myOnClickListener);</div><div class="line">observable.subscribe(observer);</div></pre></td></tr></table></figure></p>
<p>咦? 這樣看起來不就是 observable 去訂閱 observer 嗎 ? 我也很納悶，在一篇文章這樣解釋著。<br><blockquote><p>有人可能會注意到， subscribe() 這個方法有點怪：它看起來是『observable 訂閱了 observer / subscriber』而不是『observer / subscriber 訂閱了 observalbe』，這看起來就像『雜志訂閱了讀者』一樣顛倒了對像關系。這讓人讀起來有點別扭，不過如果把 API 設計成 observer.subscribe(observable) / subscriber.subscribe(observable) ，雖然更加符合思維邏輯，但對流式 API 的設計就造成影響了，比較起來明顯是得不償失的。</p>
<footer><strong>扔物线</strong><cite><a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">給 Android 開發者的 RxJava 詳解</a></cite></footer></blockquote></p>
<p>好吧，看不太懂，還是先死記著好了。</p>
<hr>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World !"></a>Hello, World !</h2><p>沒關係，先從最基本的回傳字串實際操作看看 !</p>
<h3 id="設置-Gradle"><a href="#設置-Gradle" class="headerlink" title="設置 Gradle"></a>設置 Gradle</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.0.14'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.0.1'</span></div></pre></td></tr></table></figure>
<h3 id="觀察者-Observer"><a href="#觀察者-Observer" class="headerlink" title="觀察者 Observer"></a>觀察者 Observer</h3><p>先從創建一個觀察者 Observer 看看 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(TAG, e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>RxJava 的 Observable 發生改變時，會回傳給 Observer 三種方法，分別是 <code>OnNext()</code> 、 <code>OnComplete()</code> 、 <code>onError()</code> :</p>
<ul>
<li><p>OnNext() : Observable 發送過來的訊息，會批次的在這個方法中實現，就像 OnClick() 一樣。</p>
</li>
<li><p>OnComplete() : 當全部 OnNext() 都被執行完畢，會觸發這個方法。</p>
</li>
<li><p>onError() : 如果在執行的途中發生錯誤，會馬上執行這個方法，並且中止。</p>
</li>
</ul>
<h3 id="被觀察者-Observable"><a href="#被觀察者-Observable" class="headerlink" title="被觀察者 Observable"></a>被觀察者 Observable</h3><p>接著創建被觀察者 Observable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"Hello!"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"World!"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>RxJava 使用 create() 創建一個 Observable，並且丟入參數 OnSubscribe 儲存回 Observable 中，當 Observable 被訂閱後，OnSubscribe 的 call() 方法就會被呼叫。</p>
<p>那如何訂閱呢 ? 前面有說過 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer);</div><div class="line"><span class="comment">// LogCat 就會依序印出 "Hello!", "World!", "Completed!" 囉</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="簡潔化"><a href="#簡潔化" class="headerlink" title="簡潔化"></a>簡潔化</h2><p>看完了最基礎的用法後，如果每次都要創建 Observer 跟 Observable ，再來 subscribe() 連結關係，絕對很煩阿 !<br>所以 RxJava 還有好多必學的用法。</p>
<h3 id="just"><a href="#just" class="headerlink" title="just"></a>just</h3><p>使用 Observable.just() 來創建 <strong>被觀察者</strong> ，與 Observable.create() 所產生的結果是一模一樣的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable observable = Observable.just(<span class="string">"Hello!"</span>, <span class="string">"World!"</span>);</div><div class="line"><span class="comment">// 一樣會依序印出 "Hello!", "World!", "Completed!"</span></div></pre></td></tr></table></figure></p>
<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><p>Observable.from() 則是能夠讀取繼承 <code>Iterable</code> 的所有類別如 <code>List</code>，並且拆開依序發送出來。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] list = &#123;<span class="string">"Hello!"</span>, <span class="string">"World!"</span>&#125;;</div><div class="line">Observable observable = Observable.from(list);</div><div class="line"><span class="comment">// 一樣會依序印出 "Hello!", "World!", "Completed!"</span></div></pre></td></tr></table></figure></p>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>簡化了 Observable 的方法後，再來是 Observer 這邊了。 subscribe(Observer) 需要回傳三種方法，在示範中，除了 <code>onNext()</code> 外，其實我們不怎麼需要回傳 <code>onComplete()</code> 與 <code>onError()</code> 。</p>
<p>所以 RxJava 提供了 Action 這個 Interface ，包含了 <code>Action0</code> 與 <code>Action1</code> 。</p>
<p><code>Action0</code> 與 <code>onComplete</code> 一樣是沒有參數與返回值的，因此可以利用 <code>Action0</code> 實作一個與 <code>onComplete</code> 一樣的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>而需要參數的 onError(err) 與 onNext(obj) ， 則利用相同需要傳入參數與返回值的 Action1 來實作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(TAG, e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>再來就可以依照需要的 Action 傳入 subscribe() 當中 !<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只需要定義 onNext()</span></div><div class="line">observable.subscribe(onNextAction); </div><div class="line"></div><div class="line"><span class="comment">// 以此類推</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction);</div><div class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</div></pre></td></tr></table></figure></p>
<p>練習總結這三種用法 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createActions</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observable.just(<span class="string">"Hello!"</span>, <span class="string">"World!"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"Item: "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>哇嗚，變得簡潔好多 ! 如果再用之後的 lambda 語法將變得無比華麗呢。</p>
<hr>
<h2 id="變換函數"><a href="#變換函數" class="headerlink" title="變換函數"></a>變換函數</h2><p>什麼 ? 你說到現在只是用很炫的方式把字串 print 出來而已 ? 沒屌用 ?<br>現在才要開始看到 RxJava 真正厲害的地方啦 !</p>
<p>RxJava 提供 map 、 flatmap 、 reduce 等方法，將傳進來的每個對象或對象本身進行加工處理並且轉換。</p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>如果我們有一用戶列表，要抓出全部用戶名字，並添加到新的 List<string> 當中，用一般做法，可能需要用到迴圈之類的麻煩事，但 <code>map()</code> 不需要 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">User user1 = <span class="keyword">new</span> User();</div><div class="line">...</div><div class="line"></div><div class="line">Observable.just(user1, user2, user2)</div><div class="line"></div><div class="line">                <span class="comment">// 參數1 : 傳進來的類別</span></div><div class="line">                <span class="comment">// 參數2 : 轉換完輸出的類別</span></div><div class="line"></div><div class="line">                <span class="comment">// 讀進每個 User ， 並轉換為 name 這個 String 傳到下一個 subscribe 方法</span></div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;User, String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                        String name = user.getName();</div><div class="line">                        <span class="keyword">return</span> name;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">// 將讀取的 name 加到新的 List 中</span></div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        nameList.add(s);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></string></p>
<p>例子中的 <code>Func1</code> 這個 Interface ，跟 <code>Action1</code> 相似，同樣傳入參數進入的一個方法。不同的是， <code>Func1</code> 的 <code>call()</code> 是有返回值的 !<br>阿 ! 原來數字是多少就是有幾個返回值呢 ! <code>FuncX</code> 就有 X 個返回值 ! 懂了 !</p>
<h3 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h3><p>如果這時要把每個用戶的每個文章標題都列出來，用 <code>map()</code> 的做法會需要用到迴圈 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.just(user1, user2, user2)</div><div class="line">                .map(<span class="keyword">new</span> Func1&lt;User, List&lt;Article&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> user.getArticleList();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">// 將轉換成 List&lt;Article&gt; 傳入 Observer 中</span></div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;List&lt;Article&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Article&gt; articleList)</span> </span>&#123;</div><div class="line">                        <span class="keyword">for</span> (Article a : articleList) &#123;</div><div class="line">                        	Log.d(TAG, a.getTitle());</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<p>噢 ! 由於 <code>map()</code> 只能夠實現 1對1 的轉換，所以出現另人煩躁的迴圈了。那要怎麼辦才能在 Observer 中每次都傳入一個 Article 類別呢 ? RxJava 還提供了一個 <code>flatmap()</code> 的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.just(user1, user2, user2)</div><div class="line"></div><div class="line">                <span class="comment">// User 類別將在 flatmap 中轉換成 Observable&lt;Article&gt; 類別</span></div><div class="line">                .flatmap(<span class="keyword">new</span> Func1&lt;User, Observable&lt;Article&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Observable&lt;Article&gt; <span class="title">call</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> Observable.from(user.getArticleList());</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">// 即可獲得序列中每個 Article</span></div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Article&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Article article)</span> </span>&#123;</div><div class="line">                        Log.d(TAG, article.getTitle());</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<p><img src="/learn-android-rxjava/flatmap.jpg" alt="flatMap 示意圖"></p>
<p><font style="color: red">紅色代表 user1</font> ， <font style="color: purple">紫色代表 user2 </font></p>
<p><font style="color: red">user1</font> 進到 flatmap 後，經過新創建的 <font style="color: red"> Observable </font>將 <font style="color: red">Article1、Article2</font> 交給 Observer</p>
<p><font style="color: purple">user2</font> 進到 flatmap 後，經過新創建的 <font style="color: purple"> Observable </font>將 <font style="color: purple">Article3、Article4</font> 交給 Observer<br>很像一種 “鋪平” 的感覺，就是 flat 的意思。</p>
<h3 id="其他轉換函數"><a href="#其他轉換函數" class="headerlink" title="其他轉換函數"></a>其他轉換函數</h3><blockquote>
<p>filter : 過濾掉無意義的數據<br>reduce : 跟 flatmap 相反，把數個數組組合成一個數據<br>更多請參考 : <a href="https://www.zhihu.com/question/32209660" target="_blank" rel="external">谁来讲讲Rxjava、rxandroid中的操作符的作用?</a></p>
</blockquote>
<hr>
<h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>另外一個 RxJava 強大的原因，就是能夠隨意的切換執行緒 (Thread)。我們知道，如果要從事一些網路下載、加載圖片等較為耗時的工作，不能在 Android 的主執行緒，就是 UI 執行緒操作。所以會利用 Thread 或 AsyncTask 操作，類似這樣 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新增一個執行緒來處理圖片 </span></div><div class="line"><span class="keyword">new</span> Thread() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        <span class="comment">// 遍步 folder 列表</span></div><div class="line">        <span class="keyword">for</span> (File folder : folders) &#123;</div><div class="line">            File[] files = folder.listFiles();</div><div class="line"></div><div class="line">            <span class="comment">// 遍步 file 列表</span></div><div class="line">            <span class="keyword">for</span> (File file : files) &#123;</div><div class="line"></div><div class="line">                <span class="comment">//  篩選 png 檔案</span></div><div class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".png"</span>)) &#123;</div><div class="line">                    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromFile(file);</div><div class="line"></div><div class="line">                    <span class="comment">// 再回到 ui 執行緒添加圖片</span></div><div class="line">                    getActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            imageCollectorView.addImage(bitmap);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;.start();</div></pre></td></tr></table></figure></p>
<p>但是 RxJava 提供 Scheduler 這個控制器，能夠切換執行緒，這邊先了解 Scheduler 的各種方法 :</p>
<ul>
<li><p>Schedulers.immediate() : 直接在當下的執行緒運行，就等於不切換，是默認的方法</p>
</li>
<li><p>Schedulers.newThread() : 像 new Thread() 一樣啟動一個新執行緒，並在裡面操作</p>
</li>
<li><p>Schedulers.io(): 便於 I/O 操作的執行緒，與 <code>newThread()</code> 差不多，主要用於讀取文件、db等工作</p>
</li>
<li><p>Schedulers.computation() : 計算時所使用的執行緒，要與 io 執行緒區別</p>
</li>
<li><p>AndroidSchedulers.mainThread() : 指定回 Android UI 主執行緒運行</p>
</li>
</ul>
<p>有了這些方法，就能夠在創建 Observable 時，使用 <code>subscribeOn()</code> 和 <code>observeOn()</code> 來進行切換控制。</p>
<ul>
<li><p>Observable.subscribeOn() : 指定 subscribe() 發生時所在的執行緒</p>
</li>
<li><p>Observable.observeOn() : 指定 subscribe() 返回時 Observer 為了消費事件所在的執行緒</p>
</li>
</ul>
<p>講了難懂，我們來用 RxJava 改造看看剛剛處理圖片的方法吧 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 從 folders 取出每個 folder </span></div><div class="line"><span class="comment">// 再將每個 folder 中的 files 中的 file 各自取出</span></div><div class="line">Observable.from(folders)</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;File, Observable&lt;File&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;File&gt; <span class="title">call</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Observable.from(file.listFiles());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 過濾出檔名結尾為 .png 的檔案</span></div><div class="line">    .filter(<span class="keyword">new</span> Func1&lt;File, Boolean&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> file.getName().endsWith(<span class="string">".png"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 將讀取的每個 File 轉成 Bitmap 輸出</span></div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;File, Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getBitmapFromFile(file);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 規定以上這些 subscribe 中的工作，都要在 IO 執行緒 操作</span></div><div class="line">    .subscribeOn(Schedulers.io())</div><div class="line"></div><div class="line">    <span class="comment">// 而我們希望最後返回 Bitmap 並顯示在 imageView 的工作，回到 mainThread 執行</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread())</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">            <span class="comment">// 就是 call 裡面的工作在 mainThread 執行</span></div><div class="line">            imageCollectorView.addImage(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>簡單的加入了 <code>subscribeOn()</code> 與 <code>observeOn()</code> 就讓執行緒能夠隨意切換，真棒 !</p>
<p>咦 ? 可是… 怎麼感覺程式碼變多了 ? </p>
<p>太在意這點是成不了大事的 ! 仔細看一遍，其實是邏輯變得簡單了呢 ! 程式碼中沒有任何迴圈什麼的，而且一條線的完成了整個工作，非常乾淨。重點是，若隔了好幾個月，突然要加入新的功能進來，用原本的方法寫的程式碼，又不愛加註解，可能要讀個幾分鐘才能搞懂吧 ! 而用 RxJava 的優勢就來了，一下就能搞懂自己當初在幹嘛，並且快速新增新功能進去 !</p>
<h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>或許在 <strong>「邏輯」</strong> 與 <strong>「程式碼」</strong> 的簡潔，需要有所取捨。 Java 8 所新增的 Lambda 語法能夠讓 <strong>程式碼</strong> 變得更簡潔，但相對的會較看不出他的邏輯。 或許應該把 Lambda 的學習在寫一篇文章的 … 不過先用看看，試著起到拋磚引玉的效果吧</p>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>要使用 Java 8 的 Lambda 語法，需要在 app Gradle 中配置 (Android Studio 2.3)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">    ...</div><div class="line">        jackOptions &#123;</div><div class="line">            enabled <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    compileOptions &#123;</div><div class="line">        <span class="keyword">targetCompatibility</span> <span class="number">1.8</span></div><div class="line">        <span class="keyword">sourceCompatibility</span> <span class="number">1.8</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其實自己也還沒有很認真學習過 Java 8 的各種寫法，所以這邊先點出一些常用的方法 :</p>
<h3 id="lambda-語法"><a href="#lambda-語法" class="headerlink" title="lambda 語法"></a>lambda 語法</h3><p>這是一般要設定 setOnClickListener 時的做法，可以看到 new View.OnClickListener() 之後的 onClick 方法，看起來太礙眼了，尤其是要定義一堆一樣的 Listener 時，版面之混亂 &gt;_&gt;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"Hello World!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>所以 lambda 語法，提供了一種匿名(Anonymous) 表達式。因為要創建一個 OnClickListener 時，固定只使用到 onClick 方法，並且只要帶入參數 View ，所以就可以簡化成 <code>(參數) -&gt; { 工作方法(參數) }</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(view -&gt; &#123;</div><div class="line">   Log.d(TAG, <span class="string">"Hello World!"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 還可以更簡化</span></div><div class="line">button.setOnClickListener(view -&gt; Log.d(TAG, <span class="string">"Hello World!"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 參數可以直接使用</span></div><div class="line">button.setOnClickListener(view -&gt; Log.d(TAG, view.getTag().toString()));</div></pre></td></tr></table></figure></p>
<h3 id="lambda-方法引用-method-reference"><a href="#lambda-方法引用-method-reference" class="headerlink" title="lambda 方法引用 (method reference)"></a>lambda 方法引用 (method reference)</h3><p>lambda 還能更簡化，這個方法就是方法引用 (method reference) ， 長這樣 <code>::</code> 。<br>用法就是，當你指定的 <code>工作方法</code> 中，那個參數跟你原本帶入的參數相同，就可以使用。<br>有點模糊，試試看 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假如我已經創建好一個方法來執行偵錯，只要帶入 View 就抓出他的 Tag 值</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Log.d(TAG, view.getTag().toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// lambda 就會知道這個方法可以直接使用</span></div><div class="line">button.setOnClickListener(<span class="keyword">this</span>::show);</div></pre></td></tr></table></figure></p>
<h3 id="實際在-RxJava-操作"><a href="#實際在-RxJava-操作" class="headerlink" title="實際在 RxJava 操作"></a>實際在 RxJava 操作</h3><p>學到這邊一定就知道， RxJava 有一堆 Action、Func 超煩的，來試試把他們簡化，一樣用剛剛處理圖片的流程 :</p>
<p>由於 map 與 subscribe 都已經有相對方法了，所以 Android Studio 還會問我們要不要改成 <code>方法引用</code> ，真貼心 !<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.from(folders)</div><div class="line">                .flatMap(file -&gt; Observable.from(file.listFiles()))</div><div class="line">                .filter(file -&gt; file.getName().endsWith(<span class="string">".png"</span>))</div><div class="line">                .map(<span class="keyword">this</span>::getBitmapFromFile)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">this</span>::showBitmap);</div></pre></td></tr></table></figure></p>
<p>哇塞，剛剛有一定長度的程式碼，就被縮減為 7 行，而且還保留一定的邏輯在，好有成就感阿 ! 嗯哈哈哈哈 !</p>
<hr>
<h2 id="結"><a href="#結" class="headerlink" title="結"></a>結</h2><p>學會這篇文章的內容，差不多就算入門了 RxJava ，不過 RxJava 還有很多東西可以學習，像是 RxBinding 或是與 Retrofit 一起使用等。這些在邊實作邊學習吧 ! 現在重要的是多用 RxJava 開發，熟能生巧 !</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
            <tag> RxAndroid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習 Android Retrofit 2]]></title>
      <url>/learn-android-retrofit2/</url>
      <content type="html"><![CDATA[<p>Retrofit 是什麼 ? 我也是學習 RxJava 途中才知道， Retrofit 跟 Volley 一樣是 Android 一種 HTTP 請求的框架，但實際操作了一遍，感覺比 Volley 還要更簡便，而且能夠支援 RxJava 的關係，必須要學習一下。</p>
<blockquote>
<p>好文參考<br><a href="http://www.jianshu.com/p/7efdc3477269" target="_blank" rel="external">【Android】Retrofit 2.0 的使用</a><br><a href="http://wuxiaolong.me/2016/01/15/retrofit/" target="_blank" rel="external">Android Retrofit 2.0使用</a><br><a href="http://www.jianshu.com/p/308f3c54abdd" target="_blank" rel="external">你真的会用Retrofit2吗?Retrofit2完全教程</a><br><a href="http://bxbxbai.github.io/2015/12/13/retrofit2/" target="_blank" rel="external">Retrofit2源碼解析</a></p>
</blockquote>
<h2 id="Retrofit-2-介紹"><a href="#Retrofit-2-介紹" class="headerlink" title="Retrofit 2 介紹"></a>Retrofit 2 介紹</h2><p>上面說到 Retrofit 2 為一種 HTTP 請求的工具，並且使用 REST API 設計，由 RESTful Client 向 Server 發出請求。</p>
<blockquote>
<p>有關 RESTful API 的相關文章<br><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a><br><a href="http://ithelp.ithome.com.tw/articles/10157431" target="_blank" rel="external">定義 1 - 什麼是 REST/RESTful ?</a></p>
</blockquote>
<p><img src="/learn-android-retrofit2/retrofit.png" alt="Retrofit 模型"></p>
<ol>
<li>創建一個能裝載數據的 Class (Model or POJO)，</li>
<li>創建 Interface 來管理各種 HTTP APIs</li>
<li>最後創建 REST Client 發出請求，等待回傳 JSON 數據，使用內建的 Gson 解析序列</li>
</ol>
<hr>
<h2 id="Retrofit-2-基本的用法"><a href="#Retrofit-2-基本的用法" class="headerlink" title="Retrofit 2 基本的用法"></a>Retrofit 2 基本的用法</h2><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ul>
<li><p>Gradle 配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile 'com.squareup.retrofit2:retrofit:2.2.0'</div><div class="line">compile 'com.squareup.retrofit2:converter-gson:2.2.0'</div></pre></td></tr></table></figure>
</li>
<li><p>別忘了到 manifest 新增網路的權限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="創建裝載數據-Class"><a href="#創建裝載數據-Class" class="headerlink" title="創建裝載數據 Class"></a>創建裝載數據 Class</h3><p>這邊可以使用 Android Studio 的插件 GsonFormat ，輕鬆將 JSON 轉換為 JavaBean 類別。</p>
<p>安裝方法 -&gt; Settings -&gt; Plugins -&gt; Browse Repositories -&gt; 搜尋 GsonFormat -&gt; restart</p>
<p>新增空白的 Class 後 Alt + Insert</p>
<p><img src="/learn-android-retrofit2/gsonformat1.png" alt=""><br><img src="/learn-android-retrofit2/gsonformat2.png" alt=""></p>
<p>就能夠直接產生一個 JavaBean 的類別 !<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="創建-Retrofit-物件與實作-Interface"><a href="#創建-Retrofit-物件與實作-Interface" class="headerlink" title="創建 Retrofit 物件與實作 Interface"></a>創建 Retrofit 物件與實作 Interface</h3><p>假設今天要到 <code>http://www.api.com/user/{userid}</code> 取得 user 的資料。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 使用 Gson 解析</span></div><div class="line">            .baseUrl(<span class="string">"http://www.api.com/"</span>)</div><div class="line">            .build();</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApiService</span> </span>&#123;</div><div class="line">  <span class="comment">// 會返回一個 call 類別</span></div><div class="line">  <span class="meta">@GET</span>(<span class="string">"user/&#123;userid&#125;"</span>)</div><div class="line">  <span class="function">Call&lt;User&gt; <span class="title">getUser</span><span class="params">(@Path(<span class="string">"userid"</span>)</span> String userid)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="創建要去請求-API-的-Client-Service"><a href="#創建要去請求-API-的-Client-Service" class="headerlink" title="創建要去請求 API 的 Client Service"></a>創建要去請求 API 的 Client Service</h3><ul>
<li><p>創建</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Api apiService = retrofit.create(ApiService.class);</div><div class="line">Call&lt;User&gt; call = apiService.getUser(<span class="string">"123"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>發出請求 (同步)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User user = call.execute();</div></pre></td></tr></table></figure>
</li>
<li><p>發出請求 (異步)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;User&gt;()&#123;  </div><div class="line">         <span class="meta">@Override</span>  </div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response&lt;User&gt; response)</span> </span>&#123;  </div><div class="line">             <span class="comment">//成功後，使用 response.body() 得到結果</span></div><div class="line">             User user = response.body();</div><div class="line">          &#125;  </div><div class="line">          <span class="meta">@Override</span>  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="title">voidonFailure</span><span class="params">(Throwable t)</span> </span>&#123;  </div><div class="line">             <span class="comment">// 請求失敗</span></div><div class="line">         &#125;  </div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="HTTP-API-不同的請求方法"><a href="#HTTP-API-不同的請求方法" class="headerlink" title="HTTP API 不同的請求方法"></a>HTTP API 不同的請求方法</h2><p>以下來自官方的文檔，作為記憶之用，請參考 <a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit Documentation</a></p>
<blockquote>
<p>另外可以參考<br><a href="https://bng86.gitbooks.io/android-third-party-/content/retrofit.html" target="_blank" rel="external">Retrofit · Android third-party 使用心得</a><br><a href="http://www.devwiki.net/2016/03/19/Retrofit-Use-Course-2/" target="_blank" rel="external">Retrofit使用教程(二) | DevWiki Blog</a></p>
</blockquote>
<h3 id="GET-METHOD"><a href="#GET-METHOD" class="headerlink" title="GET METHOD"></a>GET METHOD</h3><ul>
<li><p>假設要讀取用戶列表，不用用到任何參數</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"users/list"</span>)</div><div class="line">Call&lt;List&lt;User&gt;&gt; getUsers();</div></pre></td></tr></table></figure>
</li>
<li><p>可以帶入 query</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"users/list?sort=desc"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>URL 帶入參數</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(<span class="meta">@Path</span>(<span class="string">"id"</span>) <span class="keyword">int</span> groupId);</div></pre></td></tr></table></figure>
</li>
<li><p>若要邊帶入 URL 參數並且 query</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(<span class="meta">@Path</span>(<span class="string">"id"</span>) <span class="keyword">int</span> groupId, <span class="meta">@Query</span>(<span class="string">"sort"</span>) String sort);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="POST-METHOD"><a href="#POST-METHOD" class="headerlink" title="POST METHOD"></a>POST METHOD</h3><ul>
<li><p>假設要更新使用者資料，需要使用 <code>form-encoded</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"user/edit"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">updateUser</span><span class="params">(@Field(<span class="string">"first_name"</span>)</span> String first, @<span class="title">Field</span><span class="params">(<span class="string">"last_name"</span>)</span> String last)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>需要利用 <code>multipart</code> 上傳文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@PUT</span>(<span class="string">"user/photo"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">updateUser</span><span class="params">(@Part(<span class="string">"photo"</span>)</span> RequestBody photo, @<span class="title">Part</span><span class="params">(<span class="string">"description"</span>)</span> RequestBody description)</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>使用過 Retrofit 的確比 Volley 的用法更簡潔方便了，再來就要試試怎麼樣引入 RxJava 當中。多多實作再來了解其中的運作原理吧 !</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習 Android Data Binding]]></title>
      <url>/learn-android-databinding/</url>
      <content type="html"><![CDATA[<p>為了要在 Android 更方便的運作 NVVM 架構， Google 推出了 Data Binding 並且在 Android Studio 2.0.0 版本能夠正式的使用。</p>
<p>在還沒遇見 Data Binding 之前，例如要架構一個登入的 Activity ，必須要先去編寫 UI 的 XML ，並給每個需要與用戶互動的 View 一個 View ID 。建構好 UI 的部分後， 再去 java 編寫 findViewById() 、 setText() 、 setVisibility() 、 使用 Picasso 之類的第三方操作圖片⋯。</p>
<p>雖然我們可以利用 Butterknife 之類的 Library，降低大量重複煩躁的程式碼，但在更新時還是會同時干涉到 XML 與 java 。有了 Data Binding ，能夠進一步減輕開發的力氣，那就實際操作來學習看看吧。</p>
<blockquote>
<p>好文參考<br><a href="https://news.realm.io/cn/news/data-binding-android-boyar-mount/" target="_blank" rel="external">棉花糖給Android 帶來的Data Bindings</a><br><a href="https://goo.gl/iJhLb1" target="_blank" rel="external">Android Data Binding 系列(一) – 详细介绍与使用</a></p>
</blockquote>
<p>第一個網站為 Android Data Binding 發表的詳細講解，有詳細的講述 Data Binding 背後的運行，所以在這篇文章就不詳細探討，而是實作 Data Binding 的技術。</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>在 app 的 build.gradle 新增 dataBinding<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ....</div><div class="line">    dataBinding &#123;</div><div class="line">        enabled = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="最簡單的用法"><a href="#最簡單的用法" class="headerlink" title="最簡單的用法"></a>最簡單的用法</h2><h3 id="定義-Model"><a href="#定義-Model" class="headerlink" title="定義 Model"></a>定義 Model</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定義-layout-檔"><a href="#定義-layout-檔" class="headerlink" title="定義 layout 檔"></a>定義 layout 檔</h3><p>Data Binding 的 layout 檔與以前的寫法不同了。view 不在需要 ID ，不需要再回到 java 依序配對。這表示在未來新增新的 UI 時，會變得更方便。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="comment">&lt;!-- 注目點 1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 注目點 2 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"user"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.sekaij.ddpractice.User"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"> 	......</div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line"> 	<span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"@&#123;user.name&#125;"</span>     </div><div class="line">                <span class="attr">tools:text</span>=<span class="string">"username"</span> /&gt;</div><div class="line">                            <span class="comment">&lt;!-- 注目點 3 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><p>Data Binding 中的 layout 以 <code>&lt;layout&gt;</code> 作為最頂端的節點</p>
<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p>在 <code>&lt;data&gt;</code> 內定義與這個 layout 有相關互動的物件</p>
<h4 id=""><a href="#" class="headerlink" title="@{}"></a>@{}</h4><p>使用表達式 <code>@{}</code> 與物件產生連結。我們可以使用 tools 佈置介面。</p>
<h3 id="在-Activity-綁定數據"><a href="#在-Activity-綁定數據" class="headerlink" title="在 Activity 綁定數據"></a>在 Activity 綁定數據</h3><p>Data Binding 會依照 layout 檔自動產生 Binding 的 Class ，例如 <code>login_activity.xml</code> ，會產生一個名為 <code>(LoginActivity)Binding</code> 的 Class。</p>
<p>他代表了所有我們定義的綁定關係，所以必須在 inflate 創建他，後面在 recyclerView 也是如此。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ActivityMainBinding binding; <span class="comment">// 自動產生 binding 類別</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</div><div class="line"></div><div class="line">        User user = <span class="keyword">new</span> User(<span class="string">"Jay"</span>);</div><div class="line">        binding.setUser(user); <span class="comment">// 自動根據 data 中的 variable 產生方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="表達式"><a href="#表達式" class="headerlink" title="表達式"></a>表達式</h3><p>回到 <code>@{}</code> 表達式，除了可以利用如 <code>@{user.name}</code> 來綁定數據外，也可以加入一些簡單的邏輯運算。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 基本款</div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:text</span>=<span class="string">"@&#123;user.name&#125;"</span>/&gt;</span> </div><div class="line"></div><div class="line"></div><div class="line">// 可以加入 ”三元運算子“ 來判斷</div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:text</span>=<span class="string">"@&#123;user.age &lt; 18 ? @string/redacted : user.name&#125;"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">// 也可以添加 View 來判斷 VISIBLE</div><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span> <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:visibility</span>=<span class="string">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">// 原本需要判斷是否為 null 的三元運算，也能夠使用合併運算符號 ?? 來判斷了</div><div class="line">contact.lastName != null ? contact.lastName : contact.name</div><div class="line"></div><div class="line">// 如果 lastName 為 null 就用 name ，不為空就使用自己</div><div class="line">contact.lastName ?? contact.name</div></pre></td></tr></table></figure></p>
<p>如果要引入資源時，則利用如 <code>@{@color/white}</code> 方式來引入。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">...</span> <span class="attr">android:background</span>=<span class="string">"@&#123;user.admin ? @color/colorAccent : @color/white&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">...</span> <span class="attr">android:padding</span>=<span class="string">"@&#123;isBig ? @dimen/bigPadding : @dimen/smallPadding&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="事件處理-Event"><a href="#事件處理-Event" class="headerlink" title="事件處理 (Event)"></a>事件處理 (Event)</h2><h3 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h3><p>首先先定義 click Event 的類別。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span> </span>&#123;</div><div class="line"></div><div class="line">        Context context;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EventHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.context = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 因為綁定 view ， 所以需要設定參數 view</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClicked</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            Toast.makeText(context, <span class="string">"Success ! "</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>別忘了 在 binding 中設定 handler ！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EventHandler handler = <span class="keyword">new</span> EventHandler(<span class="keyword">this</span>);</div><div class="line">binding.setHandler(handler);</div></pre></td></tr></table></figure></p>
<p>接著在 layout 檔定義 handler 的 variable ，並且代入 onclick<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"handler"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.sekaij.ddpractice.MainActivity.EventHandler"</span>/&gt;</div><div class="line"></div><div class="line">// 記得使用 `::` ， `.` 已經棄用</div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:onClick</span>=<span class="string">"@&#123;handler::onClicked&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>也可以使用 java 8 提供的 lambda 表達式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:onClick</span>=<span class="string">"@&#123;(v) -&gt; handler.onClicked(v)&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 可以不帶入 view --&gt;</span></div><div class="line"><span class="comment">&lt;!-- public void onClicked() &#123;...&#125; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; handler.onClicked()&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="帶入函數"><a href="#帶入函數" class="headerlink" title="帶入函數"></a>帶入函數</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User(<span class="string">"Jay"</span>);</div><div class="line">binding.setUser(user);</div><div class="line"></div><div class="line">EventHandler handler = <span class="keyword">new</span> EventHandler(<span class="keyword">this</span>);</div><div class="line">binding.setHandler(handler);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonClicked</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    Toast.makeText(view.getContext(), <span class="string">"Success ! "</span> + user.getName() + <span class="string">" 様"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; handler.onButtonClicked(user)&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="可觀測性-Observable"><a href="#可觀測性-Observable" class="headerlink" title="可觀測性 Observable"></a>可觀測性 Observable</h2><p>Data Binding 還能夠在數據更新時，通知 UI 變動， 只需將要更新變動的 object 繼承 BaseObservable 類別<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bindable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        notifyPropertyChanged(BR.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BR 是編譯後產生的一個類別，會去尋找被標註 @Bindable 的 getter 方法，在 BR 中產生對應的值。<br>當數據更新後， <code>notifyPropertyChanged</code> 會通知系統 <code>BR.name</code> 已經變動，需要更新 UI 。</p>
<h3 id="ObservableFields"><a href="#ObservableFields" class="headerlink" title="ObservableFields"></a>ObservableFields</h3><p>如果覺得要設定 getter 與 setter 很麻煩，可以設定 ObservableField 以及衍生的 ObservableBoolean 、 ObservableInt ⋯ etc 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableUser</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 一定要加 public final</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; name = <span class="keyword">new</span> ObservableField&lt;&gt;();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableBoolean isAdmin = <span class="keyword">new</span> ObservableBoolean();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableUser</span><span class="params">(String name, <span class="keyword">boolean</span> isAdmin)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name.set(name);</div><div class="line">        <span class="keyword">this</span>.isAdmin.set(isAdmin);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定義</span></div><div class="line">ObservableUser observableUser = <span class="keyword">new</span> ObservableUser(<span class="string">"Jay"</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// 取得值</span></div><div class="line">String name = observableUser.name.get();</div><div class="line"></div><div class="line"><span class="comment">// 設定值</span></div><div class="line">observableUser.name.set(<span class="string">"Wei"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="ObservableArrayMap"><a href="#ObservableArrayMap" class="headerlink" title="ObservableArrayMap"></a>ObservableArrayMap</h3><p>我們還可以使用 key-value 來存取數據，Data Binding 提供了 ObservableArrayMap 類別。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ObservableArrayMap&lt;String, String&gt; item = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</div><div class="line"></div><div class="line">item.put(<span class="string">"age"</span>, <span class="string">"20"</span>);</div><div class="line">binding.setItem(item);</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">    <span class="attr">name</span>=<span class="string">"item"</span></div><div class="line">    <span class="attr">type</span>=<span class="string">"android.databinding.ObservableArrayMap&amp;lt;String,String&amp;gt;"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- &amp;lt; 與 &amp;gt; 代替 &lt; &gt; ， 雖然會顯示錯誤 但編譯正常 --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:text</span>=<span class="string">'@&#123;item["age"]&#125;'</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用 [] 讀取數據 --&gt;</span></div></pre></td></tr></table></figure>
<h2 id="BindingAdapter"><a href="#BindingAdapter" class="headerlink" title="BindingAdapter"></a>BindingAdapter</h2><p>除了基本的設定 setText 以外，當我們要設定圖片時怎麼辦，如果不是從 drawable 讀檔而是從 url ， 如果還想要使用 Picasso ， Glide 等第三方加載圖片時呢？ 這可以用 <code>BindingAdapter</code> 來解決！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDataBindingAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindingAdapter</span>(<span class="string">"picasso"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(ImageView view, String url)</span> </span>&#123;</div><div class="line">        Picasso.with(view.getContext()).load(url).into(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">app:picasso</span>=<span class="string">"@&#123;user.imgURL&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>如此一來，我們就可以自己定義自己想要的 setter 了！</p>
<p>在 @BindingAdapter 註解的後面，也可以放入多個參數如 ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"imageUrl"</span>, <span class="string">"error"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</div><div class="line">    Glide.with(view.getContext()).load(url).error(error).into(view);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span> </span></div><div class="line">    <span class="attr">app:imageUrl</span>=<span class="string">"@&#123;url&#125;"</span></div><div class="line">    <span class="attr">app:error</span>=<span class="string">"@&#123;@drawable/ic_launcher&#125;"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="RecyclerView-運用"><a href="#RecyclerView-運用" class="headerlink" title="RecyclerView 運用"></a>RecyclerView 運用</h2><p>Data Binding 節省了 ViewHolder 的程式碼，不需要再定義 findViewById ，不需要 holder.location = … ，只需要使用 binding 類別給予的 inflate 進行綁定。</p>
<h3 id="定義-Observable-物件與-ClickHandler"><a href="#定義-Observable-物件與-ClickHandler" class="headerlink" title="定義 Observable 物件與 ClickHandler"></a>定義 Observable 物件與 ClickHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeZone</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; location = <span class="keyword">new</span> ObservableField&lt;&gt;();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; time = <span class="keyword">new</span> ObservableField&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeZone</span><span class="params">(String loc, String time)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.location.set(loc);</div><div class="line">        <span class="keyword">this</span>.time.set(time);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeZoneClickHandler</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onTimeZoneClick</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定義-item-layout"><a href="#定義-item-layout" class="headerlink" title="定義 item layout"></a>定義 item layout</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"timeZone"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.sekaij.ddpractice.TimeZone"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"handler"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.sekaij.ddpractice.TimeZoneClickHandler"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; handler.onTimeZoneClick()&#125;"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@android:color/darker_gray"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;timeZone.location&#125;"</span></div><div class="line">            <span class="attr">tools:text</span>=<span class="string">"location"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@&#123;timeZone.time&#125;"</span></div><div class="line">            <span class="attr">tools:text</span>=<span class="string">"time"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="定義-ViewHolder"><a href="#定義-ViewHolder" class="headerlink" title="定義 ViewHolder"></a>定義 ViewHolder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeZoneViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> RecyclerViewItemBinding binding;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TimeZoneViewHolder</span><span class="params">(RecyclerViewItemBinding binding)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(binding.getRoot());</div><div class="line">            <span class="keyword">this</span>.binding = binding;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindTo</span><span class="params">(TimeZone timeZone)</span> </span>&#123;</div><div class="line">        	binding.setTimeZone(timeZone);</div><div class="line"></div><div class="line">            <span class="comment">// binding.setVariable(BR.timeZone, timeZone); </span></div><div class="line">            <span class="comment">// 如果在 xml 定義的 variable 是與他人共用相同的 data ，需要使用這個方法</span></div><div class="line"></div><div class="line">            binding.executePendingBindings();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandler</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> TimeZone timeZone)</span> </span>&#123;</div><div class="line">            binding.setHandler(<span class="keyword">new</span> TimeZoneClickHandler() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeZoneClick</span><span class="params">()</span> </span>&#123;</div><div class="line">                    String location = timeZone.location.get();</div><div class="line">                    String time = timeZone.time.get();</div><div class="line">                    Toast.makeText(context, location + <span class="string">" : "</span> + time, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>這邊需要注意的是 <font style="color:red"> executePendingBindings </font> 這個方法，當我們設定數據時，數據綁定要等到下一個動畫幀才會觸發，所以我們才需要這個方法，強制執行更新 UI。</p>
<h3 id="定義-Adapter"><a href="#定義-Adapter" class="headerlink" title="定義 Adapter"></a>定義 Adapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeZoneRecyclerAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">TimeZoneRecyclerAdapter</span>.<span class="title">TimeZoneViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;TimeZone&gt; timeZoneList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeZoneRecyclerAdapter</span><span class="params">(Context context, ArrayList&lt;TimeZone&gt; timeZoneList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.timeZoneList = timeZoneList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TimeZoneViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());</div><div class="line">        RecyclerViewItemBinding binding = RecyclerViewItemBinding.inflate(layoutInflater, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TimeZoneViewHolder(binding);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(TimeZoneViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        holder.bindTo(timeZoneList.get(position));</div><div class="line">        holder.setHandler(context, timeZoneList.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> timeZoneList.size();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="結"><a href="#結" class="headerlink" title="結"></a>結</h2><p>Data Binding 讓我們能夠在 xml 定義一些表達式，讓 UI 跟 Activity 降低更多耦合，但也不代表我們能把全部的邏輯都放到 xml ， 然後不用再寫 java 。</p>
<p>例如我們不應該在 xml 使用一個發送網路訊息的功能。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">android:click</span>=<span class="string">"@&#123;webservice.sendMoneyAsync&#125;"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>我們應該只處理一些關於 UI 介面的事情。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">android:click</span>=<span class="string">"@&#123;presenter.onSendClick&#125;"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>到此，還有很多 Data Binding 與 DI 的運用，以及將 Data Binding 帶進更棒的 NVVM 架構，所以，多學吧！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Data Binding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習 Android 依賴注入框架 Dagger2]]></title>
      <url>/learn-android-dagger2/</url>
      <content type="html"><![CDATA[<p>從上一篇 <a href="https://windsuzu.github.io/2017/04/22/learn-android-dependency-injection/">學習 Android 依賴注入 Dependency Injection (DI)</a> 我們知道，單純的手動使用 DI 進行編寫，會發生不斷依賴反而讓程式碼變得更複雜的問題。所以這次要來學習前人的智慧 DI 框架的使用，我選擇使用 Dagger2 作為學習的框架。不僅僅因為 Dagger2 的名聲響亮， Dagger2 除了被推崇為最好解決 Android DI 的框架，也適合進行單元測試，更棒的是網路上已經有大量的學習文章了！</p>
<blockquote>
<p>好文參考<br><a href="http://chriszou.com/2016/05/10/android-unit-testing-di-dagger.html" target="_blank" rel="external">小創作- Android單元測試（六）：使用dagger2來做依賴注入，以及在單元測試中的應用</a><br><a href="http://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="external">Android：dagger2讓你愛不釋手-基礎依賴注入框架篇</a></p>
</blockquote>
<h2 id="使用-Dagger2-流程"><a href="#使用-Dagger2-流程" class="headerlink" title="使用 Dagger2 流程"></a>使用 Dagger2 流程</h2><div id="flowchart-0" class="flow-chart"></div>

<h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><p>回到上次慘不忍睹的程式碼，不斷的創建造成開發效率變得很低。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> ModuleA moduleA;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ModuleD moduleD = <span class="keyword">new</span> ModuleD();</div><div class="line">        ModuleE moduleE = <span class="keyword">new</span> ModuleE();</div><div class="line"></div><div class="line">        ModuleC moduleC = <span class="keyword">new</span> ModuleC(moduleE);</div><div class="line">        ModuleB moduleB = <span class="keyword">new</span> ModuleB(moduleC, moduleD);</div><div class="line"></div><div class="line">        moduleA = <span class="keyword">new</span> ModuleA(moduleB);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Dagger2 使用註解 (Annotations) 來標註 Client 所依賴的 dependency ，這個註解的名字稱作 @Inject 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleA</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ModuleB moduleB;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModuleA</span><span class="params">(ModuleB moduleB)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.moduleB = moduleB;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同樣的，也用註解 @Inject 來標註 dependency 的 構造函數 (Constructor)<br>讓 Client 的 dependency 與 dependency 的 Constructor 產生無形的連結。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleB</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ModuleC moduleC;</div><div class="line">    <span class="keyword">private</span> ModuleD moduleD;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModuleB</span><span class="params">(ModuleC moduleC, ModuleD moduleD)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.moduleC = moduleC;</div><div class="line">        <span class="keyword">this</span>.moduleD = moduleD;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Module"><a href="#Module" class="headerlink" title="@Module"></a>@Module</h2><p>另一種讓 dependency 之間產生無形連結的方法，就是透過 Module 。<br>Module 就像一個工廠一樣，我們統一在 Module 裡生產相關的 dependency。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleA <span class="title">provideModuleA</span><span class="params">(ModuleB moduleB)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleA(moduleB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleB <span class="title">provideModuleB</span><span class="params">(ModuleC moduleC, ModuleD moduleD)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleB(moduleC, moduleD);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleC <span class="title">provideModuleC</span><span class="params">(ModuleE moduleE)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleC(moduleE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleD <span class="title">provideModuleD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleD();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleE <span class="title">provideModuleE</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleE();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Module 就是一個 Class ，不過這個 Class 需要用 @Module 來標註，讓 Dagger2 能夠判斷。<br>創建好 Module 後，就可以在 Module 中生產每個 dependency 了。</p>
<h3 id="Provides"><a href="#Provides" class="headerlink" title="@Provides"></a>@Provides</h3><p>既然 Module 是一個 Class ，那在 Module 中就可以有負責生產 dependency 的 Method ，也可以有負責做其他事情的 Method 。</p>
<p>這種專門為了生產 dependency 的 Method 稱作 Provider ，要利用 @Provides 標註。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleA <span class="title">provideModuleA</span><span class="params">(ModuleB moduleB)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleA(moduleB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleB <span class="title">provideModuleB</span><span class="params">(ModuleC moduleC, ModuleD moduleD)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleB(moduleC, moduleD);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleC <span class="title">provideModuleC</span><span class="params">(ModuleE moduleE)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleC(moduleE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleD <span class="title">provideModuleD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleD();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleE <span class="title">provideModuleE</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleE();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Provides 有一個好處，今天要使用 ModuleA 的時候，系統看到 ModuleA 需要 ModuleB ，就會去找其他 Provider ，看有沒有生產 ModuleB 的 Provider ，然後創建一個 ModuleB 給 ModuleA 使用。<br>如果 ModuleB 還需要其他 dependency ，系統就會繼續找下去，直到所有 dependency 都被滿足。</p>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context ?"></a>Context ?</h3><p>那假如今天有一個 Provider 需要 Context 怎麼辦呢，例如 SharedPreferences 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">provideContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModuleD <span class="title">provideModuleD</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleD(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之前說過 Module 也是 Class 的一種，那我在產生 Module 時，就可以利用 Module 的 Constructor 引入 Context 囉！</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>知道了 @Module 和 @Inject 的用法，那要怎麼讓那些被 @Inject 與 @Module 的 dependency 產生直接的連結，然後在 Activity 上被更簡單的創建使用？</p>
<p>這就是 Component 大展身手的時候了， Component 扮演了 Injector 的角色，就像注入者一般把那些已經產生無形連結的 dependency 注入 Client 中。</p>
<p>Component 跟 Module 不同了， 不是 Class 而是 Interface 。當然，也要用 @Component 標註一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Component-與-Inject"><a href="#Component-與-Inject" class="headerlink" title="Component 與 Inject"></a>Component 與 Inject</h3><p>今天如果 ModuleA、B、C … 都已經做好 Constructor 的 Inject 時，那要怎麼在 MainActivity 實現 ModuleA 呢。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先要在 Component 裡定義一個 inject 的方法，意思就是告訴 Component 到 MainActivity 中，去找所有被 @Inject 的物件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    ModuleA moduleA; <span class="comment">// Inject 的物件不能設為 private 不然 Component 會找不到</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ApplicationComponent component = DaggerApplicationComponent.builder().build();</div><div class="line">        component.inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>dagger2 會對所有經過 @Component 標註過的 interface 進行處理，自動產生一個實現了這個 interface 的 Class ， Class 的名字就是 Component 的名字前面加上“Dagger”，例如 ApplicationComponent 就會變成 DaggerApplicationComponent 。</p>
<p>找到被 @Inject 註解的 ModuleA 之後，Component 繼續去找 ModuleA 的 dependency 被標註的 Constructor ，對應就是被 @Inject 標註的 ModuleB Constructor ，並創建 ModuleB 返回給 ModuleA 。一樣，如果 ModuleB 也有相對應的 dependency ， Component 也會不斷的找下去。</p>
<h3 id="Component-與-Module"><a href="#Component-與-Module" class="headerlink" title="Component 與 Module"></a>Component 與 Module</h3><p>實際操作時，可能會創建多個 Module 負責不同的 dependency ，也有可能有多個 Component 。<br>所以要怎麼讓 Component 知道去哪裡找 dependency 呢？<br>Dagger2 規定，我們必須要指定 Component 負責的 Module 是誰，就在 @Component 註解的後面定義。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;ApplicationModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</div><div class="line">    <span class="function">ModuleA <span class="title">moduleA</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果 MainActivity 需要 ModuleA ，那我們就在 Component 裡定義一個返回 ModuleA 的方法。<br>這樣一來， Component 在產生 ModuleA 的時候，就會到 Module 裡面去尋找 ModuleA 相關的 dependency ，一樣創建返回給 ModuleA。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ModuleA moduleA;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ApplicationComponent component = DaggerApplicationComponent.builder().build();</div><div class="line">        moduleA = component.moduleA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>呼叫 Module 中的 Provider 除了用這種方式，還可以用原本的 Inject 的方式操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Component 會到 MainActivity 找所有被 @Inject 的物件，然後回到 Module 中使用對應的 Provider ，在返回給物件。</p>
<h2 id="結"><a href="#結" class="headerlink" title="結"></a>結</h2><p>到這邊都只是用了簡單的 Inject、Module、Component 來完成 DI ，還有好多 Dagger2 的功能，像是 Singleton、Scope ，怎麼樣分配 Component 的工作，還沒有提到。希望在大量的練習之後，能夠更深入去分析 Dagger2。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> DI </tag>
            
            <tag> Dependency Injection </tag>
            
            <tag> 依賴注入 </tag>
            
            <tag> Dagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習 Android 依賴注入 Dependency Injection (DI)]]></title>
      <url>/learn-android-dependency-injection/</url>
      <content type="html"><![CDATA[<p>之前學到的幾種 Android 設計架構，都是為了要讓程式碼簡化，使得程式可讀性變高，以及更順利、簡單的進行單元測試。而在 <a href="http://chriszou.com/2016/05/06/android-unit-testing-di.html" target="_blank" rel="external">Android單元測試（五）：依賴注入，將mock方便的用起來</a> 這篇文章學習單元測試時，發現依賴注入 (Dependency Injection，DI)能夠讓單元測試變得更容易，甚至可以讓 App 的架構變得更乾淨。究竟 DI 是何方神聖，身為一個入門開發者一定要來學一下。</p>
<h2 id="什麼是依賴注入"><a href="#什麼是依賴注入" class="headerlink" title="什麼是依賴注入"></a>什麼是依賴注入</h2><p>根據 <a href="http://android.jobbole.com/82386/" target="_blank" rel="external">聊聊 Android 中的依賴注入</a> 這篇文章敘述，原來 DI 只是一種 設計模式 (design pattern) ，而且還有許多的框架可以使用。 DI 的目的就是讓開發者能夠寫出”低耦合“的程式碼，不但能更輕鬆的進行單元測試，也幫助維持整個 App 的架構。畢竟如果一款要生存長久的 App ，開發的時間就會越長，往往測試的效率就會慢慢地降低。所以善用 DI 來改善設計，增加可維護性、可拓展性、降低耦合，試著讓程式簡潔優雅一些吧。</p>
<h2 id="依賴注入的概念"><a href="#依賴注入的概念" class="headerlink" title="依賴注入的概念"></a>依賴注入的概念</h2><h3 id="什麼是-Dependency"><a href="#什麼是-Dependency" class="headerlink" title="什麼是 Dependency ?"></a>什麼是 Dependency ?</h3><p>在 DI 的觀念裡有兩個角色 : Client 、 Dependency ，如果在 App 裡面，有 A Class 用到了 B Class ，那麼 A 就是 Client ，而 B 則是 Dependency 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleA</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> ModuleB moduleB;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ModuleA</span><span class="params">()</span> </span>&#123;</div><div class="line">      moduleB = <span class="keyword">new</span> ModuleB();  <span class="comment">// A 產生了對 B 的 dependency</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="什麼是-Injection"><a href="#什麼是-Injection" class="headerlink" title="什麼是 Injection ?"></a>什麼是 Injection ?</h3><p>上面的程式碼中， B 在外部已經創建好， 接著就像被注入 (Inject) 一般 set 到 Client 的 A裡面，這就算是 DI 的一種方式。但是在上面的例子中 A 和 B 之間還是存在高度耦合，不算是一個很好的 Injection ，一般常用的方法，是透過 client 的 Constructor 將 dependency 傳入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleA</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> ModuleB moduleB;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ModuleA</span><span class="params">(ModuleB moduleB)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.moduleB = moduleB;  <span class="comment">// 將 B 作為 A 的 Constructor 參數傳入</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>現在，A Class 不需要知道如何去實現 B ，只要任何繼承了 B 的 Class 都可以傳入，降低兩者間的耦合。<br>到這邊就是 DI 的概念，簡單。</p>
<h2 id="依賴注入的問題"><a href="#依賴注入的問題" class="headerlink" title="依賴注入的問題"></a>依賴注入的問題</h2><p>習得了 DI 技能馬上就去打 Boss ，發現了一個天大的問題。如果你手動一個一個一個的新增 dependency ，你會發現、你會訝異，所有的 dependency 從最頂端的 Client 一直延伸開來。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 如果原本的 ModuleB 也需要兩個 dependency C &amp; D</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleB</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> ModuleC moduleC;</div><div class="line">   <span class="keyword">private</span> ModuleD moduleD;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ModuleB</span><span class="params">(ModuleC moduleC, ModuleD moduleD)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.moduleC = moduleC;</div><div class="line">      <span class="keyword">this</span>.moduleD = moduleD;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而 ModuleC 還需要 Module E !</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleC</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> ModuleE moduleE;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ModuleC</span><span class="params">(ModuleE moduleE)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.moduleE = moduleE;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那可憐 Activity 要呼叫 ModuleA 時就會變成這樣 。･ﾟ･(つд`ﾟ)･ﾟ･<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> ModuleA moduleA;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        ModuleD moduleD = <span class="keyword">new</span> ModuleD();</div><div class="line">        ModuleE moduleE = <span class="keyword">new</span> ModuleE();</div><div class="line"></div><div class="line">        ModuleC moduleC = <span class="keyword">new</span> ModuleC(moduleE);</div><div class="line">        ModuleB moduleB = <span class="keyword">new</span> ModuleB(moduleC, moduleD);</div><div class="line"></div><div class="line">        moduleA = <span class="keyword">new</span> ModuleA(moduleB);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有夠亂啊 !!!<br>還好，前人們在很早以前使用 DI 時早就出現了這樣的問題，所以早就有許多解決使用 DI 問題的框架。</p>
<h2 id="依賴注入的框架"><a href="#依賴注入的框架" class="headerlink" title="依賴注入的框架"></a>依賴注入的框架</h2><p>現在我們的問題是，如果有越來越多的 dependency 被我製造時，這些 dependency 可能會在不同的 client class 被 new 出來， 不但變得更複雜了，而且還重複了一堆程式碼。</p>
<p>而在 Java 的領域中，已經有很多框架幫助我們解決問題，例如最近流行的一種框架叫作 Dagger2 。</p>
<p>這些框架幫助我們建立一個類似 dependency 的工廠，所有的 dependency ，還是 dependency 的 dependency ，都要統一在這個工廠裡生產。所有要用到這些 dependency 的 client 就去這個工廠取得，而且 client 只需要知道他要用的 dependency 是誰，不需要知道他要的 dependency 又用了哪些 dependency ， 框架系統會自動幫我們判斷。</p>
<p>所以接著來學學怎麼使用 Dagger2 吧！</p>
]]></content>
      
        <categories>
            
            <category> 軟體工程 </category>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 軟體工程 </tag>
            
            <tag> Android </tag>
            
            <tag> DI </tag>
            
            <tag> Dependency Injection </tag>
            
            <tag> 依賴注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[練習在 Android 設計上的 MVC, MVP, MVVM 架構]]></title>
      <url>/learn-android-architecture-pattern/</url>
      <content type="html"><![CDATA[<p>一個人單打獨鬥設計 App ，可能不需要太講究架構，而是注重 App 的完整性與功能性，但是太凌亂的設計開發，反而會降低開發的效率，在未來的維護也會造成很大的麻煩。</p>
<p>層次分明、架構清楚漂亮的代碼，能夠實現低耦合的模組化，不但看起來賞心悅目，也讓自己在開發測試上變得更容易。在未來，如果有緣與他人合作，熟悉各種架構寫法的人，肯定也是吃香的。</p>
<p>為此，這次要來學習怎麼在 Android 上建立幾種軟體架構。當然，我們不能為了設計而設計，一個簡單的 App ，卻為了設計而花費更多成本，反而本末倒置。</p>
<blockquote>
<p>好文參考<br><a href="https://realm.io/news/eric-maxwell-mvc-mvp-and-mvvm-on-android/" target="_blank" rel="external">MVC vs. MVP vs. MVVM on Android</a><br><a href="https://www.tianmaying.com/tutorial/AndroidMVC" target="_blank" rel="external">Android App的设计架构：MVC,MVP,MVVM与架构经验谈</a><br><a href="http://blog.csdn.net/feiduclear_up/article/details/46363207" target="_blank" rel="external">框架模式 MVC 在Android中的使用</a><br><a href="https://rocko.xyz/2015/02/06/Android%E4%B8%AD%E7%9A%84MVP/" target="_blank" rel="external">Android中的MVP | Rocko’s blog</a></p>
</blockquote>
<p><img src="/learn-android-architecture-pattern/ui.jpg" style="float: right;margin: 15px" height="150" width="150"></p>
<h2 id="先認識-M-V-X"><a href="#先認識-M-V-X" class="headerlink" title="先認識 M - V - X"></a>先認識 M - V - X</h2><p>Model View Controller (MVC) 已經是一種很廣泛流行的架構模式，近幾年也被運用到組織 Android App 上。 隨後衍生的 Model View Presenter (MVP) &amp; Model View ViewModel (MVVM) ，兩種不同的架構也在各種開發者的推崇下，分為好幾派。</p>
<p>不過每種架構在開發上都有好有壞，要如何在適當的時機運用適當的架構，讓開發變得更得心應手，才我們真正要學習的，所以這次藉由這篇 <a href="https://realm.io/news/eric-maxwell-mvc-mvp-and-mvvm-on-android/" target="_blank" rel="external">Read MVC vs. MVP vs. MVVM on Android</a> ， 試著利用不同的架構，寫出一個 “ 圈叉遊戲 “ ！</p>
<h2 id="Android-中的-MVC"><a href="#Android-中的-MVC" class="headerlink" title="Android 中的 MVC"></a>Android 中的 MVC</h2><p>在 Model View Controller 的設計理念中， Model 處理數據及邏輯， View 顯示邏輯結果， Controller 則負責起到兩者的橋樑，藉此來達到分離 Model 與 View ，做到高聚合與低耦合的模組化。</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>Model 在 “圈叉遊戲” 中，要為我們處理 <strong>資料 + 狀態 + 邏輯運算</strong> ，簡單來說就是這個 App 的大腦。 Model 不被綁定在 View 或 Controller ，也因此他還能具備 reuseable 的特質。</p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>View 在此則是擔任將 Model 視覺化的要角。 View 需要去執行 UI 相關的工作，或當 user 與 app 互動時與 Controller 溝通。 他不會參與到太多有關邏輯運算的工作，也不需知道 user 與 app 互動時的狀態為何。</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>Controller 就像膠水一樣把整個 App 聯繫在一起。當 View 告知 Controller 說 User 按下按鈕時， Controller 就要決定怎麼與 Model 互動，產生新的邏輯結果，並且反映更新 View 的介面。 通常在 Android 裡， Activity 與 Fragment 就是擔任 Controller 的角色。</p>
<p><img src="/learn-android-architecture-pattern/mvc.png" style="float: right;margin: 15px" height="250" width="250"></p>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p></p><p style="color:red">Model 負責遊戲中三個重要元素</p>
<ul>
<li>Board : 運作遊戲的邏輯 (重新開始、換誰下、下在哪裡⋯⋯等)</li>
<li>Cell : 定義遊戲內每一個 cell 的值</li>
<li>Player : 定義玩家 O , X</li>
</ul>
<p></p><p style="color:blue">View 負責顯示 OX 遊戲的介面，與 menu 中的 reset 按鈕</p>
<p></p><p style="color:green">Controller 則擔任與 View 、 Model 互動的角色<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicTacToeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Board Model;</div><div class="line"></div><div class="line">    <span class="comment">/* 被引用的 View 物件 */</span></div><div class="line">    <span class="keyword">private</span> ViewGroup buttonGrid;</div><div class="line">    <span class="keyword">private</span> View winnerPlayerViewGroup;</div><div class="line">    <span class="keyword">private</span> TextView winnerPlayerLabel;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.tictactoe);</div><div class="line"></div><div class="line">        winnerPlayerLabel = (TextView) findViewById(R.id.winnerPlayerLabel);</div><div class="line">        winnerPlayerViewGroup = findViewById(R.id.winnerPlayerViewGroup);</div><div class="line">        buttonGrid = (ViewGroup) findViewById(R.id.buttonGrid);</div><div class="line"></div><div class="line">        Model = <span class="keyword">new</span> Board();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 綁定 reset() 到 menu reset 按鈕 */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.action_reset:</div><div class="line">                reset();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 當 cell 被 user 點擊時觸發， 我們更新 Model 並等待回傳值 Player</span></div><div class="line">    <span class="comment">// 如果這一步其中一個人贏，則顯示"贏家提示"的 View </span></div><div class="line">    <span class="comment">// 否則就將這一步的Player mark 到 cell 裡 </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCellClicked</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">        Button button = (Button) v;</div><div class="line"></div><div class="line">        String tag = button.getTag().toString();</div><div class="line">        <span class="keyword">int</span> row = Integer.valueOf(tag.substring(<span class="number">0</span>, <span class="number">1</span>));</div><div class="line">        <span class="keyword">int</span> col = Integer.valueOf(tag.substring(<span class="number">1</span>, <span class="number">2</span>));</div><div class="line"></div><div class="line">        Player playerThatMoved = Model.mark(row, col);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (playerThatMoved != <span class="keyword">null</span>) &#123;</div><div class="line">            button.setText(playerThatMoved.toString());</div><div class="line">            <span class="keyword">if</span> (Model.getWinner() != <span class="keyword">null</span>) &#123;</div><div class="line">                winnerPlayerLabel.setText(playerThatMoved.toString());</div><div class="line">                winnerPlayerViewGroup.setVisibility(View.VISIBLE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 把"贏家提示"的 View 隱藏及清空 Board ，並告訴 Model 要 restart game 了 */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        winnerPlayerViewGroup.setVisibility(View.GONE);</div><div class="line">        winnerPlayerLabel.setText(<span class="string">""</span>);</div><div class="line"></div><div class="line">        Model.restart();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buttonGrid.getChildCount(); i++) &#123;</div><div class="line">            ((Button) buttonGrid.getChildAt(i)).setText(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>MVC 有效的分離了 View 與 Model ，我們因此可以更簡單的測試 Model ， 也不需要針對 View 進行測試。但在 Controller 的部分還有一些問題:</p>
<ul>
<li>靈活度低 : Controller 跟 View 緊密耦合，一但更新了 View 也必須回到 Controller 修改。</li>
<li>可測試性 : Controller 綁定了 Android APIs ，很難進行單元測試。</li>
<li>維護性低 : 隨著不斷的開發，更多的代碼會被放在 Controller 當中，造成臃腫的現象。</li>
</ul>
<h2 id="Android-中的-MVP"><a href="#Android-中的-MVP" class="headerlink" title="Android 中的 MVP"></a>Android 中的 MVP</h2><p>MVP 將 Controller 換成了 Presenter ， 意味著要降低 Controller 與 View 的緊密耦合， 讓 Activity 不再臃腫。</p>
<h3 id="Model-1"><a href="#Model-1" class="headerlink" title="Model"></a>Model</h3><p>與 MVC 一樣，繼續處理 App 的 <strong>資料 + 狀態 + 邏輯運算</strong> 。</p>
<h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a>View</h3><p>既然 View 與 Activity 的關係密不可分， MVP 就將 Activity 與 Fragment 也視為了 View 的一部分，並且實作了 View Interface 讓 Presnter 能夠透過 Interface 與 View 產生互動，進而能夠實現單元測試。</p>
<h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>Presenter 的工作基本上與 Controller 大同小異，只差在 Presenter 不再綁定 View ，解決了在 MVC 中所遇到的測試性與靈活度問題。</p>
<p><img src="/learn-android-architecture-pattern/mvp.png" style="float: right;margin: 15px" height="250" width="250"></p>
<h3 id="實作-1"><a href="#實作-1" class="headerlink" title="實作"></a>實作</h3><p></p><p style="color:red">Model 與 MVC一樣負責 App 的資料邏輯</p>
<p></p><p style="color:blue">View 將 Activity 帶進來，並新增了 View Interface<br><br><em>View Interface 幫助 Presenter 與 View(Activity) 進行互動，也就可以模擬 Activity 的行為對 Presenter 進行單元測試</em></p>
<p></p><p style="color:green">Presenter 比起 Controller 的寫法更簡單了，不需要一邊處理UI的事情，一邊忙著執行各種動作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicTacToeView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showWinner</span><span class="params">(String winningPlayerDisplayLabel)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearWinnerDisplay</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearButtons</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setButtonText</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, String text)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicTacToePresenter</span> <span class="keyword">implements</span> <span class="title">Presenter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TicTacToeView view;</div><div class="line">    <span class="keyword">private</span> Board model;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicTacToePresenter</span><span class="params">(TicTacToeView view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.view = view;</div><div class="line">        <span class="keyword">this</span>.model = <span class="keyword">new</span> Board();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 這裡把 Activity 的 Lifecycle 引進， 是從我們 implement Presenter Interface 而來</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123; model = <span class="keyword">new</span> Board(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 當用戶選擇 cell 時， Presenter 只收到 (row,col)的資訊 ，不需要再在意 View</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonSelected</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">        Player playerThatMoved = model.mark(row, col);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(playerThatMoved != <span class="keyword">null</span>) &#123;</div><div class="line">            view.setButtonText(row, col, playerThatMoved.toString());</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (model.getWinner() != <span class="keyword">null</span>) &#123;</div><div class="line">                view.showWinner(playerThatMoved.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 需要 reset 時， Presenter 只需下達命令</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResetSelected</span><span class="params">()</span> </span>&#123;</div><div class="line">        view.clearWinnerDisplay();</div><div class="line">        view.clearButtons();</div><div class="line">        model.restart();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="結論-1"><a href="#結論-1" class="headerlink" title="結論"></a>結論</h3><p>MVC → MVP 之後， 原本 Activity 的邏輯處理跳到了 Presenter ， Activity 變為了 View 的角色，建立 UI 與 Presenter 的連結，最主要的是，View 與 Model 變得不直接互動了，而我們新增的 View Interface ，也更有利於單元測試運作。<br>現在我們可以單獨測試 Presenter 的邏輯，因為他不屬於任何 View ，而且也讓我們能夠跟不同的 View 進行協同只要 View 有 implement TicTacToeView 。<br>但在 Presenter 的部分還有一些問題:</p>
<ul>
<li>維護性低 : Presenter 與 Controller 一樣，是負責一些附加的邏輯運算。一旦 App 需要不斷演進，開發者就會發現 Presenter 越來越臃腫，代碼量越來越大。</li>
</ul>
<h2 id="Android-中的-MVVM"><a href="#Android-中的-MVVM" class="headerlink" title="Android 中的 MVVM"></a>Android 中的 MVVM</h2><p>MVVM 中的 VM 是 ViewModel 的縮寫，透過了 <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">Data Binding on Android</a> 的技術，實現更方便的測試跟模組化，也大量減少為了連結 View 與 Model 的代碼。</p>
<h3 id="Model-2"><a href="#Model-2" class="headerlink" title="Model"></a>Model</h3><p>一樣。</p>
<h3 id="View-2"><a href="#View-2" class="headerlink" title="View"></a>View</h3><p>View 被綁定為 Observable variables ，與 ViewModel 可以雙向的互動。</p>
<h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>Data Binding 減輕原本 MVP 中 Presenter 要與 Model 和 View 互動的職責， ViewModel 的工作只需接管 Presenter 剩下的工作，包裝 Model 與 Observable Data 給 View 。</p>
<p><img src="/learn-android-architecture-pattern/mvvm.png" style="float: right;margin: 15px" height="250" width="250"></p>
<h3 id="實作-2"><a href="#實作-2" class="headerlink" title="實作"></a>實作</h3><p></p><p style="color:red">Model 還是負責 App 的資料邏輯</p>
<p></p><p style="color:blue">View 利用 Data Binding 的方式與 ViewModel 進行溝通</p>
<blockquote>
<p>在此必須要去學習一下 Android 最新的 Data Binding<br> 可以查看 <a href="https://windsuzu.github.io/2017/04/29/learn-android-databinding/">學習Android Data Binding</a></p>
</blockquote>
<p></p><p style="color:green">ViewModel 負責一些與介面邏輯運算，完成 View 與 Model 的交互</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicTacToeViewModel</span> <span class="keyword">implements</span> <span class="title">ViewModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Board model;</div><div class="line"></div><div class="line">    <span class="comment">// 這些 observable variables 與 view 已經綁定在一起</span></div><div class="line">    <span class="comment">// 能夠在 ViewModel 更新的同時迅速的更新，並且快速反映在 view 上</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableArrayMap&lt;String, String&gt; cells = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; winner = <span class="keyword">new</span> ObservableField&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicTacToeViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        model = <span class="keyword">new</span> Board();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 現在這些動作將會被 view 直接呼叫</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickedCellAt</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">        Player playerThatMoved = model.mark(row, col);</div><div class="line">        cells.put(<span class="string">""</span> + row + col, playerThatMoved == <span class="keyword">null</span> ? </div><div class="line">                                                     <span class="keyword">null</span> : playerThatMoved.toString());</div><div class="line">        winner.set(model.getWinner() == <span class="keyword">null</span> ? <span class="keyword">null</span> : model.getWinner().toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResetSelected</span><span class="params">()</span> </span>&#123;</div><div class="line">        model.restart();</div><div class="line">        winner.set(<span class="keyword">null</span>);</div><div class="line">        cells.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再來看看 view 的 xml 如何使用 View Binding<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"viewModel"</span> <span class="attr">type</span>=<span class="string">"com.acme.tictactoe.viewmodel.TicTacToeViewModel"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout...</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">GridLayout...</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">style</span>=<span class="string">"@style/tictactoebutton"</span></div><div class="line">                <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; viewModel.onClickedCellAt(0,0)&#125;"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">'@&#123;viewModel.cells["00"]&#125;'</span> /&gt;</div><div class="line">            ...</div><div class="line">            <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">                <span class="attr">style</span>=<span class="string">"@style/tictactoebutton"</span></div><div class="line">                <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; viewModel.onClickedCellAt(2,2)&#125;"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">'@&#123;viewModel.cells["22"]&#125;'</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout...</span></span></div><div class="line">            <span class="attr">android:visibility</span>=<span class="string">"@&#123;viewModel.winner != null ? View.VISIBLE : View.GONE&#125;"</span></div><div class="line">            <span class="attr">tools:visibility</span>=<span class="string">"visible"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">...</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"@&#123;viewModel.winner&#125;"</span></div><div class="line">                <span class="attr">tools:text</span>=<span class="string">"X"</span> /&gt;</div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="結論-2"><a href="#結論-2" class="headerlink" title="結論"></a>結論</h3><p>MVVM 在測試上變得更加的方便了，因為已經沒有任何綁定在 view元件 身上。在測試時，只需要驗證 observable variables 的設定是否正確，並且在更新時有適當的反映在 view 上。<br>但 MVVM 並不是萬能，將 data 綁定在 XML 中會有一些問題存在， XML 無法執行單元測試，所以有可能在運行時才發現錯誤，所以要多使用 android 提供的 tools 提高開發的效率。</p>
]]></content>
      
        <categories>
            
            <category> 軟體工程 </category>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
            <tag> architecture patterns </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習在 Xcode 8 進行 iOS 上架]]></title>
      <url>/learn-iOS-distribution/</url>
      <content type="html"><![CDATA[<p>第一次要挑戰將 App 上架到 App Store，可是卻發現更新到 Xcode 8 之後，Xcode 預設進行了 Automatically Manage Signing 的動作，自動生成了 App ID 、 Certificate 、 provisioning profiles 。在還沒搞懂 Apple 上架流程的情況，網路上又找不太到相關的教學，搞得頭昏眼花… 最後還是回到 Apple developer Website 將 App 建立相關的文件，勉強成功上傳到 itunes connect  (┛`д´)┛</p>
<p>所以回過頭來，趕快在被 Apple 拒絕退件前，好好學習一下上架相關的 workflow 與 certificate、profiles 等文件之間的關係。</p>
<h2 id="註冊-Apple-ID-amp-開發者帳號-iOS-Developer-Program"><a href="#註冊-Apple-ID-amp-開發者帳號-iOS-Developer-Program" class="headerlink" title="註冊 Apple ID &amp; 開發者帳號 iOS Developer Program"></a>註冊 Apple ID &amp; 開發者帳號 iOS Developer Program</h2><blockquote>
<p>好文參考<br><a href="http://gogoprivateryan.blogspot.tw/2015/08/ios-app-13-apple-id-for-company.html" target="_blank" rel="external">iOS App 上架流程, (1/3) 申請 Apple ID for Company - 大兵萊恩 一路直前</a><br><a href="http://j796160836.pixnet.net/blog/post/32377597" target="_blank" rel="external">[iOS] Apple iOS Developer Program 開發者帳號 申請實錄 @ 清新下午茶</a></p>
</blockquote>
<p>不需要多說，就是照著網路上的教學，一步一步的走就可以成功註冊。</p>
<h2 id="簽署憑證之間的關係"><a href="#簽署憑證之間的關係" class="headerlink" title="簽署憑證之間的關係"></a>簽署憑證之間的關係</h2><blockquote>
<p>好文參考<br><a href="http://andyyou.logdown.com/posts/216618-ios-app-shelves-certificate-process-notes" target="_blank" rel="external">[iOS] App 上架憑證流程筆記</a></p>
</blockquote>
<p>在了解整個上架流程之前，必須先來研究一下什麼是 CSR (Certificate Signing Request) 、Certificate，什麼又是 Provisioning Profiles 、 Entitlement 。</p>
<h3 id="Certificate-Signing-Request"><a href="#Certificate-Signing-Request" class="headerlink" title=" Certificate Signing Request "></a><strong> Certificate Signing Request </strong></h3><p>在向 Apple 申請 Certificate 之前需要在 Mac 上產生 .csr 檔案。 有人翻譯成憑證簽發請求文件，簡稱憑證請求檔，裡面包含了這台 Mac 的一些資訊，以此驗證這台 Mac 身分。並產生成一個私密金鑰 (Private Key)，與一個 .csr 檔案 (公開金鑰) 交付給 Apple。</p>
<h3 id="Certificate"><a href="#Certificate" class="headerlink" title=" Certificate "></a><strong> Certificate </strong></h3><p>有了我們 Mac 的 .csr 檔案後， Apple 作為憑證頒發機構，就可以以他的私鑰簽名在我們的 .csr 檔案， 也就是頒發給我們的證書。用意即 Apple 認證這台電腦是合法的開發者在使用的。</p>
<ul>
<li>For Developement<br>讓我們能夠部暑 App 到裝置上進行測試。</li>
<li>For Production<br>用來發佈到 App Store 或進行特殊用途如 TestFlight 。</li>
</ul>
<h3 id="App-ID"><a href="#App-ID" class="headerlink" title=" App ID "></a><strong> App ID </strong></h3><p>App ID 就是 APP 唯一的識別名稱，必須要和Xcode裡面的 bundle ID 一樣。</p>
<ul>
<li>Explicit App ID<br>如果 App 有 In-App Purchase 等 Service 功能， App ID 必須是唯一的。比如說 com.apple.MyApp 。</li>
<li>Wildcard App ID<br>可以利用像 com.apple.<em> 含 </em> 的 ID ， 建立通用的 App ID 給多個 App 使用。</li>
</ul>
<h3 id="Entitlement"><a href="#Entitlement" class="headerlink" title=" Entitlement "></a><strong> Entitlement </strong></h3><p>管理一些 Service 的 Capabilities ， 比如 In-App Purchase，Push Notifications，CloudKit 等等。</p>
<h3 id="Provisioning-Profile"><a href="#Provisioning-Profile" class="headerlink" title=" Provisioning Profile "></a><strong> Provisioning Profile </strong></h3><p>Provisioning Profile 就是包含 App ID 、 Certificate 等 App 列表資訊的檔案。<br>裡面的 Certificate 能證明開發者是誰， App ID 驗證功能授權是否正確，確定測試裝置是否合法。<br>也就是說 Profile 檔案就是用來規範驗證這個 App 的檔案。</p>
<h2 id="Workflow-上架流程"><a href="#Workflow-上架流程" class="headerlink" title="Workflow 上架流程"></a>Workflow 上架流程</h2><blockquote>
<p>好文參考<br><a href="https://medium.com/@mikru168/ios-app%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B%E5%9C%96%E6%96%87%E6%95%99%E5%AD%B8-724636ddc78b" target="_blank" rel="external">【IOS - APP上架流程圖文教學】– 法蘭克的IOS世界</a><br><a href="http://www.appcoda.com.tw/ios-app-submission/" target="_blank" rel="external">iOS App 上架流程 : 一步一腳印的新手教學</a></p>
</blockquote>
<img src="http://www.plantuml.com/plantuml/svg/UpbnmzEUcK_dJ7kwTiRJ_ccwTiyw9ZwVrUARcAnWfV1yogBdK-Ohw3a71oayMpNbsS8EBhYqhfrZGK5EgajgMMfEVa5g4L3visaRdYwQf-2SMbIIcPQPd5YIgg3nh7_2arrBa8tGH3RZ9QhrG4EUhkjyiNWkgY5woQb5cWfuxNwwUzVprTqAG745JnSkL6didWeeoY_BBCxCpylCIrS0Sj8oSrAn-38YEJyb5U4kOhLbXfJcfHOxv-VbfIQN8C86vBuNczjVhEZY0XkCHM7dvASzhGfwcGM9K6EVxEXwshGP0000">
<blockquote>
<p>白話文 :</p>
<ol>
<li>我們開心的在電腦產生 .CSR 檔，帶去 Apple Developer 領取 Certificate</li>
<li>將 Certificate 安裝到電腦上讓 Apple 能夠識別</li>
<li>接著再產生一個 App ID，就能跟 Certificate 一起打包成 Provisioning Profile</li>
<li>將 Provisioning Profile 安裝到 Xcode ， 讓 Apple 能夠識別</li>
<li>在 iTunes Connect 填寫好 App 的資訊、圖片</li>
<li>從 Xcode 將 App 打包成 .ipa ， 上傳到 iTunes Connect 準備送審上架</li>
</ol>
</blockquote>
<h2 id="TestFlight-測試"><a href="#TestFlight-測試" class="headerlink" title="TestFlight 測試"></a>TestFlight 測試</h2><blockquote>
<p>好文參考<br><a href="https://disp.cc/b/11-8g6M" target="_blank" rel="external">[Xcode] 在 iTunes Connect 使用 TestFlight 測試</a><br><a href="https://blog.coding.net/blog/ios-testFlight" target="_blank" rel="external">iOS 平台如何使用 TestFlight 进行 Beta 测试</a></p>
</blockquote>
<p>將程式打包至 iTunes Connect 之後， 就可以在 TestFlight 中選取要測試的 prerelease 版本， 然後發送郵件給內部測試的人員 (最多 25 名)。<br>當然也可以邀請外部人員幫忙測試 (1000 名) ， 但是要邀請外部人員公開測試也是要 apple 審核過才行 !</p>
<h2 id="Xcode-8-Automatically-Manage-Signing"><a href="#Xcode-8-Automatically-Manage-Signing" class="headerlink" title="Xcode 8 - Automatically Manage Signing"></a>Xcode 8 - Automatically Manage Signing</h2><blockquote>
<p>好文參考<br><a href="http://stackoverflow.com/questions/39440403/xcode-8-0-automatically-manage-signing-behaviour" target="_blank" rel="external">ios - Xcode 8.0 Automatically Manage Signing behaviour - Stack Overflow</a><br><a href="http://joeyio.com/2016/08/21/WWDC2016-401-Whats-new-in-Xcode-App-Signing/" target="_blank" rel="external">WWDC 2016 - Session 401 - What’s New in Xcode App Signing</a><br><a href="http://joeyio.com/2016/08/21/WWDC2016-401-Whats-new-in-Xcode-App-Signing/" target="_blank" rel="external">WWDC 2016 - Session 401 - What’s New in Xcode App Signing 笔记</a></p>
</blockquote>
<p>與以往的 Xcode 不同，只要按下 Automatically manage signing ， Xcode 就全自動幫我們管理全部的簽名流程，不管是 Certificate ，還是 Provisioning Profile ，都在後台幫我們將簽名更新到 up-to-date ，我們只需要告訴 Xcode 是哪一個 team 在開發就好。<br><img src="/learn-iOS-distribution/signing.png" alt=""></p>
<p>簡單的畫一下最新的步驟。<br><img src="http://www.plantuml.com/plantuml/svg/Kr1GY4ZEJqdLjNlMCV7vh1RVn6G5AuKNxQkUTazzCNFgymbjppViVJgXzzdMnkShkhaK51JWwdJjCaDAyrABdVFpybAJIu3QdatRy7JHF0N7WWA55vlRNwpeueAQZQ6mS_BJdbO5lSo2H8LdgwOyMzZnP4VNqwRD0000"><br>看起來真簡單! 可是 Automatically manage signing ， 只幫忙簽署 Development 的 Profile ，在 Archive 的時候，也還是使用 Development 的 Profile 。 </p>
<p>聽說在 Orgnizer 裡選擇 export 到 App Store 的時候，會讓我們重新選擇 Certificate 重新 Signing ，這裡再選擇發布 Distribution 的版本 …<br>但是這次在 export 的過程中不知為何不斷失敗 … 只好先取消自動化簽名，使用原本的方法上傳 …</p>
<p>希望下次的上架能夠順利的用新的方式發布成功 !</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Distribution </tag>
            
            <tag> iOS上架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習Android背景執行服務 Android Services]]></title>
      <url>/learn-android-services/</url>
      <content type="html"><![CDATA[<p>最近為了設計無網路情況下，將資料儲存在SQLite中，而偵測用戶網路連接後，將資料上傳。必須使用到Service的功能，所以剛好有機會把Service學得更深!</p>
<p>Android的<code>Service</code>是Android的四大組件之一。不同於<code>Activity</code>的生命週期，<code>Service</code>可以在背景不斷的工作，直到停止或是系統無法提供資源為止。通常運用在後台播放音樂、定時檢查更新資料，或是執行很久的工作，如上傳及下載檔案。</p>
<h2 id="好文參考"><a href="#好文參考" class="headerlink" title="好文參考"></a>好文參考</h2><p><a href="https://developer.android.com/guide/components/services.html?hl=zh-tw" target="_blank" rel="external">Services | Android Developers</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/11952435" target="_blank" rel="external">Android Service完全解析，关于服务你所需知道的一切(上)</a><br><a href="http://www.aaronlife.com/teaching/uch_android_2015-02-06_00.html" target="_blank" rel="external">健行科技Android手機程式設計人才培訓班 - Service背景執行程式</a><br><a href="http://xnfood.com.tw/android-service/" target="_blank" rel="external">《Android》『Service』- 背景執行服務的基本用法</a></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>要讓Service能在後台運行，必須定義一個繼承Service的類別，並在<code>AndroidManifest.xml</code>宣告這個Service以及其他相關屬性，並了解如何啟動他。Service的呼叫分為兩種 :</p>
<h3 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h3><p>當Service使用<code>startService()</code>啟動後，就算Activity被關閉，Service也會持續在Background工作著。Service與Acitivty之間沒有什麼交集，Service完成任務也不會回傳東西給原來的應用程式。</p>
<h3 id="bindService"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h3><p>呼叫<code>bindService()</code>則可以讓Activity與Service進行綁定，例如在Activity中指定Service執行某些任務。而bindService也能夠讓Service被多個不同的應用程式呼叫，達到跨應用程式的互動與協作。</p>
<p><img src="https://developer.android.com/images/service_lifecycle.png" alt="兩種啟動Service方式的生命週期" title="https://developer.android.com/guide/components/services.html"></p>
<ol>
<li><p>應用程式呼叫<code>startService()</code>後，系統呼叫Service類別內的<code>onCreate()</code>，接著呼叫<code>onStartCommand()</code>利用Intent提供的參數做事。直到工作結束或是應用程式呼叫<code>stopService()</code>才會停止。</p>
</li>
<li><p>應用程式呼叫<code>bindService()</code>與Service綁定前，應用程式需要建立一個<code>serviceConnection</code>物件，呼叫後若Service尚未啟動，Service類別內的<code>onCreate()</code>就會被呼叫，使用這種方法啟動Service的應用程式，可以透過<code>onBind()</code>方法取得IBinder物件，接下來就可以透過IBinder物件來取得Service的事件。</p>
</li>
</ol>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="在AndroidManifest-xml檔中新增定義。"><a href="#在AndroidManifest-xml檔中新增定義。" class="headerlink" title="在AndroidManifest.xml檔中新增定義。"></a>在AndroidManifest.xml檔中新增定義。</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;? xml version = "1.0" encoding = "utf-8" ?&gt;    </div><div class="line"><span class="tag">&lt; <span class="attr">manifest</span> <span class="attr">xmlns:android</span> = <span class="string">"http://schemas.android.com/apk/res/android"</span>   </span></div><div class="line">    <span class="attr">package</span> = <span class="string">"com.example.serviceTest"</span>  </div><div class="line">    <span class="attr">android:versionCode</span> = <span class="string">"1"</span>  </div><div class="line">    <span class="attr">android:versionName</span> = <span class="string">"1.0"</span> &gt;   </div><div class="line">  </div><div class="line">    <span class="tag">&lt; <span class="attr">uses-sdk</span>  </span></div><div class="line">        <span class="attr">android:minSdkVersion</span> = <span class="string">"14"</span>  </div><div class="line">        <span class="attr">android:targetSdkVersion</span> = <span class="string">"17"</span> /&gt;</div><div class="line">  </div><div class="line">    <span class="tag">&lt; <span class="attr">application</span>  </span></div><div class="line">        <span class="attr">android:allowBackup</span> = <span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span> = <span class="string">"@drawable/ic_launcher"</span>  </div><div class="line">        <span class="attr">android:label</span> = <span class="string">"@string/app_name"</span>  </div><div class="line">        <span class="attr">android:theme</span> = <span class="string">"@style/AppTheme"</span> &gt;   </div><div class="line">    ……  </div><div class="line">        <span class="tag">&lt; <span class="attr">service</span> <span class="attr">android:name</span> = <span class="string">"com.example.serviceTest.MyService"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/ <span class="attr">service</span> &gt;</span>  </div><div class="line">    <span class="tag">&lt;/ <span class="attr">application</span> &gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/ <span class="attr">manifest</span> &gt;</span></div></pre></td></tr></table></figure>
<h3 id="實作-Service-類別"><a href="#實作-Service-類別" class="headerlink" title="實作 Service 類別"></a>實作 Service 類別</h3><p>實作一個繼承自Service類別的物件。bindService與startService兩者能夠同時存在並不衝突，而且在這次專案裡剛好都會使用到，所以只要同時實作onStartCommand()與onBind()兩個事件即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;   </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyService"</span>;</div><div class="line">  </div><div class="line">    <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();</div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;   </div><div class="line">        <span class="keyword">super</span> .onCreate();  </div><div class="line">        Log.d(TAG, <span class="string">"onCreate() executed"</span>);</div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;   </div><div class="line">        Log.d(TAG, <span class="string">"onStartCommand() executed"</span>);  </div><div class="line">        <span class="comment">// 執行任務</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;   </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        Log.d(TAG, <span class="string">"onDestroy() executed"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> mBinder;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span> </span>&#123;   </div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"startDownload() executed"</span>);  </div><div class="line">            <span class="comment">// 執行任務</span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-Activity-實作-1"><a href="#在-Activity-實作-1" class="headerlink" title="在 Activity 實作 (1)"></a>在 Activity 實作 (1)</h3><p>在Activity中呼叫startService()來執行第一種啟動Service的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></div><div class="line">&#123;</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class); </div><div class="line">    <span class="keyword">this</span>.startService(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-Activity-實作-2"><a href="#在-Activity-實作-2" class="headerlink" title="在 Activity 實作 (2)"></a>在 Activity 實作 (2)</h3><p>建立 MyBinder 與 ServiceConnection 物件，並呼叫bindService()執行第二種方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> MyService.MyBinder myBinder;  </div><div class="line">	<span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className, IBinder binder)</span> </span>&#123;</div><div class="line">            myBinder = (MyService.MyBinder) service;  </div><div class="line">            myBinder.startDownload();  </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</div><div class="line">        <span class="keyword">this</span>.bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        <span class="keyword">this</span>.unbindService(mServiceConnection);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是關於Android Services的基礎操作，另外還有很多Service相關的東西，如IntentService、Service和Thread的關係、如何運行前台的Service、或者是遠端Service的協作等著學習。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Services </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[學習版本控制基礎 - Git & Gitlab]]></title>
      <url>/learn-git/</url>
      <content type="html"><![CDATA[<h2 id="版本控制是什麼，為什麼要學"><a href="#版本控制是什麼，為什麼要學" class="headerlink" title="版本控制是什麼，為什麼要學"></a>版本控制是什麼，為什麼要學</h2><p>剛開始踏入軟體工程師的工作，懵懵懂懂的開發了兩個App，很菜的還真的自己新建了好多資料夾，複製了好幾次更新的Project，開新文字檔標示每個的差異。這時才發現原來有版本控制這種東西。</p>
<p>上網查了一下，版本控制已經有一段歷史，從集中式版本控制的CVS、Subversion等，到現在流行的分散式版本控制系統Git或Mercurial。這時才慢慢了解Git與Github的差別在哪裡哈哈，原來Github不只有大量的資源，而且正是給予本地端Git存取的站點。</p>
<p>有了版本控制，不但能輕鬆管理每一個版本的程式碼，還可以將檔案復原到原本的狀態、比對某一段時間的修改，甚至在未來，如果要跟多個工程師共同處理一個案子時，不需要帶著隨身碟到處跑來跑去，交換檔案，只需要透過版本控制管理，就能馬上了解對方做了什麼修改。</p>
<h2 id="Git-基礎"><a href="#Git-基礎" class="headerlink" title="Git 基礎"></a>Git 基礎</h2><p>網路上已經有大量的Git教學文章及影片，都淺顯易懂，這邊列舉幾個：</p>
<ul>
<li><a href="http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/" target="_blank" rel="external">Git 教學(1) : Git 的基本使用</a></li>
<li><a href="https://backlogtool.com/git-guide/tw/" target="_blank" rel="external">連猴子都能懂的Git入門指南</a></li>
<li><a href="https://www.youtube.com/watch?v=Y9XZQO1n_7c&amp;index=1&amp;list=PLxAzcE2juRFD9hM__SuJTuJn3CJnWrQOq" target="_blank" rel="external">Learn Git in 20 Minutes</a></li>
</ul>
<p>簡單來說，Git分為在本地端數據庫操作以及跟遠端數據庫的同步與共享，我們可以在本地端使用像是還原更改等所有Git版本控制功能，但若想要公開本地端的修改內容，或與他人共同修改內容，就必須要透過遠端數據庫的幫忙。</p>
<img src="http://www.plantuml.com/plantuml/svg/UpPdpTCv6vwlNlziwevdasSztRNQKTVkPUC2P145AuKdExgUDctMA2Wjpj3aGfFMjNk6QGXOJ_UBFPr0FJavcboOIfoeOOyJcZq0">
<p>要將檔案進行版本管理必須要走一段路，分別是<strong>工作目錄(Working Tree)、索引(Index)、數據庫(Repository)</strong>。</p>
<ul>
<li>數據庫 : 記錄檔案或目錄狀態的地方，儲存專案的修改歷史記錄，還可以追蹤內容的狀態和版本</li>
<li>工作目錄 : 便是我們處理專案的目錄，Git的操作指令都在這裡完成</li>
<li>索引 : 為了要將專案上傳到數據庫而準備的暫存區</li>
</ul>
<img src="http://www.plantuml.com/plantuml/svg/UxfzwPEzSvxFNlUofqNNxlcMHK_tJ5MmKdYnOlVJjgud-zSzcxBpwTAzpsUrFDtGyMnXXqPYIeec5qIPhjspgJkUJPxrTDTge8vd_HEUx5hoj6C3N50ZEJytDxD44m00">
<p>索引的存在可以排除工作目錄裡不必要的檔案提交，還可以只將檔案變更內容的一部分加入索引並提交。</p>
<h2 id="開始使用Git"><a href="#開始使用Git" class="headerlink" title="開始使用Git"></a>開始使用Git</h2><hr>
<h3 id="本地端數據庫"><a href="#本地端數據庫" class="headerlink" title="本地端數據庫"></a>本地端數據庫</h3><h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h4><p>首先必須先安裝Git，Windows用戶可以到<a href="https://git-scm.com/" target="_blank" rel="external">Git官網</a>安裝，而Mac用戶可以下載<a href="https://git-scm.com/download/mac" target="_blank" rel="external">OSX Git installer</a>進行安裝。<br>以下先以windows環境操作Git，在Windows安裝之後，從開始選單&gt; 所有程式&gt; Git&gt; Git Bash</p>
<h4 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h4><p>首先先設定使用者的資料，這些資訊將作為提交者資訊顯示在版本控制的歷史記錄中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"&lt;使用者名字&gt;"</span></div><div class="line">$ git config --global user.email <span class="string">"&lt;電子信箱&gt;"</span></div><div class="line"></div><div class="line"><span class="comment">#可以為Git的命令設定別名，例如：「checkout」可以省略為「co」來執行。</span></div><div class="line">$ git config --global alias.co checkout</div><div class="line"></div><div class="line"><span class="comment">#可以讓含有中文的檔名可以正確顯示。</span></div><div class="line">$ git config --global core.quotepath off</div></pre></td></tr></table></figure></p>
<h4 id="新建數據庫並新增一個檔案"><a href="#新建數據庫並新增一個檔案" class="headerlink" title="新建數據庫並新增一個檔案"></a>新建數據庫並新增一個檔案</h4><p>設定好Git後，試著建立一個專案並且使用git init，將專案與數據庫連接。<br>接著我們在專案中新增一個test.txt的文字檔。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mkdir <span class="built_in">test</span></div><div class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></div><div class="line">$ git init</div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></div><div class="line">$ touch test.txt</div></pre></td></tr></table></figure></p>
<h4 id="確認工作目錄與索引的狀態"><a href="#確認工作目錄與索引的狀態" class="headerlink" title="確認工作目錄與索引的狀態"></a>確認工作目錄與索引的狀態</h4><p>馬上來查看這個文字檔的狀況，發現他尚未被加入到索引中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Initial commit</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Untracked files:  &lt;-- 還未被加入</span></div><div class="line"><span class="comment">#   (use "git add &lt;file&gt;..." to include in what will be committed)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#     test.txt</span></div></pre></td></tr></table></figure></p>
<h4 id="將檔案加入到索引"><a href="#將檔案加入到索引" class="headerlink" title="將檔案加入到索引"></a>將檔案加入到索引</h4><p>可以使用 <code>git add &lt;檔案名稱&gt;</code> 將檔案加入至索引。<br>也可以使用 <code>git add .</code> 將所有未加入的檔案一次加入。<br>此時可以看到文字檔已經待命被提交到數據庫了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git add test.txt</div><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Initial commit</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment">#   (use "git rm --cached &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#     new file:   test.txt</span></div></pre></td></tr></table></figure></p>
<h4 id="執行commit命令提交檔案"><a href="#執行commit命令提交檔案" class="headerlink" title="執行commit命令提交檔案"></a>執行commit命令提交檔案</h4><p>最後只要執行 <code>git commit -m &quot;更新註解&quot;</code> 就可以將本次更新的內容提交到數據庫了。<br>也可以使用 <code>git commit -am &quot;更新註解&quot;</code> 將 <code>git add</code> 一併執行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"first commit test file"</span></div><div class="line"></div><div class="line"><span class="comment">#使用log命令來顯示數據庫的歷史提交記錄。</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line">commit 448a63e7975d7583732f0210e6076fd2ac698413</div><div class="line">Author: Jay &lt;windsuzu@gmail.com&gt;</div><div class="line">Date:   Wed Mar 29 20:54:25 2017 +0800</div><div class="line"></div><div class="line">    first commit <span class="built_in">test</span> file</div></pre></td></tr></table></figure>
<hr>
<h3 id="遠端數據庫"><a href="#遠端數據庫" class="headerlink" title="遠端數據庫"></a>遠端數據庫</h3><h4 id="在GitLab上建立遠端數據庫"><a href="#在GitLab上建立遠端數據庫" class="headerlink" title="在GitLab上建立遠端數據庫"></a>在GitLab上建立遠端數據庫</h4><p>處理、更新完成本地端的專案後，再來就可以將專案上傳到遠端的數據庫。將專案放到遠端的數據庫，不但能方便多人共同開發，且若臨時換到其他電腦進行作業，也能夠將專案與更新的歷史紀錄一併下載到另外一台電腦上。<br>在選擇遠端的數據庫上，可以使用目前最流行的GitHub，除了進行版本控制外，還可以公開自己所寫的專案，讓各大神人診斷、指導。但是若要在GitHub建立私人的數據庫，需要申請付費帳戶，所以我決定使用GitLab。</p>
<p>GitLab的介面、功能都與GitHub十分相似，可以參考這些網站，馬上註冊操作看看 :</p>
<ul>
<li><a href="http://git-tutorial.readthedocs.io/zh/latest/gitlabworkflow.html" target="_blank" rel="external">GitLab工作流程</a></li>
<li><a href="https://www.youtube.com/watch?v=7p0hrpNaJ14" target="_blank" rel="external">Getting started with Git and GitLab</a></li>
</ul>
<h4 id="新增Repository"><a href="#新增Repository" class="headerlink" title="新增Repository"></a>新增Repository</h4><p>在<a href="https://about.gitlab.com/" target="_blank" rel="external">GitLab</a>註冊好帳戶後，為專案新增一筆數據庫。<br><img src="/learn-git/create.jpg" alt=""><br><img src="/learn-git/repourl.jpg" alt=""></p>
<p>取得了遠端數據庫的URL後，就可以將本地端的專案上傳上來，為此，需要在Git執行Push(推送)操作。<br>在那之前，先為遠端數據庫取個適合的別名或暱稱。利用<code>$ git remote add &lt;name&gt; &lt;url&gt;</code>這個方法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin https://SekaiJ@gitlab.com/SekaiJ/test.git</div></pre></td></tr></table></figure>
<p>當要<code>push</code>變更到遠端數據庫時，加上<code>&lt;repository&gt;</code>指定要push的地址，<code>&lt;refspec&gt;</code>指定要push的分支。<br>也就是<code>$ git push &lt;repository&gt; &lt;refspec&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
<p>上傳成功後，便可以在GitLab上看到成果囉!<br><img src="/learn-git/push.jpg" alt=""></p>
<p>之後如果使用其他電腦，或在本地端沒有專案檔案時，能夠使用<code>clone</code>命令來複製遠端數據庫。<br><code>$ git clone &lt;repository&gt; &lt;directory&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://SekaiJ@gitlab.com/SekaiJ/test.git <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<p>與其他人共同修改專案時，使用<code>pull</code>命令則可從遠端數據庫下載最新的修改內容到本地數據庫。<br><code>$ git pull &lt;repository&gt; &lt;refspec&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div></pre></td></tr></table></figure></p>
<p>學到這裡，還只接觸到了Git的基礎呢!<br>在未來，如果能夠跟很多神人共同開發專案，那還必須學習分支(Branch)、合併(Merge)，還有很多不同的指令，與一些解決衝突的方法。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
