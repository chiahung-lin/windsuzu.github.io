<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Code</title>
  <subtitle>Study Recording</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://windsuzu.github.io/"/>
  <updated>2017-10-17T07:31:29.000Z</updated>
  <id>http://windsuzu.github.io/</id>
  
  <author>
    <name>Jay Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode#345 Reverse Vowels of a String - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-345/"/>
    <id>http://windsuzu.github.io/leetcode-345/</id>
    <published>2017-10-17T07:25:58.000Z</published>
    <updated>2017-10-17T07:31:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p>反轉字串，但只反轉母音的部分。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Example</span> <span class="number">1</span>:</div><div class="line"><span class="type">Given</span> s = <span class="string">"hello"</span>, <span class="keyword">return</span> <span class="string">"holle"</span>.</div></pre></td></tr></table></figure>
<p>hello 中的 eo 轉換為 oe</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Example</span> <span class="number">2</span>:</div><div class="line"><span class="type">Given</span> s = <span class="string">"leetcode"</span>, <span class="keyword">return</span> <span class="string">"leotcede"</span>.</div></pre></td></tr></table></figure>
<p>leetcode 中的 eeoe 轉換為 eoee</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>定義母音表，接著像 <a href="https://windsuzu.github.io/leetcode-344/">Reverse String</a> 這題一樣進行兩個指針的迴圈。</p>
<p>不同的是，若當下左邊的字母不為母音，就將左指針 +1<br>反之，右邊不為母音，將右指針 -1</p>
<p>確定抓到左右兩個母音時，就將左右調換，左右各進退一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseVowels</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">set</span>: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt; = [<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>, <span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span>, <span class="string">"O"</span>, <span class="string">"U"</span>]</div><div class="line">    <span class="keyword">var</span> s = <span class="type">Array</span>(s.characters)</div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = s.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &#123;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &amp;&amp; !<span class="keyword">set</span>.<span class="built_in">contains</span>(s[<span class="keyword">left</span>]) &#123;</div><div class="line">            <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &amp;&amp; !<span class="keyword">set</span>.<span class="built_in">contains</span>(s[<span class="keyword">right</span>]) &#123;</div><div class="line">            <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> temp = s[<span class="keyword">left</span>]</div><div class="line">        s[<span class="keyword">left</span>] = s[<span class="keyword">right</span>]</div><div class="line">        s[<span class="keyword">right</span>] = temp</div><div class="line">        <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Write a function that takes a string as input and reverse only the vow
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Two-Pointers/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Two-Pointers/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#342 Power of Four - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-342/"/>
    <id>http://windsuzu.github.io/leetcode-342/</id>
    <published>2017-10-16T06:45:02.000Z</published>
    <updated>2017-10-16T06:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>
<p>驗證整數是否為 4 的次方數。</p>
<p>Follow up: Could you solve it without loops/recursion?</p>
<p>可不可以不使用迴圈或遞迴。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given num = 16, return true. Given num = 5, return false.</p>
<p>輸入 16 回傳 true<br>輸入 5 則回傳 false</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>要達成 4 的次方數，需要符合三個條件:</p>
<ol>
<li><p>4 的次方數一定大於 0</p>
</li>
<li><p>4 的次方數在 Bit 中，一定只有開頭為 1<br>如 4(100), 16(10000), 64(1000000), 256(100000000)</p>
<p>為了驗證只有開頭為 1 ，只要和未進位的前一個數字做 &amp; 運算，得出 0 即可。<br>如 4(100) &amp; 3(011) = 0,  16(10000) &amp; 15(01111) = 0</p>
</li>
<li><p>除了 4 的次方數只有開頭為 1 以外， 2 的次方數也是如此。<br>但 4 的次方數還有一點不同於 2 的次方數，也就是 1 所在的位置。<br>4 的次方數的 1 一律位在奇數的位置，如 100 在 3 ， 10000 在 5 ， 1000000 在 7 …</p>
<p>要驗證 1 是否在奇數位置，與 0x55555555 做 &amp; 運算，得出不為 0 的答案即可。<br>0x55555555 在 Bit 中為 01010101010101010101010101010101<br>可以對應到奇數位置是否存在。</p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> &amp;&amp; num &amp; (num-<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; num &amp; <span class="number">0x55555555</span> != <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an integer (signed 32 bits), write a function to check whether i
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Bit Manipulation" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Bit-Manipulation/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Bit Manipulation" scheme="http://windsuzu.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#66 Plus One - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-66/"/>
    <id>http://windsuzu.github.io/leetcode-66/</id>
    <published>2017-10-15T06:15:32.000Z</published>
    <updated>2017-10-16T07:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>
<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>
<p>The digits are stored such that the most significant digit is at the head of the list.</p>
<p>利用陣列來表示一個非負數整數，不可包含前綴的 0 ，現在對這個整數加一。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>7 = [7] , 7 + 1 = 8 = [8]</p>
<p>19 = [1,9] , 19 + 1 = 20 = [2,0]。</p>
<p>999 = [9,9,9] , 999 + 1 = 1000 = [1,0,0,0]</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先對陣列的最後一個值 + 1 。</p>
<p>若是陣列中含有 10 ，代表需要進位。將該值變為零，前一個值 + 1 。</p>
<p>若遇到 [9,9] 這類的，必須要新增一個新陣列放 1 在最前方，使之變為 [1,0,0] 。 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(<span class="number">_</span> digits: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">        <span class="keyword">var</span> digits = digits</div><div class="line">        digits[digits.<span class="built_in">count</span> - <span class="number">1</span>] += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> digits.<span class="built_in">contains</span>(<span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">let</span> i = digits.index(of: <span class="number">10</span>)!</div><div class="line">            digits[i] = <span class="number">0</span></div><div class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> &#123;</div><div class="line">                digits[i - <span class="number">1</span>] += <span class="number">1</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> new = [<span class="number">1</span>]</div><div class="line">                new.append(contentsOf: digits)</div><div class="line">                digits = new</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> digits</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a non-negative integer represented as a non-empty array of digit
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#118 Pascal&#39;s Triangle - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-118/"/>
    <id>http://windsuzu.github.io/leetcode-118/</id>
    <published>2017-10-14T06:46:39.000Z</published>
    <updated>2017-10-14T06:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>給定行數 N ，返回 N 行的<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2" target="_blank" rel="external">帕斯卡三角形</a>。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">For</span> example, given numRows = <span class="number">5</span>,</div><div class="line"><span class="type">Return</span></div><div class="line"></div><div class="line">[</div><div class="line">       [<span class="number">1</span>],</div><div class="line">      [<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">     [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">    [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],</div><div class="line">   [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從 wikipedia 發現 Pascal’s Triangle 有一個特性，從第二層之後，</p>
<p>除了首尾皆為 1 以外，其他每一格的值皆由上方兩個值加總所得。</p>
<p><img src="/leetcode-118/PascalTriangleAnimated2.gif" alt=""></p>
<p>所以透過這個特性，來填滿每一層除了首尾以外的中間值即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(<span class="number">_</span> numRows: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">0</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    res.append([<span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">1</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    res.append([<span class="number">1</span>, <span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">2</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..&lt;numRows &#123;</div><div class="line">        <span class="keyword">var</span> temp = [<span class="type">Int</span>]()</div><div class="line">        temp.append(<span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> lastRow = res[i - <span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;lastRow.<span class="built_in">count</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> i == lastRow.<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">                temp.append(<span class="number">1</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp.append(lastRow[i] + lastRow[i + <span class="number">1</span>])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res.append(temp)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given numRows, generate the first numRows of Pascal’s triangle.&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#101 Symmetric Tree - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-101/"/>
    <id>http://windsuzu.github.io/leetcode-101/</id>
    <published>2017-10-13T07:42:17.000Z</published>
    <updated>2017-10-13T07:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>給定二元樹，驗證他是否對稱。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">2</span></div><div class="line"> / \ / \</div><div class="line"><span class="number">3</span>  <span class="number">4</span> <span class="number">4</span>  <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>But the following [1,2,2,null,3,null,3] is not:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="number">1</span></div><div class="line"> / \</div><div class="line"><span class="number">2</span>   <span class="number">2</span></div><div class="line"> \   \</div><div class="line">  <span class="number">3</span>   <span class="number">3</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從根節點左右開始驗證，若左右皆為 nil 則為對稱，若只有某一邊 nil 則不為對稱。</p>
<p>若兩邊都存在，比對值是否相同，相同則繼續往下比對，</p>
<p>比對左子樹的左節點，和右子樹的右節點是否相同，</p>
<p>再比對左子樹的右節點，和右子樹的左節點是否相同，</p>
<p>直到結束，返回答案值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="literal">true</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">checking</span><span class="params">(<span class="number">_</span> <span class="keyword">left</span>: TreeNode?, <span class="number">_</span> <span class="keyword">right</span>: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span> &#123; res = <span class="literal">false</span>; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span> &#123; res = <span class="literal">false</span>; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">left</span>!.val != <span class="keyword">right</span>!.val &#123;</div><div class="line">                res = <span class="literal">false</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                checking(<span class="keyword">left</span>?.<span class="keyword">left</span>, <span class="keyword">right</span>?.<span class="keyword">right</span>)</div><div class="line">                checking(<span class="keyword">left</span>?.<span class="keyword">right</span>, <span class="keyword">right</span>?.<span class="keyword">left</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    checking(root?.<span class="keyword">left</span>, root?.<span class="keyword">right</span>)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symme
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
      <category term="Breadth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/Breadth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
      <category term="Breadth-first Search" scheme="http://windsuzu.github.io/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#257 Binary Tree Paths - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-257/"/>
    <id>http://windsuzu.github.io/leetcode-257/</id>
    <published>2017-10-12T07:01:45.000Z</published>
    <updated>2017-10-12T07:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, return all root-to-leaf paths.</p>
<p>給一個二元樹，返回所有根節點到葉節點的路徑。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>given the following binary tree:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">1</span></div><div class="line">   /   \</div><div class="line">  <span class="number">2</span>     <span class="number">3</span></div><div class="line"> /  \</div><div class="line"><span class="number">4</span>    <span class="number">5</span></div></pre></td></tr></table></figure>
<p>All root-to-leaf paths are:</p>
<p>[“1-&gt;2-&gt;4”, “1-&gt;2-&gt;5”, “1-&gt;3”]</p>
<p>根據上圖，總共有兩個根節點到葉節點的路徑，分別為 “1-&gt;2-&gt;4” 以及 “1-&gt;2-&gt;5” 和 “1-&gt;3”。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>以範例來說，利用 dps 一開始會跑根節點 1 到 2 ，給新路徑 “1-&gt;”<br>當前節點為 2 時， 當前路徑為 “1-&gt;”<br>下一個到 4 時， 當前路徑為 “1-&gt;2-&gt;”<br>且 4 沒有任何子節點了，所以更新路徑為 “1-&gt;2-&gt;4” 並且加入陣列中</p>
<p>回到 2 的分岔，當前路徑為 “1-&gt;”<br>下一個到 5 時， 當前路徑為 “1-&gt;2-&gt;”<br>且 5 沒有任何子節點了，所以更新路徑為 “1-&gt;2-&gt;5” 並且加入陣列中</p>
<p>回到 1 的分岔，<br>下一個到 3 時，當前路徑為 “1-&gt;”<br>且 3 沒有任何子節點了，所以更新路徑為 “1-&gt;3” 並且加入陣列中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">String</span>]()</div><div class="line">    search(root, <span class="string">""</span>, &amp;res)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> currentPath: String, <span class="number">_</span> res: <span class="keyword">inout</span> [String])</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root?.<span class="keyword">right</span> == <span class="literal">nil</span> &#123; res.append(<span class="string">"\(currentPath)\(root!.val)"</span>) &#125;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> != <span class="literal">nil</span> &#123; search(root?.<span class="keyword">left</span>, <span class="string">"\(currentPath)\(root!.val)-&gt;"</span>, &amp;res) &#125;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">right</span> != <span class="literal">nil</span> &#123; search(root?.<span class="keyword">right</span>, <span class="string">"\(currentPath)\(root!.val)-&gt;"</span>, &amp;res) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, return all root-to-leaf paths.&lt;/p&gt;
&lt;p&gt;給一個二元樹，返回所有
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#198 House Robber - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-198/"/>
    <id>http://windsuzu.github.io/leetcode-198/</id>
    <published>2017-10-11T05:33:02.000Z</published>
    <updated>2017-10-11T05:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>
<p>你是一個專業的小偷，打算沿著整條街偷每一戶的東西。 你可以偷每一戶的東西，但只要在同一天晚上，你偷完一間房子，又偷他左右鄰居，這時就會有警鈴響起，自動呼叫警察過來。</p>
<p>現在給你一個包含正整數的陣列，每個數字代表每間住戶所擁有的財產，你需要找到能夠在一個晚上，偷到最多錢的方法，且不會驚動到警鈴。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">9</span>]</div><div class="line"><span class="type">Output</span> : <span class="number">16</span></div></pre></td></tr></table></figure></p>
<p>偷 3, 13 能偷到最多錢，也不會驚動警鈴。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>]</div><div class="line"><span class="type">Output</span> : <span class="number">95</span></div></pre></td></tr></table></figure></p>
<p>偷 50, 45 能偷到最多錢，也不會驚動警鈴。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>一開始照範例一來說，只要算出奇數戶的加總，和偶數戶的加總，再來比對大小即可。</p>
<p>但是若遇到範例二，可能會出現隔兩間的奇偶數相加，反而還比最多間不會觸動警鈴的加法，還要多的解。</p>
<p>所以必須在每次加上新住戶的錢時，同時比對奇偶數目前已經累積的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> b = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span>&#123;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123; a = <span class="built_in">max</span>(a + nums[i], b) &#125;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span> &#123; b = <span class="built_in">max</span>(b + nums[i], a) &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;You are a professional robber planning to rob houses along a street. E
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Dynamic-Programming/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#21 Merge Two Sorted Lists - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-21/"/>
    <id>http://windsuzu.github.io/leetcode-21/</id>
    <published>2017-10-10T07:10:14.000Z</published>
    <updated>2017-10-10T07:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p>合併兩個已經被排序過的鏈結串列返回一個全新的鏈結串列。新的串列必須保持排序。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">list2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>比對兩組串列值，若 l1 &lt; l2 則當前答案串列擺入 l1 ，並且將 l1.next 與沒有擺入的 l2 帶入下一個 next 比較。<br>若相反，將 l2 放進答案串列，並且將 l2.next 與沒有擺入的 l1 帶入下一個 next 比較。</p>
<p>直至某一方先到底，就將另一方剩下的串列都放進答案串列中。</p>
<p><img src="/leetcode-21/recursive.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l2 &#125;</div><div class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l1 &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> l1!.val &lt; l2!.val &#123;</div><div class="line">        l1!.next = mergeTwoLists(l1!.next, l2)</div><div class="line">        <span class="keyword">return</span> l1</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        l2!.next = mergeTwoLists(l2!.next, l1)</div><div class="line">        <span class="keyword">return</span> l2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new lis
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Linked-List/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#263 Ugly Number - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-263/"/>
    <id>http://windsuzu.github.io/leetcode-263/</id>
    <published>2017-10-09T06:17:54.000Z</published>
    <updated>2017-10-09T06:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a program to check whether a given number is an ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>
<p>Note that 1 is typically treated as an ugly number.</p>
<p>驗證給的數字是否為醜數 。</p>
<p>醜數為一正整數，其質因數只包含 2, 3, 5 。</p>
<p>例如 6 和 8 就是醜數， 14 不是因為他的質因數包含 7 。</p>
<p>1 是特例的醜數。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>因為質因數包含 2, 3, 5 ，那只要確認給的數字能否被這三個數字整除到 1 即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isUgly</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> num == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> num = num</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...<span class="number">5</span> <span class="keyword">where</span> i != <span class="number">4</span> &#123;</div><div class="line">        <span class="keyword">while</span> num % i == <span class="number">0</span> &#123;</div><div class="line">            num /= i</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#27 Remove Element - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-27/"/>
    <id>http://windsuzu.github.io/leetcode-27/</id>
    <published>2017-10-08T10:17:44.000Z</published>
    <updated>2017-10-08T10:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>給定陣列和目標值，刪除陣列中所有的目標值，返回新的陣列長度。</p>
<p>可以隨意變動陣列元素，但只可以在同一個陣列操作，不可使用其他多餘的陣列。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.</p>
<p>題目規定從 [3,2,2,3] 移除所有的 3 ，會得到 [2,2] 長度為 2 。 </p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>遍尋陣列，只要當下值不等於目標值，就從全新的 index 開始累積一次陣列。</p>
<p>最後返回 index 累積的次數，即為答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int], <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums[i] != val &#123;</div><div class="line">            nums[index] = nums[i]</div><div class="line">            index += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> index</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an array and a value, remove all instances of that value in plac
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Two-Pointers/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#53 Maximum Subarray - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-53/"/>
    <id>http://windsuzu.github.io/leetcode-53/</id>
    <published>2017-10-07T08:22:50.000Z</published>
    <updated>2017-10-07T11:48:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>找出陣列中，擁有最大值的子陣列，子陣列的值必須是連續且至少有一個值的。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>given the array [-2,1,-3,4,-1,2,1,-5,4],</p>
<p>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p>
<p>在陣列 [-2,1,-3,4,-1,2,1,-5,4] 中， [4,-1,2,1] 可以得到最大加總值 6 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>題目要求出該陣列最大的子陣列。利用動態規劃，把題目拆成每一小段，如果每下一段加總大於前一小段，就將值累積起來。否則應該起始新的段落重新開始。</p>
<p><img src="/leetcode-53/dp.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> nums.isEmpty &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> temp = nums[<span class="number">0</span>], end = nums[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        temp = <span class="built_in">max</span>(temp + nums[i], nums[i])</div><div class="line">        end = <span class="built_in">max</span>(temp, end)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> end</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Find the contiguous subarray within an array (containing at least one 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Divide and Conquer" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Divide-and-Conquer/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Divide-and-Conquer/Dynamic-Programming/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Divide and Conquer" scheme="http://windsuzu.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#35 Search Insert Position - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-35/"/>
    <id>http://windsuzu.github.io/leetcode-35/</id>
    <published>2017-10-06T14:14:13.000Z</published>
    <updated>2017-10-06T14:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p>給定排序過陣列和一個目標值，找出該目標值位於陣列的索引值。所以沒有該數，回傳該數應該被插入在什麼位置。</p>
<p>陣列中沒有重複的數字。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>[1,3,5,6], 5 → 2<br>陣列中 5 的索引為 2</p>
<p>[1,3,5,6], 2 → 1<br>陣列中沒有 2 ，應該在位置 1 插入</p>
<p>[1,3,5,6], 7 → 4<br>陣列中沒有 7 ，應該在位置 4 插入</p>
<p>[1,3,5,6], 0 → 0<br>陣列中沒有 0 ，應該在位置 0 插入</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>首先定義陣列範圍 low 跟 high 。<br>從中間 ( (low + high) / 2) 開始找起，如果中間值等於目標值，回傳中間索引。</p>
<p>如果中間值大於目標值，將 high 向左倒退一位。<br>如果中間值小於目標值，將 low 向右推進一位。</p>
<p>如果目標值存在於陣列中，會在第一段 if 得出結果，<br>如果目標值不在陣列中，會隨著 low 的變動最後得到應插入的索引。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> low = <span class="number">0</span>, high = nums.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> low &lt;= high &#123;</div><div class="line">        <span class="keyword">let</span> mid = (low + high) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> nums[mid] == target &#123; <span class="keyword">return</span> mid &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123; high = mid - <span class="number">1</span> &#125;</div><div class="line">        <span class="keyword">else</span> &#123; low = mid + <span class="number">1</span> &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a sorted array and a target value, return the index if the targe
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Binary-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#437 Path Sum III - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-437/"/>
    <id>http://windsuzu.github.io/leetcode-437/</id>
    <published>2017-10-05T06:56:21.000Z</published>
    <updated>2017-10-05T07:07:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>
<p>有一棵二元樹，每一個節點皆代表一整數。</p>
<p>找出有幾條路徑，加總值等於題目賦予的值。</p>
<p>路徑不用從根節點開始，也不需要再葉節點結束。但一定是從父節點一直往下移動。</p>
<p>整棵樹不會超過 1000 個節點，而且值會在 -1,000,000 到 1,000,000 之間。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root = [<span class="number">10</span>,<span class="number">5</span>,-<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,null,<span class="number">11</span>,<span class="number">3</span>,-<span class="number">2</span>,null,<span class="number">1</span>], sum = <span class="number">8</span></div><div class="line"></div><div class="line">           <span class="number">10</span></div><div class="line">          /  \</div><div class="line">         <span class="number">5</span>   -<span class="number">3</span></div><div class="line">        / \    \</div><div class="line">       <span class="number">3</span>   <span class="number">2</span>   <span class="number">11</span></div><div class="line">      / \   \</div><div class="line">     <span class="number">3</span>  -<span class="number">2</span>   <span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Return</span> <span class="number">3</span>. <span class="type">The</span> paths that sum to <span class="number">8</span> are:</div><div class="line"></div><div class="line"><span class="number">1</span>.  <span class="number">5</span> -&gt; <span class="number">3</span></div><div class="line"><span class="number">2</span>.  <span class="number">5</span> -&gt; <span class="number">2</span> -&gt; <span class="number">1</span></div><div class="line"><span class="number">3</span>. -<span class="number">3</span> -&gt; <span class="number">11</span></div></pre></td></tr></table></figure>
<p>這棵樹共有 3 條路徑加總為 8 。<br>第一條 5 -&gt; 3<br>第二條 5 -&gt; 2 -&gt; 1<br>第三條 -3 -&gt; 11</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先寫出 findPath 函式，從確定好的頂點開始往下走，如果節點值與目標值相同，代表路徑多了一條。</p>
<p>每往下走目標值必須與當前的節點值相減，便於比對整條路的加總。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPath</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> root.val == sum &#123; res += <span class="number">1</span> &#125;</div><div class="line">    res += findPath(root.<span class="keyword">left</span>, sum - root.val)</div><div class="line">    res += findPath(root.<span class="keyword">right</span>, sum - root.val)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由根節點開始，往下給每一個節點進行 findPath ，最終得出所有可能的路徑。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pathSum</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">return</span> findPath(root, sum) + pathSum(root.<span class="keyword">left</span>, sum) + pathSum(root.<span class="keyword">right</span>, sum)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/leetcode-437/nodesum.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;You are given a binary tree in which each node contains an integer val
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#83 Remove Linked List Elements - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-83/"/>
    <id>http://windsuzu.github.io/leetcode-83/</id>
    <published>2017-10-04T09:03:47.000Z</published>
    <updated>2017-10-04T09:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>給一個以排序鏈結串列，刪除所有重複的元素。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>, <span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">2</span>.</div><div class="line"><span class="type">Given</span> <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">3</span>, <span class="keyword">return</span> <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>.</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用遞迴概念，若是該點 (A) 的 next (B) ，與 B 的 next (C) 重複，</p>
<p>則返回 C 成為 A 的新 next 。</p>
<p><img src="/leetcode-83/remove_nodes.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplicates</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head?.next == <span class="literal">nil</span> &#123; <span class="keyword">return</span> head &#125;</div><div class="line">    head!.next = deleteDuplicates(head!.next)</div><div class="line">    <span class="keyword">return</span> head!.val == head!.next?.val ? head!.next : head</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a sorted linked list, delete all duplicates such that each eleme
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Linked-List/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#70 Climbing Stairs - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-70/"/>
    <id>http://windsuzu.github.io/leetcode-70/</id>
    <published>2017-10-03T06:13:24.000Z</published>
    <updated>2017-10-03T06:24:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<p>你正在爬樓梯，需要花 n 步可以走到頂端。</p>
<p>每一步你可以踩 1 或 2 格樓梯。</p>
<p>請問你有幾種方法可以走到頂端 ?</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>如果有 1 層，有 1 一種方式 (只有踩 1 格)</p>
<p>如果有 2 層，有 11, 2 兩種方式 (連續踩兩次 1 格或一次踩 2 格)</p>
<p>如果有 3 層，有 111, 12, 21 三種方式</p>
<p>如果有 4 層，有 1111, 112, 121, 211, 22 五種方式</p>
<p>如果有 5 層，有 11111, 1112, 1121, 1211, 2111, 122, 212, 221 八種方式</p>
<hr>
<p>注意看，<br>n = 1, 1<br>n = 2, 2<br>n = 3, 3 = 1 + 2 (前面兩個結果相加)<br>n = 4, 5 = 3 + 2 (前面兩個結果相加)<br>n = 5, 8 = 5 + 3 (前面兩個結果相加)</p>
<p>這題其實要解的是<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="external">費氏數列</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</div><div class="line">    <span class="keyword">if</span> n == <span class="number">2</span> &#123; <span class="keyword">return</span> <span class="number">2</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> res = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> n1 = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> n2 = <span class="number">2</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">2</span>..&lt;n &#123;</div><div class="line">        res = n1 + n2</div><div class="line">        n1 = n2</div><div class="line">        n2 = res</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;You are climbing a stair case. It takes n steps to reach to the top.&lt;/
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Dynamic-Programming/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#231 Power of Two - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-231/"/>
    <id>http://windsuzu.github.io/leetcode-231/</id>
    <published>2017-10-02T14:39:55.000Z</published>
    <updated>2017-10-02T14:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer, write a function to determine if it is a power of two.</p>
<p>給個整數，寫個函式驗證他是否為 2 的平方數。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>只要可以被 2 整除，就對該數除 2 ，直到無法再除。</p>
<p>查看該數是否為 1 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> n = n</div><div class="line">    <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span> &#123; n /= <span class="number">2</span> &#125;</div><div class="line">    <span class="keyword">return</span> n == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="位元操作"><a href="#位元操作" class="headerlink" title="位元操作"></a>位元操作</h2><p>2 的位元數就代表該數「二進位」只有一個 1 。</p>
<p>所以只要將 n 與 n - 1 做 AND 運算看是否為 0 即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>(<span class="number">1</span>), <span class="number">2</span>(<span class="number">10</span>), <span class="number">4</span>(<span class="number">100</span>), <span class="number">8</span>(<span class="number">1000</span>), <span class="number">16</span>(<span class="number">10000</span>) ....</div><div class="line"></div><div class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></div><div class="line"><span class="number">10</span> &amp; <span class="number">01</span> = <span class="number">0</span></div><div class="line"><span class="number">100</span> &amp; <span class="number">011</span> = <span class="number">0</span></div><div class="line"><span class="number">1000</span> &amp; <span class="number">0111</span> = <span class="number">0</span></div><div class="line">..</div><div class="line">..</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">return</span> n &amp; (n - <span class="number">1</span>) == <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an integer, write a function to determine if it is a power of tw
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
      <category term="Bit Manipulation" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/Bit-Manipulation/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
      <category term="Bit Manipulation" scheme="http://windsuzu.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#458 Poor Pigs - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-458/"/>
    <id>http://windsuzu.github.io/leetcode-458/</id>
    <published>2017-10-02T06:26:13.000Z</published>
    <updated>2017-10-02T07:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>There are 1000 buckets, one and only one of them contains poison, the rest are filled with water. They all look the same. If a pig drinks that poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket contains the poison within one hour.</p>
<p>有一千個桶子，只有一個桶子裝滿毒，其他的皆裝滿水。</p>
<p>如果一隻豬喝到毒，他會在 15 分鐘內死掉。</p>
<p>你需要用到最少幾隻豬來試出哪一個桶子有毒 ?</p>
<p>Answer this question, and write an algorithm for the follow-up general case.</p>
<p>回答問題，並且寫出接下來 follow-up 的演算法。</p>
<p>If there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the “poison” bucket within p minutes? There is exact one bucket with poison.</p>
<p>如果有 n 個桶子，豬喝到毒會在 m 分鐘內死掉，請問需要幾隻豬 (x) 來找出毒桶子在 p 分鐘內 ?</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>如果有 60 分鐘可以測 5 個桶子，喝到毒的豬會在 15 分鐘死掉，那只需要一隻豬即可。</p>
<p>喝一個桶子，等 15 分鐘，再喝一個，等 15 分鐘，直到喝完四個。如果沒死，代表第五個桶子有毒。</p>
<hr>
<p>如果有 60 分鐘測 5x5 個桶子，一樣喝到毒會在 15 分鐘死掉，那這時只需兩隻豬。</p>
<p>一隻豬由左往右喝，一隻豬由上往下喝，喝完等待 15 分鐘，一樣做四次測驗，如果兩隻豬都沒有死掉，代表第二十五個桶子有毒。</p>
<hr>
<p>如果有 60 分鐘測 5x5x5 個桶子，一樣喝到毒會在 15 分鐘死掉，那這時只需三隻豬。</p>
<p>一隻豬由左往右喝整層，一隻豬由上往下喝整層，一隻豬由前往後喝整層，喝完等待 15 分鐘，一樣做四次測驗，如果三隻豬都沒有死掉，代表第一百二十五個桶子有毒。</p>
<p><img src="/leetcode-458/poor_pigs.gif" alt=""></p>
<p>到這裡我們已經可以知道，如果有 n 桶水，可以測試 b 次 ( minutesToTest / minutesToDie + 1 )時，<br>只要跟豬的數量 x 平方，可以大於等於 n 就可以找出毒，也就是 <code>b^x &gt;= n</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">1000</span>, minutesToTest = <span class="number">60</span>, minutesToDie = <span class="number">4</span>, b = <span class="number">60</span>/<span class="number">4</span>+<span class="number">1</span> = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="number">5</span>^x &gt;= <span class="number">1000</span></div><div class="line"></div><div class="line">x = log5(<span class="number">1000</span>) = <span class="number">5</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">poorPigs</span><span class="params">(<span class="number">_</span> buckets: Int, <span class="number">_</span> minutesToDie: Int, <span class="number">_</span> minutesToTest: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> pigs = <span class="number">0.0</span></div><div class="line">    <span class="keyword">while</span> pow(<span class="type">Double</span>(minutesToTest / minutesToDie + <span class="number">1</span>), pigs) &lt; <span class="type">Double</span>(buckets) &#123;</div><div class="line">        pigs += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(pigs)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;There are 1000 buckets, one and only one of them contains poison, the 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#645 Set Mismatch - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-645/"/>
    <id>http://windsuzu.github.io/leetcode-645/</id>
    <published>2017-09-30T06:17:33.000Z</published>
    <updated>2017-10-02T06:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.</p>
<p>一組 Set 包含整數 1 到 n ，但發生了資料錯誤，有一個整數被重複印出兩次且取代某另一個整數，所以整組 Set 中包含一個已重複的整數和一個消失的整數。</p>
<p>Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.</p>
<p>給一個陣列代表已經發生錯誤的 Set ，你的工作是先找出出現兩次的數，然後再找出消失的數。回傳這兩個數。</p>
<blockquote>
<p>Note:<br>The given array size will in the range [2, 10000].<br>The given array’s numbers won’t have any order.</p>
<p>陣列長度介於 [2, 10000]<br>給予的陣列不會有任何排列。</p>
</blockquote>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>]</div><div class="line"><span class="type">Output</span>: [<span class="number">2</span>,<span class="number">3</span>]</div></pre></td></tr></table></figure></p>
<p>2 被重複印出兩次， 3 是消失的那一個數字，所以回傳 [2, 3] 。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>一個字典拿來記錄每一個數字出現的次數，並且計算如果資料沒有發生錯誤，正確的總數會是多少。</p>
<p>尋遍資料，如果出現兩次即可確定重複數字為何，沒有出現過的則與正確總數相減，最後得出缺少的數字。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>] -&gt; dict = [<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">1</span>]</div><div class="line">          -&gt; sum = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> = <span class="number">10</span></div><div class="line"></div><div class="line">dict[<span class="number">2</span>] &gt; <span class="number">1</span> =&gt; <span class="number">2</span> duplicated</div><div class="line"><span class="number">10</span> - <span class="number">1</span> - <span class="number">2</span> - <span class="number">4</span> = <span class="number">3</span> =&gt; <span class="number">3</span> loss</div><div class="line"></div><div class="line">result = [<span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findErrorNums</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> sum = <span class="type">Array</span>(<span class="number">1</span>...nums.<span class="built_in">count</span>).<span class="built_in">reduce</span>(<span class="number">0</span>, &#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">        dict[num] = dict[num] != <span class="literal">nil</span> ? dict[num]! + <span class="number">1</span> : <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> dict[num]! &gt; <span class="number">1</span>&#123;</div><div class="line">            res.append(num)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            sum -= num</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    res.append(sum)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;The set S originally contains numbers from 1 to n. But unfortunately, 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Hash-Table/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Hash-Table/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#326 Power of Three - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-326/"/>
    <id>http://windsuzu.github.io/leetcode-326/</id>
    <published>2017-09-29T05:18:37.000Z</published>
    <updated>2017-09-29T05:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer, write a function to determine if it is a power of three.</p>
<p>給予一個整數，找出他是否為 3 的某次方。</p>
<p>Follow up:<br>Could you do it without using any loop / recursion?</p>
<p>能否不用任何迴圈 / 遞迴 ?</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="Iterative-Solution"><a href="#Iterative-Solution" class="headerlink" title="Iterative Solution"></a>Iterative Solution</h2><p>作為 3 的次方數，不斷除以 3 就會變成 1 ，但必須要注意數字要保持 % 3 == 0 。</p>
<p>27 -&gt; 27/3 -&gt; 9/3 -&gt; 3/3 -&gt; 1 (O)</p>
<p>18 -&gt; 18/3 -&gt; 6/3 -&gt; 2 (X)</p>
<p>15 -&gt; 15/3 -&gt; 5 (%3 != 0) (X)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> x = n</div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">1</span> &#123;</div><div class="line">        <span class="keyword">while</span> x % <span class="number">3</span> == <span class="number">0</span> &#123;</div><div class="line">            x /= <span class="number">3</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Recursive-Solution"><a href="#Recursive-Solution" class="headerlink" title="Recursive Solution"></a>Recursive Solution</h2><p>把迴圈換成遞迴。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n == <span class="number">1</span> || (n % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; isPowerOfThree(n / <span class="number">3</span>)))</div></pre></td></tr></table></figure>
<h2 id="No-Loop-Recursion-Solution"><a href="#No-Loop-Recursion-Solution" class="headerlink" title="No Loop / Recursion Solution"></a>No Loop / Recursion Solution</h2><p>3^19 為 1,162,261,467 , 再過來 3^20 = 3,486,784,401 已經超出 Int 的最大範圍 (2,147,483,647)。</p>
<p>所以只要 n &gt; 0 且能被 3^19 整除就是 3 的次方數。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> ( n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an integer, write a function to determine if it is a power of th
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#182 Duplicate Emails - in MySQL</title>
    <link href="http://windsuzu.github.io/leetcode-182/"/>
    <id>http://windsuzu.github.io/leetcode-182/</id>
    <published>2017-09-28T04:11:41.000Z</published>
    <updated>2017-09-28T04:19:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a SQL query to find all duplicate emails in a table named Person.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+<span class="comment">----+---------+</span></div><div class="line">| Id | Email   |</div><div class="line">+<span class="comment">----+---------+</span></div><div class="line">| 1  | a@b.com |</div><div class="line">| 2  | c@d.com |</div><div class="line">| 3  | a@b.com |</div><div class="line">+<span class="comment">----+---------+</span></div></pre></td></tr></table></figure>
<p>寫出 SQL Query 從 Person 找出所有有重複的 email 資料。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example, your query should return the following for the above table:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+<span class="comment">---------+</span></div><div class="line">| Email   |</div><div class="line">+<span class="comment">---------+</span></div><div class="line">| a@b.com |</div><div class="line">+<span class="comment">---------+</span></div></pre></td></tr></table></figure>
<p>根據上面的例子，應該要回傳這樣的表。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>首先用 GROUP BY 將 Email 分組起來。</p>
<p>再來利用 HAVING 找出分組後誰的 Email 數量大於 1 的即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Email</div><div class="line"><span class="keyword">FROM</span> Person</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">count</span>(Email) &gt; <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Write a SQL query to find all duplicate emails in a table named Person
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/categories/LeetCode/MySQL/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
