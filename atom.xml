<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Code</title>
  <subtitle>Study Recording</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://windsuzu.github.io/"/>
  <updated>2017-10-27T05:43:30.000Z</updated>
  <id>http://windsuzu.github.io/</id>
  
  <author>
    <name>Jay Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode#441 Arranging Coins - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-441/"/>
    <id>http://windsuzu.github.io/leetcode-441/</id>
    <published>2017-10-27T05:18:18.000Z</published>
    <updated>2017-10-27T05:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.</p>
<p>Given n, find the total number of full staircase rows that can be formed.</p>
<p>n is a non-negative integer and fits within the range of a 32-bit signed integer.</p>
<p>給你 n 個硬幣排成樓梯的形狀，每 k 層有 k 個硬幣。</p>
<p>現在給你 n ， 返回你最大可以排成的樓梯有幾層。 n 為一個非負數整數。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">The</span> coins can form the following rows:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line"><span class="type">Because</span> the 3rd row <span class="keyword">is</span> incomplete, we <span class="keyword">return</span> <span class="number">2</span>.</div></pre></td></tr></table></figure></p>
<p>5 個硬幣排完第 3 層還沒完成，所以返回 2 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">8</span></div><div class="line"></div><div class="line"><span class="type">The</span> coins can form the following rows:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line"><span class="type">Because</span> the 4th row <span class="keyword">is</span> incomplete, we <span class="keyword">return</span> <span class="number">3</span>.</div></pre></td></tr></table></figure></p>
<p>8 個硬幣排完第 4 層還沒完成，所以返回 3 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h2><p>對 n 從第一層開始減，直至無法再減。<br>代表該層未完成，返回前一層的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrangeCoinsIterative</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> n = n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="type">Int</span>.<span class="built_in">max</span> &#123;</div><div class="line">        <span class="keyword">if</span> n - i &gt;= <span class="number">0</span> &#123;</div><div class="line">            n -= i</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> i - <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Mathematic"><a href="#Mathematic" class="headerlink" title="Mathematic"></a>Mathematic</h2><p>要算出 n 層的硬幣有幾個，等於要算出 1 + 2 + 3 + … + n </p>
<p>這有一個公式是(上底+下底)乘高除以2 : <code>sum = (1 + x) * x / 2</code></p>
<p>並且在這題裡面的 sum 要小於等於 n ， 所以為 <code>(1 + x) * x / 2 &lt;= n</code></p>
<p>解出這個式子 :</p>
<blockquote>
<p>(1 + x) * x / 2 &lt;= n<br>x^2 + x  &lt;= 2n<br>4x^2 + 4x &lt;= 8n<br>(2x + 1)(2x + 1) - 1 &lt;= 8n<br>x &lt;= (√(8n + 1) - 1) / 2</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrangeCoinsMathematic</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>((sqrt(<span class="number">8</span> * <span class="type">Double</span>(n) + <span class="number">1</span>) - <span class="number">1</span>) / <span class="type">Double</span>(<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;You have a total of n coins that you want to form in a staircase shape
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/Binary-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#172 Factorial Trailing Zeroes - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-172/"/>
    <id>http://windsuzu.github.io/leetcode-172/</id>
    <published>2017-10-26T06:27:22.000Z</published>
    <updated>2017-10-26T06:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<p>Note: Your solution should be in logarithmic time complexity.</p>
<p>給定整數 n ，返回 n! 中有幾個後綴的 0 。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">5</span>!</div><div class="line"><span class="type">Output</span>: <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>5! = <code>1 * 2 * 3 * 4 * 5</code> = 120<br>後綴有 1 個 0 所以回傳 1</p>
<p>Example 2 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">25</span>!</div><div class="line"><span class="type">Output</span>: <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>25! = 15511210043330985984000000<br>後綴共有 6 個 0 所以回傳 6</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從 <code>5!</code> 看為什麼會有後綴的 <code>0</code><br>因為 <code>1 * 2 * 3 * 4 * 5</code> 有 <code>2</code> 跟 <code>5</code> 相乘得出 <code>10</code><br>但從 <code>1</code> 到 <code>n</code> 那麼多個 <code>2</code> ，真正造成後綴出現 <code>0</code> 的是 <code>5</code><br>所以我們只需要對 <code>n / 5</code> 即可</p>
<p>但 <code>25!</code> 不是 <code>25 / 5 = 5</code> 嗎，為什麼是 <code>6</code><br>因為 <code>25</code> 本身還多包含了 <code>5 * 5</code> ，所以要 + 1</p>
<p>這邊利用遞迴若 <code>n / 5</code> 還可以被 <code>5</code> 除，那就在加進原來的答案中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">trailingZeroes</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">0</span> : n / <span class="number">5</span> + trailingZeroes(n / <span class="number">5</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an integer n, return the number of trailing zeroes in n!.&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#434 Number of Segments in a String - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-434/"/>
    <id>http://windsuzu.github.io/leetcode-434/</id>
    <published>2017-10-25T05:10:25.000Z</published>
    <updated>2017-10-25T05:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.</p>
<p>Please note that the string does not contain any non-printable characters.</p>
<p>算出一個字串中有幾個段落，一個段落代表一段不含空白的連續字元。</p>
<p>注意字串中不計算任何 “沒印出” 的字元</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"Hello, my name is John"</span></div><div class="line"><span class="type">Output</span>: <span class="number">5</span></div></pre></td></tr></table></figure>
<p>該字串分為五段，”Hello,” 和 “my” 和 “name” 和 “is” 和 “John”</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSegments</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> s.characters.<span class="built_in">split</span>(separator: <span class="string">" "</span>).<span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一行解決，用空白字元拆開全部字元，算出拆開的段落有幾個。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Count the number of segments in a string, where a segment is defined t
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#119 Pascal&#39;s Triangle II - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-119/"/>
    <id>http://windsuzu.github.io/leetcode-119/</id>
    <published>2017-10-24T05:55:01.000Z</published>
    <updated>2017-10-24T06:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an index k, return the kth row of the Pascal’s triangle.</p>
<p>給定索引值 k ，返回帕斯卡三角形的第 k+1 層。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example, given k = 3,<br>Return [1,3,3,1].</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>首先定義第 k 個的陣列中會有 k + 1 個元素，</p>
<p>如果 k 為 1 直接返回 [1] ， k &gt; 1 則開始從第一層帕斯卡三角形開始組起。</p>
<p>每一層跳過 1 開始，由後往前填滿該層的元素，每個元素恰好為上一層的該元素 + 前一個元素組成。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">k = <span class="number">3</span></div><div class="line">res = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line"></div><div class="line">第一層</div><div class="line">k[<span class="number">1</span>] = k[<span class="number">1</span>] + k[<span class="number">0</span>] = <span class="number">0</span> + <span class="number">1</span></div><div class="line">res = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line"></div><div class="line">第二層</div><div class="line">k[<span class="number">2</span>] = k[<span class="number">2</span>] + k[<span class="number">1</span>] = <span class="number">0</span> + <span class="number">1</span></div><div class="line">k[<span class="number">1</span>] = k[<span class="number">1</span>] + k[<span class="number">0</span>] = <span class="number">1</span> + <span class="number">1</span></div><div class="line">res = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]</div><div class="line"></div><div class="line">第三層</div><div class="line">k[<span class="number">3</span>] = k[<span class="number">3</span>] + k[<span class="number">2</span>] = <span class="number">0</span> + <span class="number">1</span></div><div class="line">k[<span class="number">2</span>] = k[<span class="number">2</span>] + k[<span class="number">1</span>] = <span class="number">1</span> + <span class="number">2</span></div><div class="line">k[<span class="number">1</span>] = k[<span class="number">1</span>] + k[<span class="number">0</span>] = <span class="number">2</span> + <span class="number">1</span></div><div class="line">res = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>]</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRow</span><span class="params">(<span class="number">_</span> rowIndex: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">if</span> rowIndex == <span class="number">0</span> &#123; <span class="keyword">return</span> [<span class="number">1</span>] &#125;</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: rowIndex + <span class="number">1</span>)</div><div class="line">    res[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...rowIndex &#123;</div><div class="line">        <span class="keyword">var</span> j = i</div><div class="line">        <span class="keyword">while</span> j &gt;= <span class="number">1</span> &#123;</div><div class="line">            res[j] += res[j - <span class="number">1</span>]</div><div class="line">            j -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an index k, return the kth row of the Pascal’s triangle.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#501 Find Mode in Binary Search Tree - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-501/"/>
    <id>http://windsuzu.github.io/leetcode-501/</id>
    <published>2017-10-23T08:14:51.000Z</published>
    <updated>2017-10-23T08:20:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p>
<p>給一二元搜尋樹 (BST) 包含重複節點，找出該樹的眾數 (mode(s)) (可能有多個) (出現最多次的元素) 。</p>
<p>Assume a BST is defined as follows:</p>
<ol>
<li>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ol>
<p>假設該 BST 定義為下:</p>
<ol>
<li>左子樹只包含「小於或等於」的節點</li>
<li>右子樹只包含「大於或等於」的節點</li>
<li>其餘左右子樹必須維持上述的規則</li>
</ol>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> <span class="type">BST</span> [<span class="number">1</span>,null,<span class="number">2</span>,<span class="number">2</span>],</div><div class="line">   <span class="number">1</span></div><div class="line">    \</div><div class="line">     <span class="number">2</span></div><div class="line">    /</div><div class="line">   <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> [<span class="number">2</span>].</div></pre></td></tr></table></figure></p>
<p>Note: If a tree has more than one mode, you can return them in any order.</p>
<p>如果不止一個眾數，請回傳一個沒有限制排序的陣列。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>這個做法不為最佳解，也不限制只能在 BST ，可以使用在任何二元樹。</p>
<p>利用 map 記錄每一個節點值出現的次數，並且不斷更新 maxVal (最多出現次數)的值。</p>
<p>走完一遍樹後，再從 map 中找出所有 v (次數) 等於 maxVal 的節點 k ，加進 result 中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMode</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Int</span>:<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> maxVal = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">traverse</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        </div><div class="line">        dict[root!.val] = dict[root!.val] != <span class="literal">nil</span> ? dict[root!.val]! + <span class="number">1</span> : <span class="number">1</span></div><div class="line">        maxVal = <span class="built_in">max</span>(dict[root!.val]!, maxVal)</div><div class="line">        </div><div class="line">        traverse(root!.<span class="keyword">left</span>)</div><div class="line">        traverse(root!.<span class="keyword">right</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    traverse(root)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">for</span> (k,v) <span class="keyword">in</span> dict &#123;</div><div class="line">        <span class="keyword">if</span> v == maxVal &#123; res.append(k) &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary search tree (BST) with duplicates, find all the mode(s)
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#643 Maximum Average Subarray I - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-643/"/>
    <id>http://windsuzu.github.io/leetcode-643/</id>
    <published>2017-10-22T03:26:43.000Z</published>
    <updated>2017-10-22T03:32:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.</p>
<p>給一個由 n 個整數組成的陣列，並且給定目標值 k 。找出陣列中連續 k 個值其平均為陣列中最大平均值，並且返回該平均值。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">12</span>,-<span class="number">5</span>,-<span class="number">6</span>,<span class="number">50</span>,<span class="number">3</span>], k = <span class="number">4</span></div><div class="line"><span class="type">Output</span>: <span class="number">12.75</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">Maximum</span> average <span class="keyword">is</span> (<span class="number">12</span>-<span class="number">5</span>-<span class="number">6</span>+<span class="number">50</span>)/<span class="number">4</span> = <span class="number">51</span>/<span class="number">4</span> = <span class="number">12.75</span></div></pre></td></tr></table></figure></p>
<p>在 [1,12,-5,-6,50,3] 陣列中，要找出連續 4 個數的平均為最大平均值。<br>答案為 [12,-5,-6,50] 這段， (12-5-6+50)/4 = 51/4 = 12.75</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先算出陣列起始 k 個元素的加總 (temp) ，新增一個目前最大值 (res)。</p>
<p>由陣列第 k 個以後開始，將 temp 去掉第一個值，並加上新的值，重新比對 res 跟 temp 。</p>
<p>最後得出的 res / k 即是最大平均值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxAverage</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">    <span class="keyword">var</span> temp = nums[<span class="number">0</span>..&lt;k].<span class="built_in">reduce</span>(<span class="number">0</span>, &#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;)</div><div class="line">    <span class="keyword">var</span> res = temp</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        temp += nums[i] - nums[i-k]</div><div class="line">        res = <span class="built_in">max</span>(res, temp)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Double</span>(res) / <span class="type">Double</span>(k)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an array consisting of n integers, find the contiguous subarray 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#110 Balanced Binary Tree - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-110/"/>
    <id>http://windsuzu.github.io/leetcode-110/</id>
    <published>2017-10-21T07:16:23.000Z</published>
    <updated>2017-10-21T07:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<p>給一二元樹，驗證它是否高度平衡。</p>
<p>高度平衡的定義為，二元樹其兩個子樹的每個節點的深度不超過 1 。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">5</span></div><div class="line">      / \</div><div class="line">     <span class="number">3</span>   <span class="number">4</span></div><div class="line">    / \   \</div><div class="line">   <span class="number">2</span>   <span class="number">6</span>   <span class="number">1</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div></pre></td></tr></table></figure></p>
<p>該二元樹其兩個子樹的每個節點，深度差皆不超過 1 ，為高度平衡。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">       <span class="number">5</span></div><div class="line">      / \</div><div class="line">     <span class="number">3</span>   <span class="number">4</span></div><div class="line">    / \   \</div><div class="line">   <span class="number">2</span>   <span class="number">6</span>   <span class="number">1</span></div><div class="line">          /</div><div class="line">         <span class="number">7</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>該二元樹倒節點 4 時，其左子樹為空，深度為 1，右子樹持續走到 7 ，深度為 3 ， 3 - 1 &gt; 1 ，不為高度平衡。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>要確定每一個節點的左右子樹是否高度平衡，利用 findDepth 找出該節點的深度，再比較左右節點的差是否大於 1 。</p>
<p>再來要確定每一個節點的平衡，利用遞迴對整棵樹的每一個節點進行一次上述的比較。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isBalanced</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(findDepth(root!.<span class="keyword">left</span>), findDepth(root!.<span class="keyword">right</span>)) + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">left</span> = findDepth(root!.<span class="keyword">left</span>)</div><div class="line">    <span class="keyword">let</span> <span class="keyword">right</span> = findDepth(root!.<span class="keyword">right</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="keyword">left</span> - <span class="keyword">right</span>) &lt;= <span class="number">1</span> &amp;&amp; isBalanced(root!.<span class="keyword">left</span>) &amp;&amp; isBalanced(root!.<span class="keyword">right</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;
&lt;p&gt;For th
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#459 Repeated Substring Pattern - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-459/"/>
    <id>http://windsuzu.github.io/leetcode-459/</id>
    <published>2017-10-20T06:13:11.000Z</published>
    <updated>2017-10-20T06:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>
<p>給定一個不為空的字串，且字元皆為小寫英文字母，字串長度不超過 10000 。<br>驗證該字串，是否為字串中某子字串複製組合而成。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"abab"</span></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">It's</span> the substring <span class="string">"ab"</span> twice.</div></pre></td></tr></table></figure></p>
<p>abab 是被 ab 子字串複製組合而成</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"aba"</span></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>aba 不為任何子字串的重複</p>
<p>Example 3:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"abcabcabcabc"</span></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="type">It's</span> the substring <span class="string">"abc"</span> four times. (<span class="type">And</span> the substring <span class="string">"abcabc"</span> twice.)</div></pre></td></tr></table></figure></p>
<p>abcabcabcabc 為 abc 重組四次， abcabc 重組兩次而成</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>若字串符合題目條件，<br>那字串第一個字元會是每個重複字串的第一個字元(頭)，<br>而字串最後一個字元會是每個重複字串的最後一個字元(腳)。</p>
<p>將原字串 S 複製為二生出 SS ( abab -&gt; abababab )<br>再將 SS 頭跟腳去掉得到 S2 ( abababab -&gt; _bababa_ )<br>若在去掉頭腳的 S2 中還可以找到 S 的模式那代表這個字串是符合題目條件的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">repeatedSubstringPattern</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> ss = s + s</div><div class="line">    <span class="keyword">let</span> s2 = ss.substring(with: ss.index(after: ss.startIndex)..&lt;ss.index(before: ss.endIndex))</div><div class="line">    <span class="keyword">return</span> s2.<span class="built_in">contains</span>(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a non-empty string check if it can be constructed by taking a su
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#175 Combine Two Tables - in MySQL</title>
    <link href="http://windsuzu.github.io/leetcode-175/"/>
    <id>http://windsuzu.github.io/leetcode-175/</id>
    <published>2017-10-19T07:13:44.000Z</published>
    <updated>2017-10-19T07:18:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Table: Person</div><div class="line"></div><div class="line">+-------------+---------+</div><div class="line">| Column Name | Type    |</div><div class="line">+-------------+---------+</div><div class="line">| PersonId    | int     |</div><div class="line">| FirstName   | varchar |</div><div class="line">| LastName    | varchar |</div><div class="line">+-------------+---------+</div><div class="line">PersonId is the primary key column for this table.</div><div class="line"></div><div class="line">PersonId 是這個表格的主鍵。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Table: Address</div><div class="line"></div><div class="line">+-------------+---------+</div><div class="line">| Column Name | Type    |</div><div class="line">+-------------+---------+</div><div class="line">| AddressId   | int     |</div><div class="line">| PersonId    | int     |</div><div class="line">| City        | varchar |</div><div class="line">| State       | varchar |</div><div class="line">+-------------+---------+</div><div class="line">AddressId is the primary key column for this table.</div><div class="line"></div><div class="line">AddressId 是這個表格的主鍵。</div></pre></td></tr></table></figure>
<p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:<br>FirstName, LastName, City, State</p>
<p>寫一個 SQL 查詢，回傳每一個 Person 的值，以及其對應的 Address 欄位，<br>格式為 FirstName, LastName, City, State ，<br>不管有沒有對應的 Address 都要傳回。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>沒什麼難度的 SQL 查詢。</p>
<p>注意的是不管有沒有對應的 Address 都要回傳 Person ，所以要使用 LEFT JOIN 右邊為空時返回 null 即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> FirstName, LastName, City, State</div><div class="line"><span class="keyword">FROM</span> Person</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address <span class="keyword">ON</span> Person.PersonId = Address.PersonId</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/categories/LeetCode/MySQL/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#367 Valid Perfect Square - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-367/"/>
    <id>http://windsuzu.github.io/leetcode-367/</id>
    <published>2017-10-18T06:39:48.000Z</published>
    <updated>2017-10-18T07:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p>
<p>給一正整數，驗證其是否為一個完全平方數。</p>
<p>Note: Do not use any built-in library function such as sqrt.</p>
<p>不使用任何語法中的 sqrt 函式。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">16</span></div><div class="line"><span class="type">Returns</span>: <span class="type">True</span></div></pre></td></tr></table></figure></p>
<p>16 可以是 4 的平方數</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">14</span></div><div class="line"><span class="type">Returns</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>14 不是任何正整數的平方數</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h1 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h1><p>根據 <a href="http://www.cs.wustl.edu/~kjg/CS101_SP97/Notes/SquareRoot/sqrt.html" target="_blank" rel="external">http://www.cs.wustl.edu/~kjg/CS101_SP97/Notes/SquareRoot/sqrt.html</a> 的指引，要達成 sqrt function 的運作，首先先找出一個數符合 <code>y^2 = x, y = x/y</code> ，知道這個條件後:</p>
<ul>
<li>猜一個數 g 來代表 y ，並且測試</li>
<li>檢驗 x / g</li>
<li>如果 x/g 等於 g ，那就代表找到 sqrt 的解，若沒有等於，再猜一個更好的 g</li>
<li>這個更好的 g 等於 x 和 x /g 的平均值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> x = num</div><div class="line">    <span class="keyword">while</span> x * x &gt; num &#123;</div><div class="line">        x = (x + (num/x)) / <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x * x == num</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h1><p>使用二元搜尋法，從對半開始找起，如果等於答案則返回 true 。</p>
<p>大於則將右邊改為中間數 - 1，小於則將左邊改為中間數 + 1 。持續對半搜尋答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPerfectSquareBinary</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> (<span class="keyword">left</span>, <span class="keyword">right</span>) = (<span class="number">1</span>, num)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt;= <span class="keyword">right</span> &#123;</div><div class="line">        <span class="keyword">let</span> mid = (<span class="keyword">left</span> + <span class="keyword">right</span>) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> mid * mid == num &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> mid * mid &gt; num &#123;</div><div class="line">            <span class="keyword">right</span> = mid - <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">left</span> = mid + <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a positive integer num, write a function which returns True if n
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/Binary-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#345 Reverse Vowels of a String - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-345/"/>
    <id>http://windsuzu.github.io/leetcode-345/</id>
    <published>2017-10-17T07:25:58.000Z</published>
    <updated>2017-10-17T07:31:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a function that takes a string as input and reverse only the vowels of a string.</p>
<p>反轉字串，但只反轉母音的部分。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Example</span> <span class="number">1</span>:</div><div class="line"><span class="type">Given</span> s = <span class="string">"hello"</span>, <span class="keyword">return</span> <span class="string">"holle"</span>.</div></pre></td></tr></table></figure>
<p>hello 中的 eo 轉換為 oe</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Example</span> <span class="number">2</span>:</div><div class="line"><span class="type">Given</span> s = <span class="string">"leetcode"</span>, <span class="keyword">return</span> <span class="string">"leotcede"</span>.</div></pre></td></tr></table></figure>
<p>leetcode 中的 eeoe 轉換為 eoee</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>定義母音表，接著像 <a href="https://windsuzu.github.io/leetcode-344/">Reverse String</a> 這題一樣進行兩個指針的迴圈。</p>
<p>不同的是，若當下左邊的字母不為母音，就將左指針 +1<br>反之，右邊不為母音，將右指針 -1</p>
<p>確定抓到左右兩個母音時，就將左右調換，左右各進退一步。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseVowels</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">set</span>: <span class="type">Set</span>&lt;<span class="type">Character</span>&gt; = [<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>, <span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span>, <span class="string">"O"</span>, <span class="string">"U"</span>]</div><div class="line">    <span class="keyword">var</span> s = <span class="type">Array</span>(s.characters)</div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = s.<span class="built_in">count</span> - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &#123;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &amp;&amp; !<span class="keyword">set</span>.<span class="built_in">contains</span>(s[<span class="keyword">left</span>]) &#123;</div><div class="line">            <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt; <span class="keyword">right</span> &amp;&amp; !<span class="keyword">set</span>.<span class="built_in">contains</span>(s[<span class="keyword">right</span>]) &#123;</div><div class="line">            <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> temp = s[<span class="keyword">left</span>]</div><div class="line">        s[<span class="keyword">left</span>] = s[<span class="keyword">right</span>]</div><div class="line">        s[<span class="keyword">right</span>] = temp</div><div class="line">        <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        <span class="keyword">right</span> -= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Write a function that takes a string as input and reverse only the vow
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Two-Pointers/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Two-Pointers/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#342 Power of Four - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-342/"/>
    <id>http://windsuzu.github.io/leetcode-342/</id>
    <published>2017-10-16T06:45:02.000Z</published>
    <updated>2017-10-16T06:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>
<p>驗證整數是否為 4 的次方數。</p>
<p>Follow up: Could you solve it without loops/recursion?</p>
<p>可不可以不使用迴圈或遞迴。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given num = 16, return true. Given num = 5, return false.</p>
<p>輸入 16 回傳 true<br>輸入 5 則回傳 false</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>要達成 4 的次方數，需要符合三個條件:</p>
<ol>
<li><p>4 的次方數一定大於 0</p>
</li>
<li><p>4 的次方數在 Bit 中，一定只有開頭為 1<br>如 4(100), 16(10000), 64(1000000), 256(100000000)</p>
<p>為了驗證只有開頭為 1 ，只要和未進位的前一個數字做 &amp; 運算，得出 0 即可。<br>如 4(100) &amp; 3(011) = 0,  16(10000) &amp; 15(01111) = 0</p>
</li>
<li><p>除了 4 的次方數只有開頭為 1 以外， 2 的次方數也是如此。<br>但 4 的次方數還有一點不同於 2 的次方數，也就是 1 所在的位置。<br>4 的次方數的 1 一律位在奇數的位置，如 100 在 3 ， 10000 在 5 ， 1000000 在 7 …</p>
<p>要驗證 1 是否在奇數位置，與 0x55555555 做 &amp; 運算，得出不為 0 的答案即可。<br>0x55555555 在 Bit 中為 01010101010101010101010101010101<br>可以對應到奇數位置是否存在。</p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> &amp;&amp; num &amp; (num-<span class="number">1</span>) == <span class="number">0</span> &amp;&amp; num &amp; <span class="number">0x55555555</span> != <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an integer (signed 32 bits), write a function to check whether i
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Bit Manipulation" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Bit-Manipulation/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Bit Manipulation" scheme="http://windsuzu.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#66 Plus One - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-66/"/>
    <id>http://windsuzu.github.io/leetcode-66/</id>
    <published>2017-10-15T06:15:32.000Z</published>
    <updated>2017-10-16T07:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.</p>
<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>
<p>The digits are stored such that the most significant digit is at the head of the list.</p>
<p>利用陣列來表示一個非負數整數，不可包含前綴的 0 ，現在對這個整數加一。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>7 = [7] , 7 + 1 = 8 = [8]</p>
<p>19 = [1,9] , 19 + 1 = 20 = [2,0]。</p>
<p>999 = [9,9,9] , 999 + 1 = 1000 = [1,0,0,0]</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先對陣列的最後一個值 + 1 。</p>
<p>若是陣列中含有 10 ，代表需要進位。將該值變為零，前一個值 + 1 。</p>
<p>若遇到 [9,9] 這類的，必須要新增一個新陣列放 1 在最前方，使之變為 [1,0,0] 。 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(<span class="number">_</span> digits: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">        <span class="keyword">var</span> digits = digits</div><div class="line">        digits[digits.<span class="built_in">count</span> - <span class="number">1</span>] += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> digits.<span class="built_in">contains</span>(<span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">let</span> i = digits.index(of: <span class="number">10</span>)!</div><div class="line">            digits[i] = <span class="number">0</span></div><div class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> &#123;</div><div class="line">                digits[i - <span class="number">1</span>] += <span class="number">1</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> new = [<span class="number">1</span>]</div><div class="line">                new.append(contentsOf: digits)</div><div class="line">                digits = new</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> digits</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a non-negative integer represented as a non-empty array of digit
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#118 Pascal&#39;s Triangle - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-118/"/>
    <id>http://windsuzu.github.io/leetcode-118/</id>
    <published>2017-10-14T06:46:39.000Z</published>
    <updated>2017-10-14T06:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>給定行數 N ，返回 N 行的<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2" target="_blank" rel="external">帕斯卡三角形</a>。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">For</span> example, given numRows = <span class="number">5</span>,</div><div class="line"><span class="type">Return</span></div><div class="line"></div><div class="line">[</div><div class="line">       [<span class="number">1</span>],</div><div class="line">      [<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">     [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</div><div class="line">    [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],</div><div class="line">   [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]</div><div class="line">]</div></pre></td></tr></table></figure>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從 wikipedia 發現 Pascal’s Triangle 有一個特性，從第二層之後，</p>
<p>除了首尾皆為 1 以外，其他每一格的值皆由上方兩個值加總所得。</p>
<p><img src="/leetcode-118/PascalTriangleAnimated2.gif" alt=""></p>
<p>所以透過這個特性，來填滿每一層除了首尾以外的中間值即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(<span class="number">_</span> numRows: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">    <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">0</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    res.append([<span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">1</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    res.append([<span class="number">1</span>, <span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">2</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..&lt;numRows &#123;</div><div class="line">        <span class="keyword">var</span> temp = [<span class="type">Int</span>]()</div><div class="line">        temp.append(<span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> lastRow = res[i - <span class="number">1</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;lastRow.<span class="built_in">count</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> i == lastRow.<span class="built_in">count</span> - <span class="number">1</span> &#123;</div><div class="line">                temp.append(<span class="number">1</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp.append(lastRow[i] + lastRow[i + <span class="number">1</span>])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        res.append(temp)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given numRows, generate the first numRows of Pascal’s triangle.&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#101 Symmetric Tree - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-101/"/>
    <id>http://windsuzu.github.io/leetcode-101/</id>
    <published>2017-10-13T07:42:17.000Z</published>
    <updated>2017-10-13T07:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>給定二元樹，驗證他是否對稱。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">2</span></div><div class="line"> / \ / \</div><div class="line"><span class="number">3</span>  <span class="number">4</span> <span class="number">4</span>  <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>But the following [1,2,2,null,3,null,3] is not:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="number">1</span></div><div class="line"> / \</div><div class="line"><span class="number">2</span>   <span class="number">2</span></div><div class="line"> \   \</div><div class="line">  <span class="number">3</span>   <span class="number">3</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從根節點左右開始驗證，若左右皆為 nil 則為對稱，若只有某一邊 nil 則不為對稱。</p>
<p>若兩邊都存在，比對值是否相同，相同則繼續往下比對，</p>
<p>比對左子樹的左節點，和右子樹的右節點是否相同，</p>
<p>再比對左子樹的右節點，和右子樹的左節點是否相同，</p>
<p>直到結束，返回答案值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="literal">true</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">checking</span><span class="params">(<span class="number">_</span> <span class="keyword">left</span>: TreeNode?, <span class="number">_</span> <span class="keyword">right</span>: TreeNode?)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span> &#123; res = <span class="literal">false</span>; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span> &#123; res = <span class="literal">false</span>; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">left</span>!.val != <span class="keyword">right</span>!.val &#123;</div><div class="line">                res = <span class="literal">false</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                checking(<span class="keyword">left</span>?.<span class="keyword">left</span>, <span class="keyword">right</span>?.<span class="keyword">right</span>)</div><div class="line">                checking(<span class="keyword">left</span>?.<span class="keyword">right</span>, <span class="keyword">right</span>?.<span class="keyword">left</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    checking(root?.<span class="keyword">left</span>, root?.<span class="keyword">right</span>)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symme
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
      <category term="Breadth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/Breadth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
      <category term="Breadth-first Search" scheme="http://windsuzu.github.io/tags/Breadth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#257 Binary Tree Paths - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-257/"/>
    <id>http://windsuzu.github.io/leetcode-257/</id>
    <published>2017-10-12T07:01:45.000Z</published>
    <updated>2017-10-12T07:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, return all root-to-leaf paths.</p>
<p>給一個二元樹，返回所有根節點到葉節點的路徑。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>given the following binary tree:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     <span class="number">1</span></div><div class="line">   /   \</div><div class="line">  <span class="number">2</span>     <span class="number">3</span></div><div class="line"> /  \</div><div class="line"><span class="number">4</span>    <span class="number">5</span></div></pre></td></tr></table></figure>
<p>All root-to-leaf paths are:</p>
<p>[“1-&gt;2-&gt;4”, “1-&gt;2-&gt;5”, “1-&gt;3”]</p>
<p>根據上圖，總共有兩個根節點到葉節點的路徑，分別為 “1-&gt;2-&gt;4” 以及 “1-&gt;2-&gt;5” 和 “1-&gt;3”。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>以範例來說，利用 dps 一開始會跑根節點 1 到 2 ，給新路徑 “1-&gt;”<br>當前節點為 2 時， 當前路徑為 “1-&gt;”<br>下一個到 4 時， 當前路徑為 “1-&gt;2-&gt;”<br>且 4 沒有任何子節點了，所以更新路徑為 “1-&gt;2-&gt;4” 並且加入陣列中</p>
<p>回到 2 的分岔，當前路徑為 “1-&gt;”<br>下一個到 5 時， 當前路徑為 “1-&gt;2-&gt;”<br>且 5 沒有任何子節點了，所以更新路徑為 “1-&gt;2-&gt;5” 並且加入陣列中</p>
<p>回到 1 的分岔，<br>下一個到 3 時，當前路徑為 “1-&gt;”<br>且 3 沒有任何子節點了，所以更新路徑為 “1-&gt;3” 並且加入陣列中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">binaryTreePaths</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> [] &#125;</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">String</span>]()</div><div class="line">    search(root, <span class="string">""</span>, &amp;res)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> currentPath: String, <span class="number">_</span> res: <span class="keyword">inout</span> [String])</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root?.<span class="keyword">right</span> == <span class="literal">nil</span> &#123; res.append(<span class="string">"\(currentPath)\(root!.val)"</span>) &#125;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">left</span> != <span class="literal">nil</span> &#123; search(root?.<span class="keyword">left</span>, <span class="string">"\(currentPath)\(root!.val)-&gt;"</span>, &amp;res) &#125;</div><div class="line">    <span class="keyword">if</span> root?.<span class="keyword">right</span> != <span class="literal">nil</span> &#123; search(root?.<span class="keyword">right</span>, <span class="string">"\(currentPath)\(root!.val)-&gt;"</span>, &amp;res) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, return all root-to-leaf paths.&lt;/p&gt;
&lt;p&gt;給一個二元樹，返回所有
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#198 House Robber - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-198/"/>
    <id>http://windsuzu.github.io/leetcode-198/</id>
    <published>2017-10-11T05:33:02.000Z</published>
    <updated>2017-10-11T05:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>
<p>你是一個專業的小偷，打算沿著整條街偷每一戶的東西。 你可以偷每一戶的東西，但只要在同一天晚上，你偷完一間房子，又偷他左右鄰居，這時就會有警鈴響起，自動呼叫警察過來。</p>
<p>現在給你一個包含正整數的陣列，每個數字代表每間住戶所擁有的財產，你需要找到能夠在一個晚上，偷到最多錢的方法，且不會驚動到警鈴。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">9</span>]</div><div class="line"><span class="type">Output</span> : <span class="number">16</span></div></pre></td></tr></table></figure></p>
<p>偷 3, 13 能偷到最多錢，也不會驚動警鈴。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : [<span class="number">1</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">45</span>]</div><div class="line"><span class="type">Output</span> : <span class="number">95</span></div></pre></td></tr></table></figure></p>
<p>偷 50, 45 能偷到最多錢，也不會驚動警鈴。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>一開始照範例一來說，只要算出奇數戶的加總，和偶數戶的加總，再來比對大小即可。</p>
<p>但是若遇到範例二，可能會出現隔兩間的奇偶數相加，反而還比最多間不會觸動警鈴的加法，還要多的解。</p>
<p>所以必須在每次加上新住戶的錢時，同時比對奇偶數目前已經累積的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> b = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span>&#123;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123; a = <span class="built_in">max</span>(a + nums[i], b) &#125;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span> &#123; b = <span class="built_in">max</span>(b + nums[i], a) &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;You are a professional robber planning to rob houses along a street. E
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Dynamic-Programming/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Dynamic Programming" scheme="http://windsuzu.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#21 Merge Two Sorted Lists - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-21/"/>
    <id>http://windsuzu.github.io/leetcode-21/</id>
    <published>2017-10-10T07:10:14.000Z</published>
    <updated>2017-10-10T07:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<p>合併兩個已經被排序過的鏈結串列返回一個全新的鏈結串列。新的串列必須保持排序。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">list2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>比對兩組串列值，若 l1 &lt; l2 則當前答案串列擺入 l1 ，並且將 l1.next 與沒有擺入的 l2 帶入下一個 next 比較。<br>若相反，將 l2 放進答案串列，並且將 l2.next 與沒有擺入的 l1 帶入下一個 next 比較。</p>
<p>直至某一方先到底，就將另一方剩下的串列都放進答案串列中。</p>
<p><img src="/leetcode-21/recursive.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l2 &#125;</div><div class="line">    <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123; <span class="keyword">return</span> l1 &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> l1!.val &lt; l2!.val &#123;</div><div class="line">        l1!.next = mergeTwoLists(l1!.next, l2)</div><div class="line">        <span class="keyword">return</span> l1</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        l2!.next = mergeTwoLists(l2!.next, l1)</div><div class="line">        <span class="keyword">return</span> l2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new lis
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Linked-List/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#263 Ugly Number - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-263/"/>
    <id>http://windsuzu.github.io/leetcode-263/</id>
    <published>2017-10-09T06:17:54.000Z</published>
    <updated>2017-10-09T06:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Write a program to check whether a given number is an ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>
<p>Note that 1 is typically treated as an ugly number.</p>
<p>驗證給的數字是否為醜數 。</p>
<p>醜數為一正整數，其質因數只包含 2, 3, 5 。</p>
<p>例如 6 和 8 就是醜數， 14 不是因為他的質因數包含 7 。</p>
<p>1 是特例的醜數。</p>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>因為質因數包含 2, 3, 5 ，那只要確認給的數字能否被這三個數字整除到 1 即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isUgly</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> num == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> num = num</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...<span class="number">5</span> <span class="keyword">where</span> i != <span class="number">4</span> &#123;</div><div class="line">        <span class="keyword">while</span> num % i == <span class="number">0</span> &#123;</div><div class="line">            num /= i</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num == <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#27 Remove Element - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-27/"/>
    <id>http://windsuzu.github.io/leetcode-27/</id>
    <published>2017-10-08T10:17:44.000Z</published>
    <updated>2017-10-08T10:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>給定陣列和目標值，刪除陣列中所有的目標值，返回新的陣列長度。</p>
<p>可以隨意變動陣列元素，但只可以在同一個陣列操作，不可使用其他多餘的陣列。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.</p>
<p>題目規定從 [3,2,2,3] 移除所有的 3 ，會得到 [2,2] 長度為 2 。 </p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>遍尋陣列，只要當下值不等於目標值，就從全新的 index 開始累積一次陣列。</p>
<p>最後返回 index 累積的次數，即為答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int], <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums[i] != val &#123;</div><div class="line">            nums[index] = nums[i]</div><div class="line">            index += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> index</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an array and a value, remove all instances of that value in plac
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Two-Pointers/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
</feed>
