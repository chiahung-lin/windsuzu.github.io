<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Code</title>
  <subtitle>Study Recording</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://windsuzu.github.io/"/>
  <updated>2017-11-13T05:52:20.000Z</updated>
  <id>http://windsuzu.github.io/</id>
  
  <author>
    <name>Jay Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode#219 Contains Duplicate II - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-219/"/>
    <id>http://windsuzu.github.io/leetcode-219/</id>
    <published>2017-11-13T05:32:47.000Z</published>
    <updated>2017-11-13T05:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.</p>
<p>給一組整數陣列，找出陣列是否包含重複的數字，且重複的數字未在 i 和 j 索引的距離，不超過 k 。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="number">3</span></div><div class="line"><span class="type">Output</span>: <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>陣列中 2 出現重複，且第一個索引 1 與第二個索引 4 的距離不超過 3 ，返回 true 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="number">2</span></div><div class="line"><span class="type">Output</span>: <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>陣列中 2 出現重複，且第一個索引 1 與第二個索引 4 的距離超過 2 ，返回 false 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將 nums 每一個值依序加進 set 裡面，如果 set 無法新增，代表已經重複。</p>
<p>如果指針 i 超過 k 之後，就開始刪除 set 裡面超過距離的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> i &gt; k &#123; <span class="keyword">set</span>.remove(nums[i - k - <span class="number">1</span>]) &#125;</div><div class="line">            <span class="keyword">if</span> !<span class="keyword">set</span>.insert(nums[i]).inserted &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an array of integers and an integer k, find out whether there ar
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Hash-Table/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#203 Remove Linked List Elements - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-203/"/>
    <id>http://windsuzu.github.io/leetcode-203/</id>
    <published>2017-11-12T06:43:14.000Z</published>
    <updated>2017-11-12T07:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Remove all elements from a linked list of integers that have value val.</p>
<p>刪除鏈結串列中，題目所指定的值。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Given: 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6, val = 6<br>Return: 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>
<p>題目指定從鏈結串列中刪除所有 6 的值。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>檢查每一個節點的值是否和目標值相同，如果相同則返回 next ，不同則返回該節點。</p>
<p>利用該判斷遞迴，就可以將所有不為目標值的節點，接在一起。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElements</span><span class="params">(<span class="number">_</span> head: ListNode?, <span class="number">_</span> val: Int)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> head = head <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">    head.next = removeElements(head.next, val)</div><div class="line">    <span class="keyword">return</span> head.val == val ? head.next : head</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Remove all elements from a linked list of integers that have value val
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Linked-List/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#687 Longest Univalue Path - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-687/"/>
    <id>http://windsuzu.github.io/leetcode-687/</id>
    <published>2017-11-11T05:47:19.000Z</published>
    <updated>2017-11-12T06:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.</p>
<p>給一個二元樹，找出一條最長，且連續出現一樣節點值的路徑，這條路徑可能通過節點也可能沒通過節點。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line"></div><div class="line">        <span class="number">5</span></div><div class="line">       / \</div><div class="line">      <span class="number">4</span>   <span class="number">5</span></div><div class="line">     / \   \</div><div class="line">    <span class="number">1</span>   <span class="number">1</span>   <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">2</span></div><div class="line"></div><div class="line"><span class="number">5</span> -&gt; <span class="number">5</span> -&gt; <span class="number">5</span> 的長度為 <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line"></div><div class="line">        <span class="number">1</span></div><div class="line">       / \</div><div class="line">      <span class="number">4</span>   <span class="number">5</span></div><div class="line">     / \   \</div><div class="line">    <span class="number">4</span>   <span class="number">4</span>   <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">2</span></div><div class="line"></div><div class="line"><span class="number">4</span> -&gt; <span class="number">4</span> -&gt; <span class="number">4</span> 的長度為 <span class="number">2</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>利用遞迴比對每個節點的左右兩節點，如果與該節點相同值，就會回傳已累積的長度 + 1 。</p>
<p>並且定義一個最大長度 len ，在每節點的比對中，刷新 len 的最大值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestUnivaluePath</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> len = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getLength</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> val : Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">        <span class="keyword">let</span> <span class="keyword">left</span> = getLength(root.<span class="keyword">left</span>, root.val)</div><div class="line">        <span class="keyword">let</span> <span class="keyword">right</span> = getLength(root.<span class="keyword">right</span>, root.val)</div><div class="line">        len = <span class="built_in">max</span>(len, <span class="keyword">left</span> + <span class="keyword">right</span>)</div><div class="line">        <span class="keyword">if</span> val == root.val &#123; <span class="keyword">return</span> <span class="built_in">max</span>(<span class="keyword">left</span>, <span class="keyword">right</span>) + <span class="number">1</span> &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    getLength(root, root.val)</div><div class="line">    <span class="keyword">return</span> len</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, find the length of the longest path where each no
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Recursion" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Recursion/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Recursion" scheme="http://windsuzu.github.io/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#234 Palindrome Linked List - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-234/"/>
    <id>http://windsuzu.github.io/leetcode-234/</id>
    <published>2017-11-10T06:09:31.000Z</published>
    <updated>2017-11-10T06:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a singly linked list, determine if it is a palindrome.</p>
<p>給一個鏈結串列，判斷他是否回文。</p>
<p>Follow up:<br>Could you do it in O(n) time and O(1) space?</p>
<p>你可以使用 O(n) 的時間與 O(1) 的空間來解出題目嗎 ?</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>題目要求 O(1) 的空間，所以不使用多餘的字串或陣列來驗證。</p>
<p>利用 slow 和 fast 指針，將 slow 指向串列的中間點，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span></div><div class="line">      s     f</div></pre></td></tr></table></figure>
<p>這時候將 s 進行反轉，獲得 rev 串列<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span> = <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>再來比對 rev 和 head 是否相等，若有不相等，返回 false<br>若執行至 rev 結束，都是相等，返回 true</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rev  : <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span></div><div class="line">head : <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span></div></pre></td></tr></table></figure>
<hr>
<p>主程式碼 :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> fast = head, slow = head, head = head</div><div class="line">    <span class="keyword">while</span> fast != <span class="literal">nil</span> &amp;&amp; fast!.next != <span class="literal">nil</span> &#123;</div><div class="line">        fast = fast?.next?.next</div><div class="line">        slow = slow?.next</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> rev = <span class="built_in">reverse</span>(slow)</div><div class="line">    <span class="keyword">while</span> rev != <span class="literal">nil</span> &amp;&amp; head != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">if</span> rev?.val != head?.val &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        head = head?.next</div><div class="line">        rev = rev?.next</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>反轉串列函式 :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">    <span class="keyword">var</span> pre: <span class="type">ListNode</span>?</div><div class="line">    <span class="keyword">var</span> cur = head</div><div class="line">    <span class="keyword">while</span> cur != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">let</span> next = cur?.next</div><div class="line">        cur?.next = pre</div><div class="line">        pre = cur</div><div class="line">        cur = next</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pre</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a singly linked list, determine if it is a palindrome.&lt;/p&gt;
&lt;p&gt;給一
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Linked-List/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Linked-List/Two-Pointers/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/tags/Two-Pointers/"/>
    
      <category term="Linked List" scheme="http://windsuzu.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#67 Add Binary - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-67/"/>
    <id>http://windsuzu.github.io/leetcode-67/</id>
    <published>2017-11-09T05:56:18.000Z</published>
    <updated>2017-11-09T06:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two binary strings, return their sum (also a binary string).</p>
<p>給兩個二元字串，返回他們的加總 (也是一個二元字串)。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>a = “11”<br>b = “1”<br>Return “100”.</p>
<p>“11” 十進位為 3 ， “1” 十進位為 1 ，相加為 4 ，二進位為 “100”</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將兩個字串轉為字元陣列，定義一個 sum 擺放加總結果，與 carry 判斷是否進位。</p>
<p>從兩個陣列尾端開始做相加，如果加總大於等於 2 ，將加總減去 2 ，且代表需要進位，將 carry 值帶至下一次加總。</p>
<p>每次加總完畢，放入 sum 的第一個位置。</p>
<p>最後結束迴圈時，若還有剩下的 carry 值，放進 sum ，返回 sum 的字串。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addBinary</span><span class="params">(<span class="number">_</span> a: String, <span class="number">_</span> b: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="type">Array</span>(a)</div><div class="line">    <span class="keyword">let</span> b = <span class="type">Array</span>(b)</div><div class="line">    <span class="keyword">var</span> i = a.<span class="built_in">count</span>, j = b.<span class="built_in">count</span></div><div class="line">    <span class="keyword">var</span> sum = [<span class="type">Character</span>]()</div><div class="line">    <span class="keyword">var</span> carry = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> i != <span class="number">0</span> || j != <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">var</span> first = <span class="number">0</span>, second = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> &#123; first = <span class="type">Int</span>(<span class="type">String</span>(a[i - <span class="number">1</span>]))! &#125;</div><div class="line">        <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> &#123; second = <span class="type">Int</span>(<span class="type">String</span>(b[j - <span class="number">1</span>]))! &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> temp = first + second + carry</div><div class="line">        carry = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> temp &gt;= <span class="number">2</span> &#123;</div><div class="line">            temp -= <span class="number">2</span></div><div class="line">            carry += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        sum.insert(<span class="type">Character</span>(<span class="type">String</span>(temp)), at: <span class="number">0</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> i != <span class="number">0</span> &#123; i -= <span class="number">1</span> &#125;</div><div class="line">        <span class="keyword">if</span> j != <span class="number">0</span> &#123; j -= <span class="number">1</span> &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> carry == <span class="number">1</span> &#123; sum.insert(<span class="type">Character</span>(<span class="type">String</span>(carry)), at: <span class="number">0</span>) &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">String</span>(sum)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given two binary strings, return their sum (also a binary string).&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#290 Word Pattern - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-290/"/>
    <id>http://windsuzu.github.io/leetcode-290/</id>
    <published>2017-11-08T03:47:05.000Z</published>
    <updated>2017-11-08T03:54:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p>給定一個字串格式 pattern 和字串 str ，驗證 str 是否符合 pattern 的格式。</p>
<p>Notes:<br>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.</p>
<p>pattern 字串只包含小寫字母， str 字串包含小寫字母，和用空白分隔段落。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>pattern = “abba”, str = “dog cat cat dog” should return true.<br>pattern = “abba”, str = “dog cat cat fish” should return false.<br>pattern = “aaaa”, str = “dog cat cat dog” should return false.<br>pattern = “abba”, str = “dog dog dog dog” should return false.</p>
<p>“dog cat cat dog” 符合 “abba” 的格式，返回 true<br>“dog cat cat fish” 不符合 “abba” 的格式 ，應為 “abbc” ，返回 false<br>“dog cat cat dog” 不符合 “aaaa” 的格式，應為 “abba” ，返回 false<br>“dog dog dog dog” 不符合 “abba” 的格式，應為 “aaaa” ，返回 false</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>將 str 用空白切割與 pattern 一同轉為 Array ，如果兩個 Array 不同長度代表不合格式。</p>
<p>開始遍歷兩個陣列各取 p 和 s ，如果 p 已經出現在 hashTable 的 key 裡，查看他的 val 是否與 s 相同，不同就代表不合格式。</p>
<p>如果沒出現過，則查看 s 是否已經出現在 hashTable 的 val 裡，如果有，代表他已經與不同的 key 配對過了，不合格式。</p>
<p>如果上面兩關都通過，將 p 對應 s 加進 hashTable 裡。</p>
<p>遍歷結束都沒有返回 false 代表格式正確。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordPattern</span><span class="params">(<span class="number">_</span> pattern: String, <span class="number">_</span> str: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> pattern.isEmpty &amp;&amp; str.isEmpty &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">let</span> p = <span class="type">Array</span>(pattern)</div><div class="line">    <span class="keyword">let</span> s = str.<span class="built_in">split</span>(separator: <span class="string">" "</span>)</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">String</span> : <span class="type">String</span>]()</div><div class="line">    <span class="keyword">if</span> p.<span class="built_in">count</span> != s.<span class="built_in">count</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i != p.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> pre = dict[<span class="type">String</span>(p[i])] &#123;</div><div class="line">            <span class="keyword">if</span> pre != <span class="type">String</span>(s[i]) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> dict.values.<span class="built_in">contains</span>(<span class="type">String</span>(s[i])) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">            dict[<span class="type">String</span>(p[i])] = <span class="type">String</span>(s[i])</div><div class="line">        &#125;</div><div class="line">        i += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a pattern and a string str, find if str follows the same pattern
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Hash-Table/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#111 Minimum Depth of Binary Tree - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-111/"/>
    <id>http://windsuzu.github.io/leetcode-111/</id>
    <published>2017-11-07T06:18:53.000Z</published>
    <updated>2017-11-07T06:25:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<p>給定二元樹，找出最小深度。</p>
<p>最小深度代表由根節點至某個最近的葉節點所畫出的最短路徑。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">        <span class="number">1</span></div><div class="line">       / \</div><div class="line">      <span class="number">2</span>   <span class="number">3</span></div><div class="line">     / \</div><div class="line">    <span class="number">4</span>   <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="number">2</span></div></pre></td></tr></table></figure>
<p>有一條最短路徑為 1 -&gt; 3 ，其深度為 2 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>對樹進行 dps ，並且每下一層就將 depth 值 + 1 ，直到走到葉節點時，</p>
<p>比對這條路徑的深度跟答案的最小值，即可求出最終答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">minDepth</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">var</span> res = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dig</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> depth: Int)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">var</span> depth = depth</div><div class="line">        depth += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> root.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</div><div class="line">            res = <span class="built_in">min</span>(depth, res)</div><div class="line">        &#125;</div><div class="line">        dig(root.<span class="keyword">left</span>, depth)</div><div class="line">        dig(root.<span class="keyword">right</span>, depth)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    dig(root, <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree, find its minimum depth.&lt;/p&gt;
&lt;p&gt;The minimum depth 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#20 Valid Parentheses - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-20/"/>
    <id>http://windsuzu.github.io/leetcode-20/</id>
    <published>2017-11-06T12:19:58.000Z</published>
    <updated>2017-11-06T12:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p>
<p>給一個字串，裡面只會包含 <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> , <code>&#39;]&#39;</code> ，現在驗證字串是否符合格式。</p>
<p>這些括號，必須要按照正確的順序合起來， <code>&quot;()&quot;</code> 或 <code>&quot;()[]{}&quot;</code> 就是正確的，但 <code>&quot;(]&quot;</code> 或 <code>&quot;([)]&quot;</code> 就不是。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : <span class="string">"(&#123;&#125;)"</span></div><div class="line"><span class="type">Output</span> : <span class="type">True</span></div></pre></td></tr></table></figure></p>
<p>這是正確的括號開始跟結尾的用法。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"&#123;&#123;]&#125;"</span></div><div class="line"><span class="type">Output</span>: <span class="type">False</span></div></pre></td></tr></table></figure></p>
<p>這是錯誤的括號用法。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>這題題目提示是一題 Stack 的題目， Swift 雖然沒有 Stack 類別 ，但 Array 也有提供 popLast 的用法。</p>
<p>只要遇到三種括號的開頭，就將該括號的結尾加進陣列中</p>
<p>若遇到三種括號的結尾時，陣列為空代表根本沒出現過開頭，回傳 false 。</p>
<p>若陣列的 popLast 回傳的第一個元素，不等於自己，代表開頭不對稱，也回傳 false 。</p>
<p>最後若跑完字串，陣列被 pop 到空的，就是一個 valid 的字串，回傳 true 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">let</span> s = <span class="type">Array</span>(s)</div><div class="line">    <span class="keyword">var</span> stack = [<span class="type">String</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> s &#123;</div><div class="line">        <span class="keyword">switch</span> <span class="built_in">c</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"("</span>:</div><div class="line">            stack.append(<span class="string">")"</span>)</div><div class="line">        <span class="keyword">case</span> <span class="string">"&#123;"</span>:</div><div class="line">            stack.append(<span class="string">"&#125;"</span>)</div><div class="line">        <span class="keyword">case</span> <span class="string">"["</span>:</div><div class="line">            stack.append(<span class="string">"]"</span>)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">if</span> stack.isEmpty &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> pop = stack.popLast(), pop != <span class="type">String</span>(<span class="built_in">c</span>)   &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> stack.isEmpty</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/String/"/>
    
      <category term="Stack" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/String/Stack/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
      <category term="Stack" scheme="http://windsuzu.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#507 Perfect Number - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-507/"/>
    <id>http://windsuzu.github.io/leetcode-507/</id>
    <published>2017-11-05T14:20:01.000Z</published>
    <updated>2017-11-05T14:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>We define the Perfect Number is a positive integer that is equal to the sum of all its positive divisors except itself.</p>
<p>Now, given an integer n, write a function that returns true when it is a perfect number and false when it is not.</p>
<p>我們定義一個「完美數」是一個正整數，且他的全部因數除了自己本身，加起來等於他自己。</p>
<p>現在給你一整數 n ，寫出一個函式驗證該數是否為完美數。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">28</span></div><div class="line"></div><div class="line"><span class="type">Output</span>: <span class="type">True</span></div><div class="line"></div><div class="line"><span class="type">Explanation</span>: <span class="number">28</span> = <span class="number">1</span> + <span class="number">2</span> + <span class="number">4</span> + <span class="number">7</span> + <span class="number">14</span></div></pre></td></tr></table></figure>
<p>28 的全部因數有 1, 2, 4, 7, 14, 28 ，排除 28 ，其他加起來又等於 28 ，所以返回 true</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>先求 num 的所有因子，由於 1 為每個數的因子，所以將 1 先加進 sum 裡面</p>
<p>判斷 s 的因子只需要從範圍 [2, sqrt(num)] 下手，判斷這個範圍內的 i 是否可以被 num 整除</p>
<p>如果可以整除，代表 i 和 num/i 都是 num 的因子，加進 sum 中</p>
<p>最後判斷 sum 是否等於 num 即可</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPerfectNumber</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> num &lt;= <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> sum = <span class="number">1</span>, i = <span class="number">2</span>, s = <span class="type">Int</span>(sqrt(<span class="type">Double</span>(num)))</div><div class="line">    <span class="keyword">while</span> i &lt;= s &#123;</div><div class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span> &#123; sum += i + (num / i) &#125;</div><div class="line">        i += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> sum == num</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;We define the Perfect Number is a positive integer that is equal to th
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#438 Find All Anagrams in a String - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-438/"/>
    <id>http://windsuzu.github.io/leetcode-438/</id>
    <published>2017-11-04T13:36:41.000Z</published>
    <updated>2017-11-04T13:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>
<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>
<p>The order of output does not matter.</p>
<p>給定字串 s 和不為空的字串 p ，找出所有 s 中可能包含 p 的重組字。</p>
<p>兩個字串 s, p 皆只存在小寫英文字母，且長度不超過 20,100 。</p>
<p>答案的順序不同沒關係。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">s: <span class="string">"cbaebabacd"</span> p: <span class="string">"abc"</span></div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">[<span class="number">0</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">The</span> substring with start index = <span class="number">0</span> <span class="keyword">is</span> <span class="string">"cba"</span>, which <span class="keyword">is</span> an anagram of <span class="string">"abc"</span>.</div><div class="line"><span class="type">The</span> substring with start index = <span class="number">6</span> <span class="keyword">is</span> <span class="string">"bac"</span>, which <span class="keyword">is</span> an anagram of <span class="string">"abc"</span>.</div></pre></td></tr></table></figure>
<p>“cbaebabacd” 中，從 0 開始的 cba 是 abc 的重組字，從 6 開始的 bac 也是 abc 的重組字。<br>所以回傳 [0, 6]</p>
<p>Example 2:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>:</div><div class="line">s: <span class="string">"abab"</span> p: <span class="string">"ab"</span></div><div class="line"></div><div class="line"><span class="type">Output</span>:</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="type">Explanation</span>:</div><div class="line"><span class="type">The</span> substring with start index = <span class="number">0</span> <span class="keyword">is</span> <span class="string">"ab"</span>, which <span class="keyword">is</span> an anagram of <span class="string">"ab"</span>.</div><div class="line"><span class="type">The</span> substring with start index = <span class="number">1</span> <span class="keyword">is</span> <span class="string">"ba"</span>, which <span class="keyword">is</span> an anagram of <span class="string">"ab"</span>.</div><div class="line"><span class="type">The</span> substring with start index = <span class="number">2</span> <span class="keyword">is</span> <span class="string">"ab"</span>, which <span class="keyword">is</span> an anagram of <span class="string">"ab"</span>.</div></pre></td></tr></table></figure>
<p>“abab” 中，從 0 開始的 ab 是 ab 的重組字，從 1 開始的 ba 是 ab 的重組字，從 2 開始的 ab 也是 ab 的重組字。<br>所以回傳 [0, 1, 2]</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>解題中需要找到字元所對應的 ASCII 編號 ， Swift 中要找到編號運用下方的函式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHash</span><span class="params">(<span class="number">_</span> <span class="built_in">c</span>: Character)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>(<span class="built_in">c</span>.unicodeScalars.first!.value)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接著運用 Sliding Window algorithm template 來解決這一個問題 :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">findAnagrams</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> p: String)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">    <span class="keyword">var</span> res = [<span class="type">Int</span>]()</div><div class="line">    <span class="keyword">var</span> s = <span class="type">Array</span>(s), p = <span class="type">Array</span>(p)</div><div class="line">    <span class="comment">// 用來定義 ASCII 256 個字元符號的 Hash 表</span></div><div class="line">    <span class="keyword">var</span> hash = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">256</span>)</div><div class="line">    </div><div class="line">    <span class="comment">// 將 p 的字元裝進 Hash 表中</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> p &#123;</div><div class="line">        hash[getHash(<span class="built_in">c</span>)] += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 定義 Two Pointers ， left 代表重組字的起始位置， right 代表重組字的尾巴</span></div><div class="line">    <span class="comment">// 以及 p 的長度 (用來代表在 p 寬度內要完成所有的配對才算一個重組字)</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span> , <span class="keyword">right</span> = <span class="number">0</span> , <span class="built_in">count</span> = p.<span class="built_in">count</span></div><div class="line">    </div><div class="line">    <span class="comment">// 將 s 由 0 開始每次往右移 1 格</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">right</span> &lt; s.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="comment">// 如果 hash 表中有存在該字元，就將 count - 1 代表越來越接近重組字。</span></div><div class="line">        <span class="keyword">if</span> hash[getHash(s[<span class="keyword">right</span>])] &gt;= <span class="number">1</span> &#123;</div><div class="line">            <span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 對該字元對應在 hash 表 - 1 ， s 右移 1 格</span></div><div class="line">        hash[getHash(s[<span class="keyword">right</span>])] -= <span class="number">1</span></div><div class="line">        <span class="keyword">right</span> += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="comment">// 如果該次 count == 0 ，代表 count 內的字元皆可替換，找到一個重組字</span></div><div class="line">        <span class="comment">// 在答案中放入 left 的值</span></div><div class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123; res.append(<span class="keyword">left</span>) &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 如果 s 的字元已經走到一組 p 的長度了， left 也需要往右移一格</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">right</span> - <span class="keyword">left</span> == p.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="comment">// 查看 hash 表的 left 是否有大於等於 0 ，如果有代表剛剛該 left 有被算入正確的重組字中</span></div><div class="line">            <span class="comment">// 所以要把 count + 1 平衡回去</span></div><div class="line">            <span class="keyword">if</span> hash[getHash(s[<span class="keyword">left</span>])] &gt;= <span class="number">0</span> &#123;</div><div class="line">                <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 因為前面有將 hash 表該字元 - 1 ，所以要平衡回去</span></div><div class="line">            hash[getHash(s[<span class="keyword">left</span>])] += <span class="number">1</span></div><div class="line">            <span class="comment">// left 往右移 1 格</span></div><div class="line">            <span class="keyword">left</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a string s and a non-empty string p, find all the start indices 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Hash-Table/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#183 Customers Who Never Order - in MySQL</title>
    <link href="http://windsuzu.github.io/leetcode-183/"/>
    <id>http://windsuzu.github.io/leetcode-183/</id>
    <published>2017-11-03T03:07:43.000Z</published>
    <updated>2017-11-03T03:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.</p>
<p>給你兩個表格代表客人和點單記錄 (Customers &amp; Orders) ，寫出一個 SQL Query ，找出哪些客人沒有點過任何東西。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="type">Table</span>: <span class="type">Customers</span>.</div><div class="line"></div><div class="line">+----+-------+</div><div class="line">| <span class="type">Id</span> | <span class="type">Name</span>  |</div><div class="line">+----+-------+</div><div class="line">| <span class="number">1</span>  | <span class="type">Joe</span>   |</div><div class="line">| <span class="number">2</span>  | <span class="type">Henry</span> |</div><div class="line">| <span class="number">3</span>  | <span class="type">Sam</span>   |</div><div class="line">| <span class="number">4</span>  | <span class="type">Max</span>   |</div><div class="line">+----+-------+</div><div class="line"></div><div class="line"><span class="type">Table</span>: <span class="type">Orders</span>.</div><div class="line"></div><div class="line">+----+------------+</div><div class="line">| <span class="type">Id</span> | <span class="type">CustomerId</span> |</div><div class="line">+----+------------+</div><div class="line">| <span class="number">1</span>  | <span class="number">3</span>          |</div><div class="line">| <span class="number">2</span>  | <span class="number">1</span>          |</div><div class="line">+----+------------+</div></pre></td></tr></table></figure>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="type">Using</span> the above tables <span class="keyword">as</span> example, <span class="keyword">return</span> the following:</div><div class="line"></div><div class="line">+-----------+</div><div class="line">| <span class="type">Customers</span> |</div><div class="line">+-----------+</div><div class="line">| <span class="type">Henry</span>     |</div><div class="line">| <span class="type">Max</span>       |</div><div class="line">+-----------+</div></pre></td></tr></table></figure>
<p>依照上方兩個表格的範例，可以查出 Henry 和 Max 沒有買過東西。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>有三種解法:</p>
<h2 id="NOT-EXISTS"><a href="#NOT-EXISTS" class="headerlink" title="NOT EXISTS"></a>NOT EXISTS</h2><p>利用 NOT EXISTS 排除 C.Id = O.CustomerId 的查詢，負負得正，就是沒有下訂單的客人。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> C.Name</div><div class="line"><span class="keyword">FROM</span> Customers C</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></div><div class="line">(<span class="keyword">SELECT</span> <span class="keyword">Id</span></div><div class="line"><span class="keyword">FROM</span> Orders O</div><div class="line"><span class="keyword">WHERE</span> C.Id = O.CustomerId)</div></pre></td></tr></table></figure>
<h2 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h2><p>類似 NOT EXISTS ，但直接利用 C.Id 查出不存在 O.CustomerId 的欄位。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> C.Name</div><div class="line"><span class="keyword">FROM</span> Customers C</div><div class="line"><span class="keyword">WHERE</span> C.Id <span class="keyword">NOT</span> <span class="keyword">IN</span></div><div class="line">(<span class="keyword">SELECT</span> O.CustomerId</div><div class="line"><span class="keyword">FROM</span> Orders O)</div></pre></td></tr></table></figure>
<h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><p>LEFT JOIN 不管任何事都會把左邊印出，找出 C.Id = O.CustomerId ，如果沒有下過訂單，右邊就會為 NULL ，把這些右邊為 NULL 的欄位擷取出來即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> C.Name</div><div class="line"><span class="keyword">FROM</span> Customers C</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders O <span class="keyword">on</span> C.Id = O.CustomerId</div><div class="line"><span class="keyword">WHERE</span> O.CustomerId <span class="keyword">is</span> <span class="literal">NULL</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Suppose that a website contains two tables, the Customers table and th
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/categories/LeetCode/MySQL/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#205 Isomorphic Strings - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-205/"/>
    <id>http://windsuzu.github.io/leetcode-205/</id>
    <published>2017-11-02T06:18:09.000Z</published>
    <updated>2017-11-02T06:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given two strings s and t, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in s can be replaced to get t.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>
<p>給定兩個字串 s 和 t ，驗證他們是否同構。</p>
<p>兩個字串要達成同構， s 字串比需要能被 t 完全取代。</p>
<p>完全取代指的是每一個被取代的字元，可以被自己本身取代，但不能有一個字元被兩個以上不同字元取代的狀況發生。</p>
<p>Note:<br>You may assume both s and t have the same length.</p>
<p>你可以假設 s 和 t 為相同長度。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> <span class="string">"egg"</span>, <span class="string">"add"</span>, <span class="keyword">return</span> <span class="literal">true</span>.</div><div class="line"></div><div class="line"><span class="type">Given</span> <span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="keyword">return</span> <span class="literal">false</span>.</div><div class="line"></div><div class="line"><span class="type">Given</span> <span class="string">"paper"</span>, <span class="string">"title"</span>, <span class="keyword">return</span> <span class="literal">true</span>.</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>定義一個 Dictionary 記錄 s 每個字元對應的 t 字元</p>
<p>如果是 “abc” 對應 “xyz” 即是 [“a”: “x”, “b”: “y”, “c”: z]</p>
<p>如果字典中存在 s 字元對應的值，就比對是否和當下的 t 字元相等。<br>比對不同，則返回 false 。</p>
<p>如果字典中不存在，那就找出字典中是否有 value 已經存在 t 字元。<br>已存在，則返回 false 。<br>不存在，字典中新增一筆 s 對應 t 的記錄。</p>
<p>如果跑完迴圈，都沒發生問題，返回 true 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isIsomorphic</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> t: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">var</span> dict = [<span class="type">Character</span>: <span class="type">Character</span>]()</div><div class="line">    <span class="keyword">let</span> s = <span class="type">Array</span>(s.characters)</div><div class="line">    <span class="keyword">let</span> t = <span class="type">Array</span>(t.characters)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;s.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> pre = dict[s[i]] &#123;</div><div class="line">            <span class="keyword">if</span> pre != t[i] &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> dict.values.<span class="built_in">contains</span>(t[i]) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">            dict[s[i]] = t[i]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given two strings s and t, determine if they are isomorphic.&lt;/p&gt;
&lt;p&gt;Tw
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Hash-Table/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Hash Table" scheme="http://windsuzu.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#112 Path Sum - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-112/"/>
    <id>http://windsuzu.github.io/leetcode-112/</id>
    <published>2017-11-01T05:49:12.000Z</published>
    <updated>2017-11-01T06:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p>給一二元樹和目標值，找出樹中是否有「根到葉」的路徑，路徑上所有節點的加總等於目標值。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">Given</span> the below binary tree and sum = <span class="number">22</span>,</div><div class="line"></div><div class="line">        <span class="number">5</span></div><div class="line">       / \</div><div class="line">      <span class="number">4</span>   <span class="number">8</span></div><div class="line">     /   / \</div><div class="line">    <span class="number">11</span>  <span class="number">13</span>  <span class="number">4</span></div><div class="line">   /  \      \</div><div class="line">  <span class="number">7</span>    <span class="number">2</span>      <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="keyword">as</span> there exist a root-to-leaf path <span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">11</span>-&gt;<span class="number">2</span> which sum <span class="keyword">is</span> <span class="number">22</span>.</div></pre></td></tr></table></figure>
<p>給上方二元樹，以及目標值 22 。</p>
<p>返回 true ， 因為有一條「根到葉」路徑 5 -&gt; 4 -&gt; 11 -&gt; 2 其加總為 22 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從根開始堆疊節點總和，一旦到達葉節點且堆疊的總和等於目標值，即可返回答案。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasPathSum</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> sum: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findSum</span><span class="params">(<span class="number">_</span> root: TreeNode?, <span class="number">_</span> heap: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">        <span class="keyword">var</span> heap = heap</div><div class="line">        heap += root.val</div><div class="line">        <span class="keyword">if</span> root.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; root.<span class="keyword">right</span> == <span class="literal">nil</span> &amp;&amp; heap == sum &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">        <span class="keyword">return</span> findSum(root.<span class="keyword">left</span>, heap) || findSum(root.<span class="keyword">right</span>, heap)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> findSum(root, <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a binary tree and a sum, determine if the tree has a root-to-lea
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Tree/Depth-first-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Tree" scheme="http://windsuzu.github.io/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://windsuzu.github.io/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#26 Remove Duplicates from Sorted Array - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-26/"/>
    <id>http://windsuzu.github.io/leetcode-26/</id>
    <published>2017-10-31T03:26:23.000Z</published>
    <updated>2017-10-31T05:09:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>給一個已排序陣列，移除那些重複的元素，讓每個元素只出現一次，並且返回移除後陣列的新長度。</p>
<p>不使用額外空間。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<p>[1,1,2] 應該要返回 2 ，因為 1 重複了兩次。移除後應為 [1,2] 長度為 2 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>題目雖然只寫到要求回傳新陣列的長度，實際上還會確認是否有正確移除重複的元素。</p>
<p>所以首先定義一個數字可以代表新陣列長度以及當前索引值 (count)，</p>
<p>走遍第一個元素之後，只要當前的元素與前一個元素不同，就將當前元素塞進 count 的索引，並且將 count + 1 。</p>
<p>最後就可以從第二個元素開始堆出不會重複的陣列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> nums.<span class="built_in">count</span> &#125;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">if</span> nums[i - <span class="number">1</span>] != nums[i] &#123;</div><div class="line">            nums[<span class="built_in">count</span>] = nums[i]</div><div class="line">            <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given a sorted array, remove the duplicates in place such that each el
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Array/Two-Pointers/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Array" scheme="http://windsuzu.github.io/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://windsuzu.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#38 Count and Say - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-38/"/>
    <id>http://windsuzu.github.io/leetcode-38/</id>
    <published>2017-10-30T05:46:46.000Z</published>
    <updated>2017-10-30T06:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.     <span class="number">1</span></div><div class="line"><span class="number">2</span>.     <span class="number">11</span></div><div class="line"><span class="number">3</span>.     <span class="number">21</span></div><div class="line"><span class="number">4</span>.     <span class="number">1211</span></div><div class="line"><span class="number">5</span>.     <span class="number">111221</span></div><div class="line"></div><div class="line"><span class="number">1</span> <span class="keyword">is</span> read off <span class="keyword">as</span> <span class="string">"one 1"</span> or <span class="number">11</span>.</div><div class="line"><span class="number">11</span> <span class="keyword">is</span> read off <span class="keyword">as</span> <span class="string">"two 1s"</span> or <span class="number">21</span>.</div><div class="line"><span class="number">21</span> <span class="keyword">is</span> read off <span class="keyword">as</span> <span class="string">"one 2, then one 1"</span> or <span class="number">1211</span>.</div></pre></td></tr></table></figure>
<p>Given an integer n, generate the nth term of the count-and-say sequence.</p>
<p>Note: Each term of the sequence of integers will be represented as a string.</p>
<p>“數和說”序列的前五種規則如下所示 :</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.     <span class="number">1</span></div><div class="line"><span class="number">2</span>.     <span class="number">11</span></div><div class="line"><span class="number">3</span>.     <span class="number">21</span></div><div class="line"><span class="number">4</span>.     <span class="number">1211</span></div><div class="line"><span class="number">5</span>.     <span class="number">111221</span></div><div class="line"></div><div class="line"><span class="number">1</span> 是 <span class="number">1</span> ， 因為 <span class="number">1</span> 個 <span class="number">1</span> 所以下一個</div><div class="line"><span class="number">2</span> 是 <span class="number">11</span> ， 因為 <span class="number">2</span> 個 <span class="number">1</span> 所以下一個</div><div class="line"><span class="number">3</span> 是 <span class="number">21</span> ， 因為 <span class="number">1</span> 個 <span class="number">2</span> ， <span class="number">1</span> 個 <span class="number">1</span> ，所以下一個</div><div class="line"><span class="number">4</span> 是 <span class="number">1211</span></div></pre></td></tr></table></figure>
<p>按照這個順序下去，算出第 n 個的時候 ，他的”數和說”會是多少。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">1</span></div><div class="line"><span class="type">Output</span>: <span class="string">"1"</span></div></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">4</span></div><div class="line"><span class="type">Output</span>: <span class="string">"1211"</span></div></pre></td></tr></table></figure></p>
<p>返回的值為字串。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>這題用堆疊的方式做上去， 1 為 “1”</p>
<p>下一個 2 就是 1 的 count and say ，所以 <code>1</code> 個 <code>1</code> 等於 “11”</p>
<p>下一個 3 就是 2 的 count and say ，所以 “11” 為 <code>2</code> 個 <code>1</code> 等於 “21”</p>
<p>下一個 4 就是 3 的 count and say ，所以 “21” 為 <code>1</code> 個 <code>2</code> 和 <code>1</code> 個 <code>1</code> 等於 “1211”</p>
<p>下一個 5 就是 4 的 count and say ，所以 “1211” 為 <code>1</code> 個 <code>1</code> 和 <code>1</code> 個 <code>2</code> 和 <code>2</code> 個 <code>1</code> 等於 “111221”</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">countAndSay</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">var</span> res = <span class="string">"1"</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123; <span class="keyword">return</span> res &#125;</div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">2</span>...n &#123;</div><div class="line">        res = convertNext(res)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那要怎麼算出 count and say ，我們設計一個函式來計算。</p>
<p>例如 5 要求 4 (“1211”) 的 count and say ，只要走過字串，定義當下的值以及累加的次數，遇到不同值就寫進新的字串中，並且更新當下值以及累加次數。</p>
<p>別忘了還要再把最後沒加進新字串的值加進去。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> -&gt; temp = <span class="string">"1"</span> , <span class="built_in">count</span> = <span class="number">1</span>, new = <span class="string">""</span></div><div class="line"><span class="number">2</span> -&gt; temp = <span class="string">"2"</span> , <span class="built_in">count</span> = <span class="number">1</span>, new = <span class="string">"11"</span></div><div class="line"><span class="number">1</span> -&gt; temp = <span class="string">"1"</span> , <span class="built_in">count</span> = <span class="number">1</span>, new = <span class="string">"1112"</span></div><div class="line"><span class="number">1</span> -&gt; temp = <span class="string">"1"</span> , <span class="built_in">count</span> = <span class="number">2</span>, new = <span class="string">"1112"</span></div><div class="line">end</div><div class="line">new = <span class="string">"111221"</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertNext</span><span class="params">(<span class="number">_</span> last: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">let</span> arr = <span class="type">Array</span>(last.characters)</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> temp = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> new = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i != arr.<span class="built_in">count</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> temp != <span class="type">String</span>(arr[i]) &#123;</div><div class="line">            new += <span class="built_in">count</span> == <span class="number">0</span> ? <span class="string">""</span> : <span class="type">String</span>(<span class="built_in">count</span>) + temp</div><div class="line">            temp = <span class="type">String</span>(arr[i])</div><div class="line">            <span class="built_in">count</span> = <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        i += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    new += <span class="type">String</span>(<span class="built_in">count</span>) + temp</div><div class="line">    <span class="keyword">return</span> new</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;The count-and-say sequence is the sequence of integers with the first 
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#9 Palindrome Number - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-9/"/>
    <id>http://windsuzu.github.io/leetcode-9/</id>
    <published>2017-10-29T03:07:22.000Z</published>
    <updated>2017-10-29T03:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<p>驗證一個整數是否為回文。不能使用額外的空間來操作。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : <span class="number">1232332321</span></div><div class="line"><span class="type">Output</span> : <span class="type">True</span></div></pre></td></tr></table></figure>
<p>這是一個回文。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span> : <span class="number">1234567</span></div><div class="line"><span class="type">Output</span> : <span class="type">False</span></div></pre></td></tr></table></figure>
<p>這不是回文。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>如果將數字做反轉，再比對兩個數字是否一樣，就可以驗證出是否為回文。</p>
<p>但是當你要反轉很大的數字時，有可能造成 overflow 超過整數最大值。</p>
<p>所以其實只需要將數字反轉到一半即可，再確認 half reverse 或是 half reverse 除以 10 是否相等於 half x 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(<span class="number">_</span> x: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> || (x &gt; <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    <span class="keyword">var</span> x = x</div><div class="line">    <span class="keyword">var</span> half = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> x &gt; half &#123;</div><div class="line">        half = half * <span class="number">10</span> + x % <span class="number">10</span></div><div class="line">        x /= <span class="number">10</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> half == x || half / <span class="number">10</span> == x</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra sp
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#181 Employees Earning More Than Their Managers - in MySQL</title>
    <link href="http://windsuzu.github.io/leetcode-181/"/>
    <id>http://windsuzu.github.io/leetcode-181/</id>
    <published>2017-10-28T03:14:22.000Z</published>
    <updated>2017-10-28T03:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>
<p>Employee 表格描述所有員工包含他們的主管。</p>
<p>每個員工都有屬於自己的 Id ，還有他們主管的 Id 。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+----+-------+--------+-----------+</div><div class="line">| <span class="type">Id</span> | <span class="type">Name</span>  | <span class="type">Salary</span> | <span class="type">ManagerId</span> |</div><div class="line">+----+-------+--------+-----------+</div><div class="line">| <span class="number">1</span>  | <span class="type">Joe</span>   | <span class="number">70000</span>  | <span class="number">3</span>         |</div><div class="line">| <span class="number">2</span>  | <span class="type">Henry</span> | <span class="number">80000</span>  | <span class="number">4</span>         |</div><div class="line">| <span class="number">3</span>  | <span class="type">Sam</span>   | <span class="number">60000</span>  | <span class="type">NULL</span>      |</div><div class="line">| <span class="number">4</span>  | <span class="type">Max</span>   | <span class="number">90000</span>  | <span class="type">NULL</span>      |</div><div class="line">+----+-------+--------+-----------+</div></pre></td></tr></table></figure>
<p>Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p>
<p>現在寫出一個 SQL 查詢，找出有哪些員工賺的錢，比他們的主管還要多。</p>
<p>根據上方的表格，可以得出只有 Joe 所賺的錢，比他的主管 Sam 還要多。</p>
<p>回傳如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+----------+</div><div class="line">| <span class="type">Employee</span> |</div><div class="line">+----------+</div><div class="line">| <span class="type">Joe</span>      |</div><div class="line">+----------+</div></pre></td></tr></table></figure>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p><code>SELECT</code> 兩個 <code>Employee</code> 表格，各代表 <code>e1, e2</code></p>
<p>找出 <code>e1</code> 的 <code>ManagerId</code> 等於 <code>e2</code> 的 <code>Id</code> ，且 e1 的 <code>Salary</code> 大於 <code>e2</code> 的 <code>Salary</code></p>
<p>返回 <code>Name</code> 但是題目規定要顯示 <code>Employee</code> ， 所以 <code>e1.Name as Employee</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> e1.Name <span class="keyword">as</span> Employee</div><div class="line"><span class="keyword">FROM</span> Employee e1 , Employee e2</div><div class="line"><span class="keyword">WHERE</span> e1.ManagerId = e2.Id <span class="keyword">AND</span> e1.Salary &gt; e2.Salary</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;The Employee table holds all employees including their managers. Every
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/MySQL/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="MySQL" scheme="http://windsuzu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#441 Arranging Coins - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-441/"/>
    <id>http://windsuzu.github.io/leetcode-441/</id>
    <published>2017-10-27T05:18:18.000Z</published>
    <updated>2017-10-27T05:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.</p>
<p>Given n, find the total number of full staircase rows that can be formed.</p>
<p>n is a non-negative integer and fits within the range of a 32-bit signed integer.</p>
<p>給你 n 個硬幣排成樓梯的形狀，每 k 層有 k 個硬幣。</p>
<p>現在給你 n ， 返回你最大可以排成的樓梯有幾層。 n 為一個非負數整數。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="type">The</span> coins can form the following rows:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line"><span class="type">Because</span> the 3rd row <span class="keyword">is</span> incomplete, we <span class="keyword">return</span> <span class="number">2</span>.</div></pre></td></tr></table></figure></p>
<p>5 個硬幣排完第 3 層還沒完成，所以返回 2 。</p>
<p>Example 2:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">8</span></div><div class="line"></div><div class="line"><span class="type">The</span> coins can form the following rows:</div><div class="line">¤</div><div class="line">¤ ¤</div><div class="line">¤ ¤ ¤</div><div class="line">¤ ¤</div><div class="line"></div><div class="line"><span class="type">Because</span> the 4th row <span class="keyword">is</span> incomplete, we <span class="keyword">return</span> <span class="number">3</span>.</div></pre></td></tr></table></figure></p>
<p>8 個硬幣排完第 4 層還沒完成，所以返回 3 。</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><h2 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h2><p>對 n 從第一層開始減，直至無法再減。<br>代表該層未完成，返回前一層的值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrangeCoinsIterative</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> n = n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="type">Int</span>.<span class="built_in">max</span> &#123;</div><div class="line">        <span class="keyword">if</span> n - i &gt;= <span class="number">0</span> &#123;</div><div class="line">            n -= i</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> i - <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Mathematic"><a href="#Mathematic" class="headerlink" title="Mathematic"></a>Mathematic</h2><p>要算出 n 層的硬幣有幾個，等於要算出 1 + 2 + 3 + … + n </p>
<p>這有一個公式是(上底+下底)乘高除以2 : <code>sum = (1 + x) * x / 2</code></p>
<p>並且在這題裡面的 sum 要小於等於 n ， 所以為 <code>(1 + x) * x / 2 &lt;= n</code></p>
<p>解出這個式子 :</p>
<blockquote>
<p>(1 + x) * x / 2 &lt;= n<br>x^2 + x  &lt;= 2n<br>4x^2 + 4x &lt;= 8n<br>(2x + 1)(2x + 1) - 1 &lt;= 8n<br>x &lt;= (√(8n + 1) - 1) / 2</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrangeCoinsMathematic</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Int</span>((sqrt(<span class="number">8</span> * <span class="type">Double</span>(n) + <span class="number">1</span>) - <span class="number">1</span>) / <span class="type">Double</span>(<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;You have a total of n coins that you want to form in a staircase shape
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/Binary-Search/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
      <category term="Binary Search" scheme="http://windsuzu.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#172 Factorial Trailing Zeroes - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-172/"/>
    <id>http://windsuzu.github.io/leetcode-172/</id>
    <published>2017-10-26T06:27:22.000Z</published>
    <updated>2017-10-26T06:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<p>Note: Your solution should be in logarithmic time complexity.</p>
<p>給定整數 n ，返回 n! 中有幾個後綴的 0 。</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>Example 1 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">5</span>!</div><div class="line"><span class="type">Output</span>: <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>5! = <code>1 * 2 * 3 * 4 * 5</code> = 120<br>後綴有 1 個 0 所以回傳 1</p>
<p>Example 2 :<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="number">25</span>!</div><div class="line"><span class="type">Output</span>: <span class="number">6</span></div></pre></td></tr></table></figure></p>
<p>25! = 15511210043330985984000000<br>後綴共有 6 個 0 所以回傳 6</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><p>從 <code>5!</code> 看為什麼會有後綴的 <code>0</code><br>因為 <code>1 * 2 * 3 * 4 * 5</code> 有 <code>2</code> 跟 <code>5</code> 相乘得出 <code>10</code><br>但從 <code>1</code> 到 <code>n</code> 那麼多個 <code>2</code> ，真正造成後綴出現 <code>0</code> 的是 <code>5</code><br>所以我們只需要對 <code>n / 5</code> 即可</p>
<p>但 <code>25!</code> 不是 <code>25 / 5 = 5</code> 嗎，為什麼是 <code>6</code><br>因為 <code>25</code> 本身還多包含了 <code>5 * 5</code> ，所以要 + 1</p>
<p>這邊利用遞迴若 <code>n / 5</code> 還可以被 <code>5</code> 除，那就在加進原來的答案中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">trailingZeroes</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">0</span> : n / <span class="number">5</span> + trailingZeroes(n / <span class="number">5</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Given an integer n, return the number of trailing zeroes in n!.&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/Math/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="Math" scheme="http://windsuzu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode#434 Number of Segments in a String - in Swift</title>
    <link href="http://windsuzu.github.io/leetcode-434/"/>
    <id>http://windsuzu.github.io/leetcode-434/</id>
    <published>2017-10-25T05:10:25.000Z</published>
    <updated>2017-10-25T05:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.</p>
<p>Please note that the string does not contain any non-printable characters.</p>
<p>算出一個字串中有幾個段落，一個段落代表一段不含空白的連續字元。</p>
<p>注意字串中不計算任何 “沒印出” 的字元</p>
<hr>
<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Input</span>: <span class="string">"Hello, my name is John"</span></div><div class="line"><span class="type">Output</span>: <span class="number">5</span></div></pre></td></tr></table></figure>
<p>該字串分為五段，”Hello,” 和 “my” 和 “name” 和 “is” 和 “John”</p>
<hr>
<h1 id="解題"><a href="#解題" class="headerlink" title="解題"></a>解題</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSegments</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> s.characters.<span class="built_in">split</span>(separator: <span class="string">" "</span>).<span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一行解決，用空白字元拆開全部字元，算出拆開的段落有幾個。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h1&gt;&lt;p&gt;Count the number of segments in a string, where a segment is defined t
    
    </summary>
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/categories/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/categories/LeetCode/Swift/String/"/>
    
    
      <category term="LeetCode" scheme="http://windsuzu.github.io/tags/LeetCode/"/>
    
      <category term="Swift" scheme="http://windsuzu.github.io/tags/Swift/"/>
    
      <category term="String" scheme="http://windsuzu.github.io/tags/String/"/>
    
  </entry>
  
</feed>
